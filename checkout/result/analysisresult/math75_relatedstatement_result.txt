Loading Change Pool...Loading Class - org.apache.commons.math.stat.Frequency
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getPct
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
getPct
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
Comparable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumPct((Comparable<?>)v);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getPct
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
getPct
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getPct(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getCumFreq
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
getCumFreq
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(Long.valueOf(v));

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:CastExpression{type},L:,R:SimpleName{expression}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:CastExpression{type},L:,R:SimpleName{expression}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
longValue
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getCumFreq
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
getCumFreq
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getCumFreq(((Integer)v).longValue());

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
addValue
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
addValue
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
getCount
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCount(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
put
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
longValue
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
valueOf
-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
valueOf
-leftRS-
[Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
count.longValue()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
count.longValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
count.longValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
count.longValue()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
obj
-leftRS-
[var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
count
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
count
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
compare
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
lastKey
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c.compare(v,freqTable.lastKey())
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
c.compare(v,freqTable.lastKey())
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
c.compare(v,freqTable.lastKey())
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c.compare(v,freqTable.lastKey())
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
v
-leftRS-
[var0 != null, !var0.method0(var1), var0.method0(var1, var2.method1()) >= 0]
-rightRS-
[]
===buggy===
-statement-
0
-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
update
0
to
127
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0(var1, var2) != 0, Type0 var0 = new Type0(this);, Type0<Type1> var0 = new Type2<Type1>();]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
0
to
127
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0(var1, var2) != 0, Type0 var0 = new Type0(this);, Type0<Type1> var0 = new Type2<Type1>();]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
update
0
to
2
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0() <= 0, var0.method0() == 1, Type0<Type1> var0 =
      var1.method0(var2);, Type0<Type1> var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
0
to
2
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0() <= 0, var0.method0() == 1, Type0<Type1> var0 =
      var1.method0(var2);, Type0<Type1> var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = method0();, var0.method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.lastKey()) >= 0) {
  return getSumFreq();
}

-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getSumFreq();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
c
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
c
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
compare
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
firstKey
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
c.compare(v,freqTable.firstKey())
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
c.compare(v,freqTable.firstKey())
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c.compare(v,freqTable.firstKey())
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c.compare(v,freqTable.firstKey())
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
v
-leftRS-
[var0 != null, !var0.method0(var1), var0.method0(var1, var2.method1()) < 0]
-rightRS-
[]
===buggy===
-statement-
0
-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
update
0
to
127
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0(var1, var2) != 0, Type0 var0 = new Type0(this);, Type0<Type1> var0 = new Type2<Type1>();]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
update
0
to
2
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0() <= 0, var0.method0() == 1, Type0<Type1> var0 =
      var1.method0(var2);, Type0<Type1> var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
if (c.compare(v,freqTable.firstKey()) < 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[var0.method0(var1, var2.method1()) < 0, var0.method0(var1, var2.method1()) >= 0, var0.method0(var1, var2) > 0, Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1), final long var0 = method0();, method0() == 0, method0()]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
c
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
c
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Comparable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Comparator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Comparable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
comparator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c=(Comparator<Comparable<?>>)freqTable.comparator()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c=(Comparator<Comparable<?>>)freqTable.comparator()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
Comparator<Comparable<?>> c=(Comparator<Comparable<?>>)freqTable.comparator();

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
T
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:CastExpression{type},L:,R:SimpleName{expression}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:CastExpression{type},L:,R:SimpleName{expression}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return o1.compareTo((T)o2);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
o1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
o1
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
get
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
value=freqTable.get(v)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
value=freqTable.get(v)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Long value=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, Type0 var0 = var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getCumFreq
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (double)getCumFreq(v) / (double)sumFreq;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
next
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
longValue
-leftRS-
[Type0<?> var0 = var1.method0();, var0.method0(), Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();]
-rightRS-
[]
===buggy===
-statement-
longValue
-leftRS-
[Type0<?> var0 = var1.method0();, var0.method0(), Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();]
-rightRS-
[]
===buggy===
-statement-
result
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
iterator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
iterator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
longValue
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
result
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
count
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
count
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
longValue
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
result
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
value
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
value
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sumFreq=getSumFreq()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sumFreq=getSumFreq()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long
-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = new Type0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, Type0 var0 = new Type0(var1, var2, var3);, var0.method0(this.var1 == null,
          str0), this.var0 = var0]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      var0 = new Type0();
    }
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = new Type2<Type1<?>>();]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Comparator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Comparable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
T
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===buggy===
-statement-
T
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
T
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===buggy===
-statement-
T
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Serializable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Serializable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1>
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1>
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1>
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1>
-context-
P:TypeDeclaration{superInterfaceTypes},L:SimpleType{superInterfaceTypes},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
T
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
T
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  c=new NaturalComparator();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (c == null) {
  c=new NaturalComparator();
}

-leftRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
c == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
sumFreq
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1)]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
value
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (value != null) {
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=value.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
value != null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 != null
to
==
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final Type0 var0;, final Type0 var0 = method0(var1);, var0 = var1.method0(), int var0;, Type0 var0 = var1.method0() + var2.method1() + str0
          + var2.method2()
          + str1 + var3 + str2
          + var4.method3(str3, str4)
          + var5.method4(var6, var7);]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();, var0 != null, !var0.method0(var1)]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCumFreq(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
result=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
result=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, Type0<?> var0 = var1.method0();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[Type0<Type1<?>> var0 = (Type0<Type1<?>>) var1.method0();]
-rightRS-
[]
===buggy===
-statement-
c
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
get
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
count=freqTable.get(v)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
count=freqTable.get(v)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Long count=freqTable.get(v);

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, var0.method0(), Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Iterator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
values
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
iterator=freqTable.values().iterator()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
iterator=freqTable.values().iterator()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
iterator
-leftRS-
[var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
-rightRS-
[]
===buggy===
-statement-
iterator
-leftRS-
[var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
-rightRS-
[]
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
      // when unspecified compute check interval as 1/10th of retention
      var0 = (var1 * 1000) / 10;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
-rightRS-
[Type0 var0 = new Type1(var1, var2);, long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
      // when unspecified compute check interval as 1/10th of retention
      var0 = (var1 * 1000) / 10;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
-rightRS-
[Type0 var0 = new Type1(var1, var2);, long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
Iterator<Long> iterator=freqTable.values().iterator();

-leftRS-
[long var0 = 0;, int var0 = 1;]
-rightRS-
[]
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getSumFreq()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getSumFreq()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
getSumFreq()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
getSumFreq()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
update
0
to
127
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0(var1, var2) != 0, Type0 var0 = new Type0(this);, Type0<Type1> var0 = new Type2<Type1>();]
-rightRS-
[]
result:fail
===buggy===
-statement-
0
-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
update
0
to
2
-context-
P:InfixExpression{rightOperand},L:MethodInvocation{leftOperand},R:
-leftRS-
[var0.method0() <= 0, var0.method0() == 1, Type0<Type1> var0 =
      var1.method0(var2);, Type0<Type1> var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (getSumFreq() == 0) {
  return 0;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
sumFreq=getSumFreq()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sumFreq=getSumFreq()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long
-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = new Type0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, Type0 var0 = new Type0(var1, var2, var3);, var0.method0(this.var1 == null,
          str0), this.var0 = var0]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      var0 = new Type0();
    }
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = new Type2<Type1<?>>();]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final long sumFreq=getSumFreq();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
while (iterator.hasNext()) {
  result+=iterator.next().longValue();
}

-leftRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
while (iterator.hasNext()) {
  result+=iterator.next().longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
hasNext
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
iterator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
iterator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sumFreq
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0)]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return Double.NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
if (sumFreq == 0) {
  return Double.NaN;
}

-leftRS-
[final long var0 = method0();, method0() == 0, method0()]
-rightRS-
[]
===buggy===
-statement-
count
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count != null) {
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  result=count.longValue();
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
count != null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 != null
to
==
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final Type0 var0;, final Type0 var0 = method0(var1);, var0 = var1.method0(), int var0;, Type0 var0 = var1.method0() + var2.method1() + str0
          + var2.method2()
          + str1 + var3 + str2
          + var4.method3(str3, str4)
          + var5.method4(var6, var7);]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  return getCount(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
result=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
result=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = new Type0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, Type0 var0 = new Type0(var1, var2, var3);, var0.method0(this.var1 == null,
          str0), this.var0 = var0]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      var0 = new Type0();
    }
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = new Type2<Type1<?>>();]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
if (var0 <= 0) {
      // when unspecified compute check interval as 1/10th of retention
      var0 = (var1 * 1000) / 10;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
-rightRS-
[Type0 var0 = new Type1(var1, var2);, long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
      // when unspecified compute check interval as 1/10th of retention
      var0 = (var1 * 1000) / 10;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
-rightRS-
[Type0 var0 = new Type1(var1, var2);, long var0 = var1.method0(var2,
        var3);, this.var0 = var0, Type0 var0 = method0();]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 != null, !var0.method0(var1), var0.method0(), Type0<Type1<?>> var0 = method0();]
===buggy===
-statement-
result=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
result=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
long
to
int
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:TryStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[]
-rightRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
long result=0;

-leftRS-
[var0.method0(method1(var1)), method0((Type0<?>) var0), method0(((Type0) var0).method1()), method0(var0.method1(var1)), method0(var0), var0 += method0(var1), var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
return result;

-leftRS-
[long var0 = 0;, int var0 = 1;, try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0 != null, !var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
return result;

-leftRS-
[long var0 = 0;, int var0 = 1;, Type0<?> var0 = var1.method0();, var0.method0(), Type0<Type1<?>> var0 = var1.method0().method1();, var0.method0().method1(), Type0<Type1> var0 = var1.method0().method1();, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1.method2())), var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
-rightRS-
[]
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
addValue
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
addValue
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:,R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
put
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
obj
-leftRS-
[var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
get
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
count=freqTable.get(obj)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
count=freqTable.get(obj)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Long count=freqTable.get(obj);

-leftRS-
[]
-rightRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
obj
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
obj=v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
obj=v
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0().method1()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = new Type0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, Type0 var0 = new Type0(var1, var2, var3);, var0.method0(this.var1 == null,
          str0), this.var0 = var0]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      var0 = new Type0();
    }
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1<?>> var0 = new Type2<Type1<?>>();]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
Comparable<?> obj=v;

-leftRS-
[]
-rightRS-
[Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0 var0 = var1.method0(var2);, Type0<Type1> var0 = var1.method0().method1();, Type0 var0 =  var1.method0(var2);, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
count
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return;
      }
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<?> var0 = 
        var1.method0(str0);]
-rightRS-
[Type0<?> var0 = 
        var1.method0(str0);]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(2000)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(), Type0[] var0 = this.var1 == null ? null
        : this.var1.method0();, var0.method0() != null
            && var0.method0().var1 == 0, this.var0 = false, this.var0 == null, this.var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (count == null) {
  freqTable.put(obj,Long.valueOf(1));
}
 else {
  freqTable.put(obj,Long.valueOf(count.longValue() + 1));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:TryStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
count == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:TryStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[var0.method0(), try {
            Type0 var0 = var1.method0(var2);
            if (var0 == null) {
                var1.method1(var2, var3.method2(1));
            } else {
                var1.method1(var2, var3.method2(var0.method3() + 1));
            }
        } catch (Type1 var4) {
            //TreeMap will throw ClassCastException if v is not comparable
            throw var5.method4(
                  str0,
                  var6.method5().method6());
        }, try {
            Type0 var0 =  var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable
        }, try {
            Type0 var0 = var1.method0(var2);
            if (var0 != null) {
                var3 = var0.method1();
            }
        } catch (Type1 var4) {
            return var3;   // v is not comparable
        }, var0.method0(
                  str0,
                  var1.method1().method2()), var0 != null, !var0.method0(var1), Type0<?> var0 = var1;, var0 = var1.method0(((Type0) var2).method1()), var0.method0(var1, var2.method1(1)), var0.method0(var1, var2.method1(var3.method2() + 1)), method0(var0.method1(var1)), method0(var0.method1(var1.method2())), Type0 var0 = var1.method0(var2);, Type0 var0 =  var1.method0(var2);, var0 = new Type0<Type1<?>, Type2>(), var0 = new Type0<Type1<?>, Type2>((Type3<? super Type1<?>>) var1), Type0<Type1> var0 = var1.method0().method1();, var0 += var1.method0().method1(), method0(((Type0) var0).method1()), var0 = var1.method0()]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:TryStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:TryStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:TryStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
      var1 = var0.method0();
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0() ? this : method1();, (var0 != null) ? var0.method0() : str0, var0.method0(this)]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
if (v instanceof Integer) {
  obj=Long.valueOf(((Integer)v).longValue());
}

-leftRS-
[Type0<?> var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
TreeMap
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:ParameterizedType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Comparable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
freqTable
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:ClassInstanceCreation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
