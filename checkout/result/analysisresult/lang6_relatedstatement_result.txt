Loading Change Pool...Loading Class - org.apache.commons.lang3.StringUtils
===buggy===
-statement-
charAt
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
ch=cs.charAt(i)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
ch=cs.charAt(i)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
char ch=cs.charAt(i);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0 = new byte[var1.method0()];
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = method0(null, false, var1);, final Type0 var0 = method0(var1[var2-1],
          false, var3);, final Type0 var0 = method0(var1, var2, var3);]
result:fail
===buggy===
-statement-
char ch=cs.charAt(i);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1[var2];
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var0, int var0 = var1.method0(var2,
            var3.method1());, int var0 = var1.method0(var2,
              var3[var4].method1());, final Type0[] var0 = var1.method0(
            var2.method1());, var0.method0(var1.method1()), method0(var0.method1(), var1), var0 = var1.method0(0).method1(), var0 = method0(var0, var1, var2,
            var3, var4, var5, var6)
                .method1(), final Type0 var0 = var1.method0(0).method1();, final Type0 var0 = var1.method0(1).method1();, Type0 var0 = var1.method0();, final Type0 var0 = var1.method0();, var0.method0(), var0 = var1[0].method0(), var0 = var1.method0(), for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }]
result:fail
===buggy===
-statement-
char ch=cs.charAt(i);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
char ch=cs.charAt(i);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0 = var1[var2];
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 +
            str1 + var2), this.var0 = var0, Type0 var0 = new Type0() {
      int var1 = 0;

      @Override
      public Type1 method0(Type2 var2) {
        int var3;
        synchronized (this) {
          var3 = var1++;
        }
        Type1 var4 = new Type1(var5, var2);
        var4.method1(str0 + var3 +
            str1 + var6);
        return var4;
      }
    };, this.var0 = new Type0(method0().method1()), int var0;, Type0 var0 = new Type0(var1, var2);]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1[var2];
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 +
            str1 + var2), this.var0 = var0, Type0 var0 = new Type0() {
      int var1 = 0;

      @Override
      public Type1 method0(Type2 var2) {
        int var3;
        synchronized (this) {
          var3 = var1++;
        }
        Type1 var4 = new Type1(var5, var2);
        var4.method1(str0 + var3 +
            str1 + var6);
        return var4;
      }
    };, this.var0 = new Type0(method0().method1()), int var0;, Type0 var0 = new Type0(var1, var2);]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1[var2];
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 +
            str1 + var2), this.var0 = var0, Type0 var0 = new Type0() {
      int var1 = 0;

      @Override
      public Type1 method0(Type2 var2) {
        int var3;
        synchronized (this) {
          var3 = var1++;
        }
        Type1 var4 = new Type1(var5, var2);
        var4.method1(str0 + var3 +
            str1 + var6);
        return var4;
      }
    };, this.var0 = new Type0(method0().method1()), int var0;, Type0 var0 = new Type0(var1, var2);]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1[var2];
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 +
            str1 + var2), this.var0 = var0, Type0 var0 = new Type0() {
      int var1 = 0;

      @Override
      public Type1 method0(Type2 var2) {
        int var3;
        synchronized (this) {
          var3 = var1++;
        }
        Type1 var4 = new Type1(var5, var2);
        var4.method1(str0 + var3 +
            str1 + var6);
        return var4;
      }
    };, this.var0 = new Type0(method0().method1()), int var0;, Type0 var0 = new Type0(var1, var2);]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1[var2];
-context-
P:ForStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 +
            str1 + var2), this.var0 = var0, Type0 var0 = new Type0() {
      int var1 = 0;

      @Override
      public Type1 method0(Type2 var2) {
        int var3;
        synchronized (this) {
          var3 = var1++;
        }
        Type1 var4 = new Type1(var5, var2);
        var4.method1(str0 + var3 +
            str1 + var6);
        return var4;
      }
    };, this.var0 = new Type0(method0().method1()), int var0;, Type0 var0 = new Type0(var1, var2);]
result:fail
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
csLen=cs.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
csLen=cs.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = method0(var1.method1().method2());, Type0[] var0 = var1.method0();, Type0<Type1> var0 = var1.method0();, Type0[] var0 = new Type0[var1.method0()];, Type0<Type1> var0 = new Type2<Type1>(var1
        .method0().method1());, var0.method0(var1.method1() == 0,
        str0
        + str1), var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1.method0());, var0<var1.method0(), Type0<Type1> var0 = new Type2<Type1>(
        var1.method0());, Type0[][] var0 = new Type0[var1.method0()][];, final int var0 = var1.method0();, new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), new Type0(var0.method0(new Type1[var0.method1()]),
        var1.method2()), Type0[] var0 = 
          new Type0[var1.method0()];, Type0<Type1> var0 = var1.method0(var2.method1());, var0[var1] = method0(var2.method1(var1)), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(var1), var0.method0(Type0.method1(var1.method2(var2))), for (int var0 = 0; var0 < var1; ++var0) {
      var2[var0] = method0(var3[var0]);
    }, int var0 = 0;, for (int var0 = 0; var0 < var1; var0++) {
      var2[var0] = method0(var3[var0]);
    }, for (int var0 = var1; var0 < var2; var0++) {
      var3.method0(method1(var4[var0]));
    }, for (int var0 = 0; var0 < var1; var0++) {
      var2[var0] = method0(var3.method1(var0));
    }, for (int var0 = 0; var0 < var1; var0++) {
      Type0 var2 = var3[var0];
      var4.method0(var0, Type1.method1(var2));
      boolean var5 = var6.method2(var2);
      var4.method3(var5);
      if (var5) {
        var6.method4(var2);
      }
    }, for (int var0 = 0; var0 < var1.method0(); var0++) {
      var2[var0] = Type0.method1(var1.method2(var0));
    }, for (int var0=0; var0<var1.method0(); var0++) {
      if (var1.method1(var0)) {
        var2.method2(var3[var0]);
      }
    }, for (int var0 = 0; var0 < var1; var0++) {
      var2.method0(Type0.method1(var3[var0]));
    }, for (int var0 = 0; var0 < var1; var0++) {
      var2.method0(var3[var0]);
    }, for (int var0 = 0; var0 < var1; var0++) {
      var2[var0] = var3.method0()
          .method1(Type0.method2(var4[var0])).method3();
    }, for (int var0 = 0; var0 < var1; var0++) {
      var2[var0] = var3.method0(var0);
    }, for (int var0 = 0; var0 < var1; var0++) {
      var2[var0] = Type0.method0(var3.method1(var0));
    }, for (int var0 = 0; var0 < var1; ++var0) {
      var2.method0(Type0.method1(var3.method2(var0)));
    }, for (int var0 = 0; var0 < var1; ++var0) {
      var2[var0] = Type0.method0(var3[var0]);
    }, for (int var0 = 0; var0 < var1.method0(); var0++) {
        var2[var0] = Type0.method1(var1.method2(var0));
      }, for (int var0 = 0; var0 < var1; var0++) {
      var2[var0] = Type0.method0(var3[var0]);
    }, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), new Type0(var0.method0(), var0.method1(),
        method2(var0.method3()), method2(var0.method4())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()), var0.method2()
        .method3(new Type1[0])), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), new Type0(Type1.method0(var0.method1()),
        var0.method2(), var0.method3(),
        var0.method4()), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), var0.
     method0(Type0.method1((Type1) var1)), var0.
     method0(Type0.method1((Type1) var1)).
     method2(var1.method3()).
     method4(var1.method5()).
     method6(var1.method7()).
     method8(var1.method9()).
     method10(var1.method11()).
     method12(var1.method13()).
     method14(Type0.method1(var1.method15())), method0(var0, 0), var0.method0(method1(var1[var2])), var0.method0(Type0.method1(var1.method2())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5((Type1)var1)), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var1.method2(), var1.method3(),
        var3.method4(new Type2[0]));, var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        Type1.method0(var0.method2()), Type1.method0(var0
            .method3()), var0.method4()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(var0.method0(), Type1.method1(var0.method2())), Type0 var0 = method0(var1);, var0.method0(method1(var1.method2())), Type0 var0 = Type1.method0(var1.method1());, var0.method0().method1(method2(var1.method3())), var0.method0().method1(method2(var1.method3()))
          .method4(var1.method5()).method6(method2(var1.method7())), var0.method0().method1(method2(var1.method3()))
          .method4(var1.method5()).method6(method2(var1.method7()))
          .method8(method2(var1.method9())), new Type0().method0(method1(var0.method2())), new Type0().method0(method1(var0.method2()))
          .method3(var0.method4()).method5(method1(var0.method6())), new Type0().method0(method1(var0.method2()))
          .method3(var0.method4()).method5(method1(var0.method6()))
          .method7(method1(var0.method8()))]
-rightRS-
[Type0[] var0 = method0(var1.method1().method2());, Type0[] var0 = var1.method0();, Type0<Type1> var0 = var1.method0();, Type0[] var0 = new Type0[var1.method0()];, Type0<Type1> var0 = new Type2<Type1>(var1
        .method0().method1());, var0.method0(var1.method1() == 0,
        str0
        + str1), var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1.method0());, var0<var1.method0(), Type0<Type1> var0 = new Type2<Type1>(
        var1.method0());, Type0[][] var0 = new Type0[var1.method0()][];, final int var0 = var1.method0();, new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), new Type0(var0.method0(new Type1[var0.method1()]),
        var1.method2()), Type0[] var0 = 
          new Type0[var1.method0()];, Type0<Type1> var0 = var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2.method1(var3.method2()));]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, var0 = var1.method0(var2), final Type0 var0 = var1.method0(var2);]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, var0 = var1.method0(var2), final Type0 var0 = var1.method0(var2);]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, var0 = var1.method0(var2), final Type0 var0 = var1.method0(var2);]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, var0 = var1.method0(var2), final Type0 var0 = var1.method0(var2);]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, var0 = var1.method0(var2), final Type0 var0 = var1.method0(var2);]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
short var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, this.var0, final long var0 = var1.method0();]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
short var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, this.var0, final long var0 = var1.method0();]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
short var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, this.var0, final long var0 = var1.method0();]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
short var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, this.var0, final long var0 = var1.method0();]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
short var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, this.var0, final long var0 = var1.method0();]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
long var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();, var0.method0().method1().method2()]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
long var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();, var0.method0().method1().method2()]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
long var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();, var0.method0().method1().method2()]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
long var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();, var0.method0().method1().method2()]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
long var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();, var0.method0().method1().method2()]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLen=cs.length();

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
cs
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
searchChars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (cs == null || searchChars == null) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
csLast=csLen - 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
csLast=csLen - 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
csLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = str0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0();, long var0 = -1L;, final long var0 = var1.method0();, var0 = var1.method0(), var0.method0(var1, var2), var0.method0(var1,
            var2), !var0.method0(var1, var2), final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = str0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0();, long var0 = -1L;, final long var0 = var1.method0();, var0 = var1.method0(), var0.method0(var1, var2), var0.method0(var1,
            var2), !var0.method0(var1, var2), final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = str0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0();, long var0 = -1L;, final long var0 = var1.method0();, var0 = var1.method0(), var0.method0(var1, var2), var0.method0(var1,
            var2), !var0.method0(var1, var2), final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = str0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0();, long var0 = -1L;, final long var0 = var1.method0();, var0 = var1.method0(), var0.method0(var1, var2), var0.method0(var1,
            var2), !var0.method0(var1, var2), final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = str0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[long var0 = var1.method0();, long var0 = -1L;, final long var0 = var1.method0();, var0 = var1.method0(), var0.method0(var1, var2), var0.method0(var1,
            var2), !var0.method0(var1, var2), final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[var0 == null || var0.method0() == 0, var0 = var1.method0(), var0.method0() == 0, var0 = var1, var0.method0(var1, false, 0, var2, 0, var3.method1(var1.method2(), var2.method2())), var0.method0() != var1.method0(), var0.method0(var1, true, 0, var2, 0, var1.method1()), var0 ? var1.method0() : 0, int var0 = var1 ? var2.method0() : var3;, int var0 = var1.method0() - var2.method0() + 1;, var0.method0(var1, true, var2, var3, 0, var3.method1()), var0.method0(var1, var2, var1.method1()), method0(var0, var1, var0.method1()), var0 > var1.method0() - var2.method0(), var0 = var1.method0() - var2.method0(), int var0 = var1.method0();, int var0 = var1.method0() - var2;, int var0 = var1;, var0 == 0, var0 = var1.method0(var2, var3, var2.method1()), var0 = var1.method0() + var0, var0 > var1.method0(), var0.method0() <= var1, var0.method0(var0.method1() - var1), var0 < 0 || var1 > var2.method0(), var0.method0() <= var1 + var2, var0.method0(var1 + var2.method1()), var0 == var1 || var0 == var2.method0() - var3.method0(), int var0 = var1.method0(var2, var3 + var4.method1());, var0.method0(var1 + var2.method1(), var3), var0.method0() == 1, var0 < var1, var0.method0(new Type0(var1, var2, var3 - var2)), method0(var0, var1, 0, var2), var0.method0(var1.method1()), var0.method0(0, var0.method1() - var1.method1()), Type0 var0 = new Type0(var1.method0() + var2);, int var0 = var1 == null ? 0 : var2;, var0 == null || var0.method0() == 0 || var1 == null ||
                var2 == 0 || var3 == null || var4 == 0, var0[var1] || var2[var1] == null ||
                    var2[var1].method0() == 0 || var3[var1] == null, int var0 = var1[var2].method0() - var3[var2].method0();, var0 = var1.method0(var0, var2.method1() / 5), var0 = var1 + var2[var3].method0(), new Type0(var0 + var1 - var2 + var3.method0() + 1), int var0 = var1.method0() - 1;, int var0 = var1 - var2.method0();, var0 == null ? 0 : var0.method0(), var0 += var1.method0(), var0.method0() - var1 < var2 - 3, var0 = var1.method0() - (var2 - 3), var0 + var1 - 3 < var2.method0(), var0 + var1.method0(var1.method1() - (var2 - 3)), var0 >= var1.method0() || var0 < var2.method0()+2, int var0 = var1-var2.method0();, int var0 = var1.method0()-var2/2;, var0 < var1.method0() && var0 < var2.method0(), var0 < var1.method0() || var0 < var2.method0(), var0 == null || var1 <= 1, var0 = var1.method0(var2[var3].method1(), var0), var0 == null || var1 == 0, var0.method0(var1, var2, var3, var4), var0.method0() > var1.method0(), var0.method0(var1, var2, 0, var3, 0, var3.method1()), int var0 = var1.method0() - var2.method0();, var0.method0(var1, var2, var3, var4, 0, var4.method1())]
-rightRS-
[]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
int csLast=csLen - 1;

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
searchLen=searchChars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
searchLen=searchChars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
searchChars.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(str0);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
-rightRS-
[var0.method0(), var0.method0(var1, new Type0(var2.method1(),
          str0), new Type1(method2(var3))), var0.method0(var1,
          new Type0(var2.method1(), str0),
          new Type1(method2(var3.method3()))), byte[] var0 =
          var1.method0(var2.method1().method2());, byte[] var0 = new byte[var1.method0().var2];, byte[] var0 = new byte[var1];, var0 < var1, Type0 var0 = var1.method0(var2);, Type0 var0 =
          var1.method0(var2.method1());]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[int var0 = var1.method0();, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
int searchLen=searchChars.length;

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1 - 1;]
===buggy===
-statement-
searchLast=searchLen - 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
searchLast=searchLen - 1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var2);, char var0 = var1.method0(0);, char var0 = var1[var2];, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(var4, true, var0, var5, 0, var5.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(var3, true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(var3, true, var0, var4, 0, var5)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var6, var2, 0) >= 0;
            if (var0 + 1 < var1 && var7.method2(var2)) {
                char var8 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var6, var8, 0) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, 0);
            if (var4 == var7) {
                continue;
            }

            if (var4 < var8) {
                var8 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, var6.method1());
            if (var4 > var7) {
                var7 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            var3.method0(var5[var0]);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null) {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                        var3[var0].method0() == 0 || var4[var0] == null) {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3[var0];
            if (var4.method0(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method2(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method3(var2)) {
                var3[var0] = var4.method4(var2);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false && var3.method1(var0) != ' ') {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var0;
        }, for (int var0 = var1; var0 <= var2; var0++) {
                if (var3.method0(var0 - 1) == var4) {
                    // diagonally left and up
                    var5[var0] = var6[var0 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var5[var0] = 1 + var7.method1(var7.method1(var5[var0 - 1], var6[var0]), var6[var0 - 1]);
                }
            }, var0 < var1 && var2 < var3 && var4.method0(var5), var0.method0(var1), var0 + 1 < var1 && var2.method0(var3), for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        // ch is a supplementary character
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            return var4;
                        }
                    } else {
                        return var4;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            continue var9;
                        }
                    } else {
                        continue var9;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }, for (int var0 = 1; var0 <= var1; var0++) {
            char var2 = var3.method0(var0 - 1); // jth character of t
            var4[0] = var0;

            // compute stripe indices, constrain to array size
            int var5 = var6.method1(1, var0 - var7);
            int var8 = var6.method2(var9, var0 + var7);

            // the stripe may lead off of the table if s and t are of different sizes
            if (var5 > var8) {
                return -1;
            }

            // ignore entry left of leftmost
            if (var5 > 1) {
                var4[var5 - 1] = var10;
            }

            // iterates through [min, max] in s
            for (int var11 = var5; var11 <= var8; var11++) {
                if (var12.method0(var11 - 1) == var2) {
                    // diagonally left and up
                    var4[var11] = var13[var11 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var4[var11] = 1 + var6.method2(var6.method2(var4[var11 - 1], var13[var11]), var13[var11 - 1]);
                }
            }

            // copy current distance counts to 'previous row' distance counts
            var14 = var13;
            var13 = var4;
            var4 = var14;
        }, var0.method0(var1.method1(var2)) == false, var0 != var1 && var2.method0(var3.method1(var0)), var0 != var1 && var2.method0(var3.method1(var0)) != var4, var0 != 0 && var1.method0(var2.method1(var0 - 1)), var0 != 0 && var1.method0(var2.method1(var0 - 1)) != var3, var0.method0(var1.method1(var2)), var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, var0 == var1 && var2.method0(var3 - 1) == var4, method0(var0.method1(0), var1), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0.method0(var1.method1(var2)) == false && var1.method1(var2) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2 - 1), char var0 = var1.method0(var2 - 1);]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var2);, char var0 = var1.method0(0);, char var0 = var1[var2];, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(var4, true, var0, var5, 0, var5.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(var3, true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(var3, true, var0, var4, 0, var5)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var6, var2, 0) >= 0;
            if (var0 + 1 < var1 && var7.method2(var2)) {
                char var8 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var6, var8, 0) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, 0);
            if (var4 == var7) {
                continue;
            }

            if (var4 < var8) {
                var8 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, var6.method1());
            if (var4 > var7) {
                var7 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            var3.method0(var5[var0]);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null) {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                        var3[var0].method0() == 0 || var4[var0] == null) {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3[var0];
            if (var4.method0(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method2(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method3(var2)) {
                var3[var0] = var4.method4(var2);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false && var3.method1(var0) != ' ') {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var0;
        }, for (int var0 = var1; var0 <= var2; var0++) {
                if (var3.method0(var0 - 1) == var4) {
                    // diagonally left and up
                    var5[var0] = var6[var0 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var5[var0] = 1 + var7.method1(var7.method1(var5[var0 - 1], var6[var0]), var6[var0 - 1]);
                }
            }, var0 < var1 && var2 < var3 && var4.method0(var5), var0.method0(var1), var0 + 1 < var1 && var2.method0(var3), for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        // ch is a supplementary character
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            return var4;
                        }
                    } else {
                        return var4;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            continue var9;
                        }
                    } else {
                        continue var9;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }, for (int var0 = 1; var0 <= var1; var0++) {
            char var2 = var3.method0(var0 - 1); // jth character of t
            var4[0] = var0;

            // compute stripe indices, constrain to array size
            int var5 = var6.method1(1, var0 - var7);
            int var8 = var6.method2(var9, var0 + var7);

            // the stripe may lead off of the table if s and t are of different sizes
            if (var5 > var8) {
                return -1;
            }

            // ignore entry left of leftmost
            if (var5 > 1) {
                var4[var5 - 1] = var10;
            }

            // iterates through [min, max] in s
            for (int var11 = var5; var11 <= var8; var11++) {
                if (var12.method0(var11 - 1) == var2) {
                    // diagonally left and up
                    var4[var11] = var13[var11 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var4[var11] = 1 + var6.method2(var6.method2(var4[var11 - 1], var13[var11]), var13[var11 - 1]);
                }
            }

            // copy current distance counts to 'previous row' distance counts
            var14 = var13;
            var13 = var4;
            var4 = var14;
        }, var0.method0(var1.method1(var2)) == false, var0 != var1 && var2.method0(var3.method1(var0)), var0 != var1 && var2.method0(var3.method1(var0)) != var4, var0 != 0 && var1.method0(var2.method1(var0 - 1)), var0 != 0 && var1.method0(var2.method1(var0 - 1)) != var3, var0.method0(var1.method1(var2)), var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, var0 == var1 && var2.method0(var3 - 1) == var4, method0(var0.method1(0), var1), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0.method0(var1.method1(var2)) == false && var1.method1(var2) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2 - 1), char var0 = var1.method0(var2 - 1);]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var2);, char var0 = var1.method0(0);, char var0 = var1[var2];, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(var4, true, var0, var5, 0, var5.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(var3, true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(var3, true, var0, var4, 0, var5)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var6, var2, 0) >= 0;
            if (var0 + 1 < var1 && var7.method2(var2)) {
                char var8 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var6, var8, 0) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, 0);
            if (var4 == var7) {
                continue;
            }

            if (var4 < var8) {
                var8 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, var6.method1());
            if (var4 > var7) {
                var7 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            var3.method0(var5[var0]);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null) {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                        var3[var0].method0() == 0 || var4[var0] == null) {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3[var0];
            if (var4.method0(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method2(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method3(var2)) {
                var3[var0] = var4.method4(var2);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false && var3.method1(var0) != ' ') {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var0;
        }, for (int var0 = var1; var0 <= var2; var0++) {
                if (var3.method0(var0 - 1) == var4) {
                    // diagonally left and up
                    var5[var0] = var6[var0 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var5[var0] = 1 + var7.method1(var7.method1(var5[var0 - 1], var6[var0]), var6[var0 - 1]);
                }
            }, var0 < var1 && var2 < var3 && var4.method0(var5), var0.method0(var1), var0 + 1 < var1 && var2.method0(var3), for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        // ch is a supplementary character
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            return var4;
                        }
                    } else {
                        return var4;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            continue var9;
                        }
                    } else {
                        continue var9;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }, for (int var0 = 1; var0 <= var1; var0++) {
            char var2 = var3.method0(var0 - 1); // jth character of t
            var4[0] = var0;

            // compute stripe indices, constrain to array size
            int var5 = var6.method1(1, var0 - var7);
            int var8 = var6.method2(var9, var0 + var7);

            // the stripe may lead off of the table if s and t are of different sizes
            if (var5 > var8) {
                return -1;
            }

            // ignore entry left of leftmost
            if (var5 > 1) {
                var4[var5 - 1] = var10;
            }

            // iterates through [min, max] in s
            for (int var11 = var5; var11 <= var8; var11++) {
                if (var12.method0(var11 - 1) == var2) {
                    // diagonally left and up
                    var4[var11] = var13[var11 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var4[var11] = 1 + var6.method2(var6.method2(var4[var11 - 1], var13[var11]), var13[var11 - 1]);
                }
            }

            // copy current distance counts to 'previous row' distance counts
            var14 = var13;
            var13 = var4;
            var4 = var14;
        }, var0.method0(var1.method1(var2)) == false, var0 != var1 && var2.method0(var3.method1(var0)), var0 != var1 && var2.method0(var3.method1(var0)) != var4, var0 != 0 && var1.method0(var2.method1(var0 - 1)), var0 != 0 && var1.method0(var2.method1(var0 - 1)) != var3, var0.method0(var1.method1(var2)), var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, var0 == var1 && var2.method0(var3 - 1) == var4, method0(var0.method1(0), var1), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0.method0(var1.method1(var2)) == false && var1.method1(var2) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2 - 1), char var0 = var1.method0(var2 - 1);]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[]
-rightRS-
[char var0 = var1.method0(var2);, char var0 = var1.method0(0);, char var0 = var1[var2];, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(var4, true, var0, var5, 0, var5.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(var3, true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(var3, true, var0, var4, 0, var5)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var6, var2, 0) >= 0;
            if (var0 + 1 < var1 && var7.method2(var2)) {
                char var8 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var6, var8, 0) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, 0);
            if (var4 == var7) {
                continue;
            }

            if (var4 < var8) {
                var8 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, var6.method1());
            if (var4 > var7) {
                var7 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            var3.method0(var5[var0]);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null) {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                        var3[var0].method0() == 0 || var4[var0] == null) {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3[var0];
            if (var4.method0(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method2(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method3(var2)) {
                var3[var0] = var4.method4(var2);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false && var3.method1(var0) != ' ') {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var0;
        }, for (int var0 = var1; var0 <= var2; var0++) {
                if (var3.method0(var0 - 1) == var4) {
                    // diagonally left and up
                    var5[var0] = var6[var0 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var5[var0] = 1 + var7.method1(var7.method1(var5[var0 - 1], var6[var0]), var6[var0 - 1]);
                }
            }, var0 < var1 && var2 < var3 && var4.method0(var5), var0.method0(var1), var0 + 1 < var1 && var2.method0(var3), for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        // ch is a supplementary character
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            return var4;
                        }
                    } else {
                        return var4;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            continue var9;
                        }
                    } else {
                        continue var9;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }, for (int var0 = 1; var0 <= var1; var0++) {
            char var2 = var3.method0(var0 - 1); // jth character of t
            var4[0] = var0;

            // compute stripe indices, constrain to array size
            int var5 = var6.method1(1, var0 - var7);
            int var8 = var6.method2(var9, var0 + var7);

            // the stripe may lead off of the table if s and t are of different sizes
            if (var5 > var8) {
                return -1;
            }

            // ignore entry left of leftmost
            if (var5 > 1) {
                var4[var5 - 1] = var10;
            }

            // iterates through [min, max] in s
            for (int var11 = var5; var11 <= var8; var11++) {
                if (var12.method0(var11 - 1) == var2) {
                    // diagonally left and up
                    var4[var11] = var13[var11 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var4[var11] = 1 + var6.method2(var6.method2(var4[var11 - 1], var13[var11]), var13[var11 - 1]);
                }
            }

            // copy current distance counts to 'previous row' distance counts
            var14 = var13;
            var13 = var4;
            var4 = var14;
        }, var0.method0(var1.method1(var2)) == false, var0 != var1 && var2.method0(var3.method1(var0)), var0 != var1 && var2.method0(var3.method1(var0)) != var4, var0 != 0 && var1.method0(var2.method1(var0 - 1)), var0 != 0 && var1.method0(var2.method1(var0 - 1)) != var3, var0.method0(var1.method1(var2)), var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, var0 == var1 && var2.method0(var3 - 1) == var4, method0(var0.method1(0), var1), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0.method0(var1.method1(var2)) == false && var1.method1(var2) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2 - 1), char var0 = var1.method0(var2 - 1);]
===buggy===
-statement-
searchLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = var1.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2, var3)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = (Type0) var1;, Type0 var0;, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, method2(var0));
      var2.method0(str2, var0.method3().method4());
      var3.method0(var0.method5(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, method1(var0));
      var2.method0(str1, var0.method2());
      var3.method0(var0.method3(), var2);
    }, for (Type0 var0 : var1) {
      final Type1<Type2, Type3> var2 = new Type4<Type2, Type3>();
      var2.method0(str0, var3
          .method1());
      var2.method0(str1, var3
          .method2());
      var2.method0(str2, var3
          .method3());
      var4.method0(var0.method4(), var2);
    }, Type0 var0 = new Type0(
                                    var1.method0(),
                                    var1.method1(),
                                    var1.method2(),
                                    var1.method3(),
                                    var1.method4(),
                                    var1.method5(),
                                    var2,
                                    var3,
                                    var4);, var0 = var1.method0(), int var0 = var1.method0();, Type0[] var0 = var1.method0();, var0.method0(), var0.method0(var1), Type0 var0 = null;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(str0);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
-rightRS-
[var0.method0(), var0.method0(var1, new Type0(var2.method1(),
          str0), new Type1(method2(var3))), var0.method0(var1,
          new Type0(var2.method1(), str0),
          new Type1(method2(var3.method3()))), byte[] var0 =
          var1.method0(var2.method1().method2());, byte[] var0 = new byte[var1.method0().var2];, byte[] var0 = new byte[var1];, var0 < var1, Type0 var0 = var1.method0(var2);, Type0 var0 =
          var1.method0(var2.method1());]
result:fail
===buggy===
-statement-
int searchLast=searchLen - 1;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
searchChars
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (searchChars[j] == ch) {
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1();
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(var2);, Type0 var0 = new Type0(var1);, this.var0 = var0]
-rightRS-
[var0.method0(var1.method1()), var0.method0(), try {
          Type0 var0 = new Type0(new Type1(
              var1, var2, var3), 0);
          var4.method0(str0 + var0);

          Type2 var5 = new Type2(var6.method1(),
              var0, var3, var7.method2(), 1);
          var5.method3(var8.method4().
              method5());
          method6(var9, var5, var10);
          var5.method7(var11);

          if (!Type3.this.method8()) {
            var5.method9(var12.method1());
            var10.method3(var5.method10());
            var5.method11(var10);
            var5.method12(var10);
            try {
              var13.method13();
              var14.method14(var5.method15());
              var5.method16(var10, Type3.this);
              var14.method17(var5.method15());
            } finally {
              var13.method18();
            }

            var4.method0(str1 + var0);
          } else {
            throw new Type4();
          }
        } catch (Type5 var15) {
          // store this to be rethrown in the initial thread context.
          this.var16 = var15;
        }, try {
        Type0[] var0 = 
          var1.method0(var2, var3, var4, var5);

        int var6 = var7.method1();
        var8.method2(var9);
        var10.method3(1.0f);

        Type1<Type2, Type3> var11 =
            var12.method4(new Type4<Type2, Type3>());
        
        Type5<Type6> var13 = method5(
            var0, var2, var11);
              
        method6(var13.method7(), var6);
        Type8 var14 = method8();
        method9(var13, var14, str0);

        try {
          if (var6 > 0) {
            Type5<Type6> var15 = method10(
                var2, var11);
            Type8 var16 = method11();
            method9(var15, var16, str1);
          }
        } finally {
          for (Type3 var17 : var11.method12()) {
            var17.method13();
          }
        }
        // delete the temporary directory in output directory
        var8.method14(var9);
        var10.method15(1.0f);

        if (var18) {
          this.var10.method16(var19);
        } else {
          this.var10.method16(var20);
        }

        var21.method17(var7, var10);
      } catch (Type9 var22) {
        try {
          var8.method18(var9, 
            var23);
        } catch (Type10 var24) {
          var25.method19(str2 + var26);
        }
        var10.method15(1.0f);
        if (var18) {
          this.var10.method16(var19);
        } else {
          this.var10.method16(var27);
        }
        var25.method20(var26, var22);

        var21.method17(var7, var10);

      } finally {
        try {
          var28.method21(var29.method22(), true);  // delete submit dir
          var3.method21(var30, true);              // delete local copy
          // Cleanup distributed cache
          var31.method23();
        } catch (Type10 var32) {
          var25.method20(str3+var26+str4+var32);
        }
      }, this.var0 = var1.method0(new Type0(
          new Type0(var2.method1(var3), var4), var5.method2())), var0 = new Type0(var1.method0(), var2, var3.method1(), 
                               str0, var1.method2()), var0 = new Type0(var1, 0.0f, 0.0f, var2, 
          var3.method0(), var3.method1(), var3.method2(), 
          var3.method3().method4()), Type0 var0 = new Type0(var1.method0(), var2, var3,
            var4.method1(), 1);, Type0 var0 = new Type0(var1.method0(),
              var2, var3, var4.method1(), 1);, var0.method0().method1(), var0.method0(var1).method1(), var0.method0(new Type0(var1, var2+str0)).method1(), Type0 var0 = var1.method0().method1();, var0.method0(var1, var2.method1()), Type0 var0 = var1.method0() + var2 + var3;, this.var0 = var0, int var0 = 0;, Type0 var0 =
            new Type0(var1, var2, 0);]
result:fail
===buggy===
-statement-
if (searchChars[j] == ch) {
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===Candidate===
-change-
insert
boolean var0 = (var1 < var2 - 1);
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0().method1(var0, var1[++var2]), method0(), var0 = var1.method0(method1()), Type0 var0 = var1.method0(method1());, var0.method0(var1), var0[var1].method0(str0), var0.method0(str0), var0[var1].method0(str0) || (var0[var1].method0(str1)), Type0 var0 = var1[++var2];, for (Type0 var0 : var1) {
            var2.method0(var0);
          }, this.var0 = var0, for (int var0 = 0; var0 < var1; var0++) { // parse command line
      if (var2[var0].method0(str0)) {
        Type0 var3 = var2[++var0];
        var4 = new Type2(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str2)) {
        Type0 var3 = var2[++var0];
        var4 = new Type4(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str3)) {
        Type0 var3 = var2[++var0];
        var4 = new Type5(var3);
        if (var3.method0(str1)) {
          method1();
          return -1;
        }
      } else if (var2[var0].method0(str4)) {
        var4 = new Type6();
      } else if (var2[var0].method0(str5)) {
        method2().method3(var5, var2[++var0]);
      } else if (var2[var0].method0(str6)) {
        method2().method3(var6, var2[++var0]);
      } else if (var2[var0].method0(str7)) {
        var7 = true;
        method2().method3(var8, var2[++var0]);
      } else if (var2[var0].method0(str8)) {
        method2().method4(var9, true);
      } else if (var2[var0].method0(str9) || (var2[var0].method0(str10))) {
        var10 = true;
      } else if (var2[var0].method0(str1)) {
        method1();
        return -1;
      } else {
        method1();
        var11.method5(var12);
        return -1;
      }
    }, for(int var0=0; var0 < var1; ++var0) {
            var2.method0(var3.method1(var0) + str0 + var4[var0]);
          }, method0().method1(var0, true)]
result:fail
===buggy===
-statement-
if (searchChars[j] == ch) {
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:ForStatement{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (searchChars[j] == ch) {
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(false)
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = (Type0)var1;, var0.method0(), !var0.method0() || ((Type0)var0).method1() != null, var0 != null && var0.method0()? ((Type0)var0).method1(): null]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (searchChars[j] == ch) {
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (searchChars[j] == ch) {
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (searchChars[j] == ch) {
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:ForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
ch
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
ch
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
ch
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  if (Character.isHighSurrogate(ch)) {
    if (j == searchLast) {
      return false;
    }
    if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
      return false;
    }
  }
 else {
    return false;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < csLen; i++) {
  char ch=cs.charAt(i);
  for (int j=0; j < searchLen; j++) {
    if (searchChars[j] == ch) {
      if (Character.isHighSurrogate(ch)) {
        if (j == searchLast) {
          return false;
        }
        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=0; i < csLen; i++) {
  char ch=cs.charAt(i);
  for (int j=0; j < searchLen; j++) {
    if (searchChars[j] == ch) {
      if (Character.isHighSurrogate(ch)) {
        if (j == searchLast) {
          return false;
        }
        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < csLen; i++) {
  char ch=cs.charAt(i);
  for (int j=0; j < searchLen; j++) {
    if (searchChars[j] == ch) {
      if (Character.isHighSurrogate(ch)) {
        if (j == searchLast) {
          return false;
        }
        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < csLen; i++) {
  char ch=cs.charAt(i);
  for (int j=0; j < searchLen; j++) {
    if (searchChars[j] == ch) {
      if (Character.isHighSurrogate(ch)) {
        if (j == searchLast) {
          return false;
        }
        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
}

-leftRS-
[int var0 = var1;, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < csLen; i++) {
  char ch=cs.charAt(i);
  for (int j=0; j < searchLen; j++) {
    if (searchChars[j] == ch) {
      if (Character.isHighSurrogate(ch)) {
        if (j == searchLast) {
          return false;
        }
        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
}

-leftRS-
[int var0 = var1;, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=0; i < csLen; i++) {
  char ch=cs.charAt(i);
  for (int j=0; j < searchLen; j++) {
    if (searchChars[j] == ch) {
      if (Character.isHighSurrogate(ch)) {
        if (j == searchLast) {
          return false;
        }
        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
}

-leftRS-
[int var0 = var1;, int var0 = var1 - 1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
for (int i=0; i < csLen; i++) {
  char ch=cs.charAt(i);
  for (int j=0; j < searchLen; j++) {
    if (searchChars[j] == ch) {
      if (Character.isHighSurrogate(ch)) {
        if (j == searchLast) {
          return false;
        }
        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
}

-leftRS-
[int var0 = var1;, int var0 = var1 - 1;]
-rightRS-
[]
===buggy===
-statement-
csLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
csLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
csLen
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
i
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
csLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
searchLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
searchLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
searchLen
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
j
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
searchLen
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[char var0 = var1.method0(var2);, char var0 = var1.method0(0);, char var0 = var1[var2];, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(var4, true, var0, var5, 0, var5.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(var3, true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(var3, true, var0, var4, 0, var5)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var6, var2, 0) >= 0;
            if (var0 + 1 < var1 && var7.method2(var2)) {
                char var8 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var6, var8, 0) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, 0);
            if (var4 == var7) {
                continue;
            }

            if (var4 < var8) {
                var8 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, var6.method1());
            if (var4 > var7) {
                var7 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            var3.method0(var5[var0]);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null) {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                        var3[var0].method0() == 0 || var4[var0] == null) {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3[var0];
            if (var4.method0(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method2(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method3(var2)) {
                var3[var0] = var4.method4(var2);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false && var3.method1(var0) != ' ') {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var0;
        }, for (int var0 = var1; var0 <= var2; var0++) {
                if (var3.method0(var0 - 1) == var4) {
                    // diagonally left and up
                    var5[var0] = var6[var0 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var5[var0] = 1 + var7.method1(var7.method1(var5[var0 - 1], var6[var0]), var6[var0 - 1]);
                }
            }, var0 < var1 && var2 < var3 && var4.method0(var5), var0.method0(var1), var0 + 1 < var1 && var2.method0(var3), for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        // ch is a supplementary character
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            return var4;
                        }
                    } else {
                        return var4;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            continue var9;
                        }
                    } else {
                        continue var9;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }, for (int var0 = 1; var0 <= var1; var0++) {
            char var2 = var3.method0(var0 - 1); // jth character of t
            var4[0] = var0;

            // compute stripe indices, constrain to array size
            int var5 = var6.method1(1, var0 - var7);
            int var8 = var6.method2(var9, var0 + var7);

            // the stripe may lead off of the table if s and t are of different sizes
            if (var5 > var8) {
                return -1;
            }

            // ignore entry left of leftmost
            if (var5 > 1) {
                var4[var5 - 1] = var10;
            }

            // iterates through [min, max] in s
            for (int var11 = var5; var11 <= var8; var11++) {
                if (var12.method0(var11 - 1) == var2) {
                    // diagonally left and up
                    var4[var11] = var13[var11 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var4[var11] = 1 + var6.method2(var6.method2(var4[var11 - 1], var13[var11]), var13[var11 - 1]);
                }
            }

            // copy current distance counts to 'previous row' distance counts
            var14 = var13;
            var13 = var4;
            var4 = var14;
        }, var0.method0(var1.method1(var2)) == false, var0 != var1 && var2.method0(var3.method1(var0)), var0 != var1 && var2.method0(var3.method1(var0)) != var4, var0 != 0 && var1.method0(var2.method1(var0 - 1)), var0 != 0 && var1.method0(var2.method1(var0 - 1)) != var3, var0.method0(var1.method1(var2)), var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, var0 == var1 && var2.method0(var3 - 1) == var4, method0(var0.method1(0), var1), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0.method0(var1.method1(var2)) == false && var1.method1(var2) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2 - 1), char var0 = var1.method0(var2 - 1);]
-rightRS-
[]
===buggy===
-statement-
return true;

-leftRS-
[char var0 = var1.method0(var2);, char var0 = var1.method0(0);, char var0 = var1[var2];, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(var4, true, var0, var5, 0, var5.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(var3, true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(var3, true, var0, var4, 0, var5)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var6, var2, 0) >= 0;
            if (var0 + 1 < var1 && var7.method2(var2)) {
                char var8 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var6, var8, 0) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, 0);
            if (var4 == var7) {
                continue;
            }

            if (var4 < var8) {
                var8 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, var6.method1());
            if (var4 > var7) {
                var7 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            var3.method0(var5[var0]);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null) {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                        var3[var0].method0() == 0 || var4[var0] == null) {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3[var0];
            if (var4.method0(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method2(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method3(var2)) {
                var3[var0] = var4.method4(var2);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false && var3.method1(var0) != ' ') {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var0;
        }, for (int var0 = var1; var0 <= var2; var0++) {
                if (var3.method0(var0 - 1) == var4) {
                    // diagonally left and up
                    var5[var0] = var6[var0 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var5[var0] = 1 + var7.method1(var7.method1(var5[var0 - 1], var6[var0]), var6[var0 - 1]);
                }
            }, var0 < var1 && var2 < var3 && var4.method0(var5), var0.method0(var1), var0 + 1 < var1 && var2.method0(var3), for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        // ch is a supplementary character
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            return var4;
                        }
                    } else {
                        return var4;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            continue var9;
                        }
                    } else {
                        continue var9;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }, for (int var0 = 1; var0 <= var1; var0++) {
            char var2 = var3.method0(var0 - 1); // jth character of t
            var4[0] = var0;

            // compute stripe indices, constrain to array size
            int var5 = var6.method1(1, var0 - var7);
            int var8 = var6.method2(var9, var0 + var7);

            // the stripe may lead off of the table if s and t are of different sizes
            if (var5 > var8) {
                return -1;
            }

            // ignore entry left of leftmost
            if (var5 > 1) {
                var4[var5 - 1] = var10;
            }

            // iterates through [min, max] in s
            for (int var11 = var5; var11 <= var8; var11++) {
                if (var12.method0(var11 - 1) == var2) {
                    // diagonally left and up
                    var4[var11] = var13[var11 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var4[var11] = 1 + var6.method2(var6.method2(var4[var11 - 1], var13[var11]), var13[var11 - 1]);
                }
            }

            // copy current distance counts to 'previous row' distance counts
            var14 = var13;
            var13 = var4;
            var4 = var14;
        }, var0.method0(var1.method1(var2)) == false, var0 != var1 && var2.method0(var3.method1(var0)), var0 != var1 && var2.method0(var3.method1(var0)) != var4, var0 != 0 && var1.method0(var2.method1(var0 - 1)), var0 != 0 && var1.method0(var2.method1(var0 - 1)) != var3, var0.method0(var1.method1(var2)), var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, var0 == var1 && var2.method0(var3 - 1) == var4, method0(var0.method1(0), var1), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0.method0(var1.method1(var2)) == false && var1.method1(var2) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2 - 1), char var0 = var1.method0(var2 - 1);]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:ForStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return true;

-leftRS-
[char var0 = var1.method0(var2);, char var0 = var1.method0(0);, char var0 = var1[var2];, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false) {
                return false;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = method0(var3[var0], var4);
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var3.method0(var4, true, var0, var5, 0, var5.method1())) {
                return var0;
            }
        }, for (int var0 = var1; var0 >= 0; var0--) {
            if (var2.method0(var3, true, var0, var4, 0, var4.method1())) {
                return var0;
            }
        }, for (int var0 = 0; var0 <= var1; var0++) {
            if (var2.method0(var3, true, var0, var4, 0, var5)) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0))) {
                return true;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var0 < var7 && var4 < var8 && var9.method1(var2)) {
                        // ch is a supplementary character
                        if (var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return var0;
                        }
                    } else {
                        return var0;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            boolean var4 = var5.method1(var6, var2, 0) >= 0;
            if (var0 + 1 < var1 && var7.method2(var2)) {
                char var8 = var3.method0(var0 + 1);
                if (var4 && var5.method1(var6, var8, 0) < 0) {
                    return var0;
                }
            } else {
                if (!var4) {
                    return var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            for (int var4 = 0; var4 < var5; var4++) {
                if (var6[var4] == var2) {
                    if (var7.method1(var2)) {
                        if (var4 == var8) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var0 < var9 && var6[var4 + 1] == var3.method0(var0 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, 0);
            if (var4 == var7) {
                continue;
            }

            if (var4 < var8) {
                var8 = var4;
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            Type0 var2 = var3[var0];
            if (var2 == null) {
                continue;
            }
            var4 = var5.method0(var6, var2, var6.method1());
            if (var4 > var7) {
                var7 = var4;
            }
        }, int var0 = 0, var1 = 0;, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            if (var5[var0] != null) {
                var3.method0(var5[var0]);
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
            if (var0 > var1) {
                var3.method0(var4);
            }
            var3.method0(var5[var0]);
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (!var2.method0(var3.method1(var0))) {
                var4[var5++] = var3.method1(var0);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] != var3) {
                var2[var4++] = var2[var0];
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] || var3[var0] == null ||
                    var3[var0].method0() == 0 || var4[var0] == null) {
                continue;
            }
            var5 = var6.method1(var3[var0]);

            // see if we need to keep searching for this
            if (var5 == -1) {
                var2[var0] = true;
            } else {
                if (var7 == -1 || var5 < var7) {
                    var7 = var5;
                    var8 = var0;
                }
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null || var3[var0] == null) {
                continue;
            }
            int var4 = var3[var0].method0() - var2[var0].method0();
            if (var4 > 0) {
                var5 += 3 * var4; // assume 3 matches
            }
        }, for (int var0 = var1; var0 < var2; var0++) {
                var3.method0(var4.method1(var0));
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] || var3[var0] == null ||
                        var3[var0].method0() == 0 || var4[var0] == null) {
                    continue;
                }
                var5 = var6.method1(var3[var0], var7);

                // see if we need to keep searching for this
                if (var5 == -1) {
                    var2[var0] = true;
                } else {
                    if (var8 == -1 || var5 < var8) {
                        var8 = var5;
                        var9 = var0;
                    }
                }
            }, for (int var0 = var1; var0 < var2; var0++) {
            var3.method0(var4.method1(var0));
        }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3.method0(var0);
            int var4 = var5.method1(var2);
            if (var4 >= 0) {
                var6 = true;
                if (var4 < var7) {
                    var8.method2(var9.method0(var4));
                }
            } else {
                var8.method2(var2);
            }
        }, for (int var0 = var1 * 2 - 2; var0 >= 0; var0--, var0--) {
                    var2[var0] = var3;
                    var2[var0 + 1] = var4;
                }, for (int var0 = 0; var0 < var1; var0++) {
                    var2.method0(var3);
                }, for (int var0 = var1 - 1; var0 >= 0; var0--) {
            var2[var0] = var3;
        }, for (int var0 = 0; var0 < var1; var0++) {
                var2[var0] = var3[var0 % var4];
            }, for (int var0 = 0; var0 < var1; var0++) {
            char var2 = var3[var0];
            if (var4.method0(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method2(var2)) {
                var3[var0] = var4.method1(var2);
            } else if (var4.method3(var2)) {
                var3[var0] = var4.method4(var2);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            if (var2.method0(var3.method1(var0)) == false && var3.method1(var0) != ' ') {
                return false;
            }
        }, int var0;, for (int var0 = 0; var0 < var1; var0++) {
            if (var2[var0] == null) {
                var3 = true;
                var4 = 0;
            } else {
                var5 = false;
                var4 = var6.method0(var2[var0].method1(), var4);
                var7 = var6.method2(var2[var0].method1(), var7);
            }
        }, for (int var0 = 0; var0 < var1; var0++) {
            var2[var0] = var0;
        }, for (int var0 = var1; var0 <= var2; var0++) {
                if (var3.method0(var0 - 1) == var4) {
                    // diagonally left and up
                    var5[var0] = var6[var0 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var5[var0] = 1 + var7.method1(var7.method1(var5[var0 - 1], var6[var0]), var6[var0 - 1]);
                }
            }, var0 < var1 && var2 < var3 && var4.method0(var5), var0.method0(var1), var0 + 1 < var1 && var2.method0(var3), for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        // ch is a supplementary character
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            return var4;
                        }
                    } else {
                        return var4;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return true;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return true;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return true;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4 < var5 && var0 < var6 && var7.method0(var3)) {
                        if (var2[var0 + 1] == var8.method1(var4 + 1)) {
                            continue var9;
                        }
                    } else {
                        continue var9;
                    }
                }
            }, for (int var0 = 0; var0 < var1; var0++) {
                if (var2[var0] == var3) {
                    if (var4.method0(var3)) {
                        if (var0 == var5) {
                            // missing low surrogate, fine, like String.indexOf(String)
                            return false;
                        }
                        if (var6 < var7 && var2[var0 + 1] == var8.method1(var6 + 1)) {
                            return false;
                        }
                    } else {
                        // ch is in the Basic Multilingual Plane
                        return false;
                    }
                }
            }, for (int var0 = 1; var0 <= var1; var0++) {
            char var2 = var3.method0(var0 - 1); // jth character of t
            var4[0] = var0;

            // compute stripe indices, constrain to array size
            int var5 = var6.method1(1, var0 - var7);
            int var8 = var6.method2(var9, var0 + var7);

            // the stripe may lead off of the table if s and t are of different sizes
            if (var5 > var8) {
                return -1;
            }

            // ignore entry left of leftmost
            if (var5 > 1) {
                var4[var5 - 1] = var10;
            }

            // iterates through [min, max] in s
            for (int var11 = var5; var11 <= var8; var11++) {
                if (var12.method0(var11 - 1) == var2) {
                    // diagonally left and up
                    var4[var11] = var13[var11 - 1];
                } else {
                    // 1 + minimum of cell to the left, to the top, diagonally left and up
                    var4[var11] = 1 + var6.method2(var6.method2(var4[var11 - 1], var13[var11]), var13[var11 - 1]);
                }
            }

            // copy current distance counts to 'previous row' distance counts
            var14 = var13;
            var13 = var4;
            var4 = var14;
        }, var0.method0(var1.method1(var2)) == false, var0 != var1 && var2.method0(var3.method1(var0)), var0 != var1 && var2.method0(var3.method1(var0)) != var4, var0 != 0 && var1.method0(var2.method1(var0 - 1)), var0 != 0 && var1.method0(var2.method1(var0 - 1)) != var3, var0.method0(var1.method1(var2)), var0[var1 + 1] == var2.method0(var3 + 1), var0 < var1 && var2[var3 + 1] == var4.method0(var0 + 1), char var0 = var1.method0(var2 + 1);, var0.method0(var1) == var2, var0.method0(var1.method1(var2)) >= 0, !var0.method0(var1.method1(var2)), var0[var1++] = var2.method0(var3), var0.method0(var1 - 1) == var2, var0 == var1 && var2.method0(var3 - 1) == var4, method0(var0.method1(0), var1), char var0 = var1.method0(1);, method0(var0, var1, var2.method1(0)), new Type0(var0)
            .method0(var1.method1(var2.method2(0))), var0.method0(var1.method1(var2)) == false && var1.method1(var2) != ' ', var0.method0(var1) != var2.method0(var1), char var0 = var1[0].method0(var2);, var0[var1].method0(var2) != var3, var0 = var1.method0(var2 - 1), char var0 = var1.method0(var2 - 1);]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
compile
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Pattern
-leftRS-
[Type0 var0 = var1.method0(str0);, var0.method0(var1, var2)]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1() * var2)
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodInvocation{arguments},L:StringLiteral{arguments},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
"(?: \\s|[\\s&&[^ ]])\\s*"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
Loading Class - org.apache.commons.lang3.StringEscapeUtils
===buggy===
-statement-
translate
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null)
      return false;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 instanceof Type1) {
        return (Type1) var0;
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ESCAPE_CSV.translate(input);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
null
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
null
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
this
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0.method0())
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0<Type1<?>>(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0<Type1<?>>(var0)
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
new Type0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
ESCAPE_CSV
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
ESCAPE_CSV
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
toString
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
containsNone
-leftRS-
[var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
containsNone
-leftRS-
[var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
CSV_SEARCH_CHARS
-leftRS-
[var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1)]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
  out.write(input.toString());
}
 else {
  out.write(CSV_QUOTE);
  out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
  out.write(CSV_QUOTE);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
toString
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
write
-leftRS-
[var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
write
-leftRS-
[var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
out
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
out
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
assert var0 <= var1 :
      str0 + var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
return input.length();

-leftRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
index
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (index != 0) {
  throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}

-leftRS-
[]
-rightRS-
[]
Loading Class - org.apache.commons.lang3.text.translate.AggregateTranslator
===buggy===
-statement-
translators
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
translators
-leftRS-
[]
-rightRS-
[]
Loading Class - org.apache.commons.lang3.text.translate.EntityArrays
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
ISO8859_1_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
ISO8859_1_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return ISO8859_1_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
ISO8859_1_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
ISO8859_1_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
HTML40_EXTENDED_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
HTML40_EXTENDED_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return HTML40_EXTENDED_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
HTML40_EXTENDED_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
HTML40_EXTENDED_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
BASIC_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
BASIC_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return BASIC_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
BASIC_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
BASIC_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
APOS_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
APOS_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return APOS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
APOS_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
APOS_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_ESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
JAVA_CTRL_CHARS_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
JAVA_CTRL_CHARS_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{returnType2}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return JAVA_CTRL_CHARS_UNESCAPE.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
JAVA_CTRL_CHARS_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
JAVA_CTRL_CHARS_UNESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
method0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CSV_QUOTE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
valueOf
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String
-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CSV_QUOTE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
invert
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
ISO8859_1_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_UNESCAPE=invert(ISO8859_1_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
invert
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
HTML40_EXTENDED_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_UNESCAPE=invert(HTML40_EXTENDED_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
invert
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
BASIC_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_UNESCAPE=invert(BASIC_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
invert
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
APOS_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] APOS_UNESCAPE=invert(APOS_ESCAPE);

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
invert
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
JAVA_CTRL_CHARS_ESCAPE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
/**
   * Create the singleton instance. However, the thread can be started lazily in
   * {@link #addRenewAction(FileSystem)}
   */
  private static Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0.class, method0(true), super(var0.method0() + str0 + Type0.class.method0());]
result:fail
===Candidate===
-change-
insert
/**
   * Create the singleton instance. However, the thread can be started lazily in
   * {@link #addRenewAction(FileSystem)}
   */
  private static Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0.class, method0(true), super(var0.method0() + str0 + Type0.class.method0());]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
public final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0, var0 == 0, var0.method0(var1), var0 < var1, this.var0 = var1.method0()]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===Candidate===
-change-
insert
public final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0, var0 == 0, var0.method0(var1), var0 < var1, this.var0 = var1.method0()]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
final static int var0 = 101;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final static int var0 = 101;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
final static int var0 = 100;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final static int var0 = 100;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
private volatile boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(Type0.class,
        new Type1(var1))]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(Type0.class,
        new Type1(var1))]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
protected long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1[var2.method0()];]
result:fail
===Candidate===
-change-
insert
protected long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1[var2.method0()];]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
private int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1]
result:fail
===Candidate===
-change-
insert
private int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
/** Simple wrapper for two counters : 
   *  nsCount (namespace consumed) and dsCount (diskspace consumed).
   */
  static class Type0 {
    long var0 = 0;
    long var1 = 0;
    
    /** returns namespace count */
    long getNsCount() {
      return var0;
    }
    /** returns diskspace count */
    long getDsCount() {
      return var1;
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1[var2.method0()];]
result:fail
===Candidate===
-change-
insert
/** Simple wrapper for two counters : 
   *  nsCount (namespace consumed) and dsCount (diskspace consumed).
   */
  static class Type0 {
    long var0 = 0;
    long var1 = 0;
    
    /** returns namespace count */
    long getNsCount() {
      return var0;
    }
    /** returns diskspace count */
    long getDsCount() {
      return var1;
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1[var2.method0()];]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_UNESCAPE=invert(JAVA_CTRL_CHARS_ESCAPE);

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
Type0<Type1> var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[boolean var0 = var1.method0(str0) && var1.method0(str1);, boolean var0 = var1.method0(str0) || var1.method0(str1);, boolean var0 = var1.method0(str0);, Type0 var0 = new Type0(0, var1, str0);, Type0<Type1> var0 = var1.method0();, for (Type0 var0 : var1) {
          if (var0.method0() == var2
              && var0.method1() == var3
              && var0.method2().method3(var4)) {
            var5 = str0;
            break;
          }
        }, Type0 var0 = null;, var0.method0(), var0.method0(var1), method0(var0.method1(str0)), var0.method0() > 1, var0.method0(var0.method1() - 2), var0.method0() < 2, var0 = var1.method0(var2.method1(), !var3.method2(str0)), var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[boolean var0 = var1.method0(str0) && var1.method0(str1);, boolean var0 = var1.method0(str0) || var1.method0(str1);, boolean var0 = var1.method0(str0);, Type0 var0 = new Type0(0, var1, str0);, Type0<Type1> var0 = var1.method0();, for (Type0 var0 : var1) {
          if (var0.method0() == var2
              && var0.method1() == var3
              && var0.method2().method3(var4)) {
            var5 = str0;
            break;
          }
        }, Type0 var0 = null;, var0.method0(), var0.method0(var1), method0(var0.method1(str0)), var0.method0() > 1, var0.method0(var0.method1() - 2), var0.method0() < 2, var0 = var1.method0(var2.method1(), !var3.method2(str0)), var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[boolean var0 = var1.method0(str0) && var1.method0(str1);, boolean var0 = var1.method0(str0) || var1.method0(str1);, boolean var0 = var1.method0(str0);, Type0 var0 = new Type0(0, var1, str0);, Type0<Type1> var0 = var1.method0();, for (Type0 var0 : var1) {
          if (var0.method0() == var2
              && var0.method1() == var3
              && var0.method2().method3(var4)) {
            var5 = str0;
            break;
          }
        }, Type0 var0 = null;, var0.method0(), var0.method0(var1), method0(var0.method1(str0)), var0.method0() > 1, var0.method0(var0.method1() - 2), var0.method0() < 2, var0 = var1.method0(var2.method1(), !var3.method2(str0)), var0.method0(str0)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
private static final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 
      = var1.method0
           (var2.method1(var3)), var0.method0(var1)]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private static final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 
      = var1.method0
           (var2.method1(var3)), var0.method0(var1)]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private static final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 
      = var1.method0
           (var2.method1(var3)), var0.method0(var1)]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
@Parameter(required=true)
  private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(var1.method1()), for (Type0 var0 : var1.method0(var2)) {
        var3.method1(var0.method2());
      }, method0(), for (Type0 var0 : var1) {
          var2.method0(str0 + var0.method1());
        }, var0.method0(var1, var2) != 0, method0().method1(str0), method0().method1(var0), Type0<Type1> var0 = new Type2<Type1>();, for (Type0 var0 : var1) {
          method0().method1(var0);
        }, try {
      if (!var0.method0()) {
        if (!var0.method1()) {
          throw new Type0(str0 + 
            var0);
        }
      }
      Type1<Type2> var1 = new Type3<Type2>();
      var1.method2(var2);
      var1.method2(str1 + var0.method3());
      if (var3 != null) {
        for (Type4 var4 : var3) {
          var1.method2(str2 + var4.method3());
        }
      }
      for (Type4 var5 : var6.method4(var7)) {
        var1.method2(var5.method3());
      }
      Type5 var8 = new Type5(this);
      Type1<Type2> var9 = new Type3<Type2>();
      if (var8.method5(var1, var9) != 0) {
        method6().method7(str3);
        for (Type2 var10 : var9) {
          method6().method7(var10);
        }
        throw new Type0(str4);
      }
    } catch (Type6 var11) {
      throw new Type0(var11.method8(), var11);
    }, !var0.method0(), new Type0(var0.method0(), var0), Type0 var0 = new Type0(this);]
result:fail
===Candidate===
-change-
insert
@Parameter(required=true)
  private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(var1.method1()), for (Type0 var0 : var1.method0(var2)) {
        var3.method1(var0.method2());
      }, method0(), for (Type0 var0 : var1) {
          var2.method0(str0 + var0.method1());
        }, var0.method0(var1, var2) != 0, method0().method1(str0), method0().method1(var0), Type0<Type1> var0 = new Type2<Type1>();, for (Type0 var0 : var1) {
          method0().method1(var0);
        }, try {
      if (!var0.method0()) {
        if (!var0.method1()) {
          throw new Type0(str0 + 
            var0);
        }
      }
      Type1<Type2> var1 = new Type3<Type2>();
      var1.method2(var2);
      var1.method2(str1 + var0.method3());
      if (var3 != null) {
        for (Type4 var4 : var3) {
          var1.method2(str2 + var4.method3());
        }
      }
      for (Type4 var5 : var6.method4(var7)) {
        var1.method2(var5.method3());
      }
      Type5 var8 = new Type5(this);
      Type1<Type2> var9 = new Type3<Type2>();
      if (var8.method5(var1, var9) != 0) {
        method6().method7(str3);
        for (Type2 var10 : var9) {
          method6().method7(var10);
        }
        throw new Type0(str4);
      }
    } catch (Type6 var11) {
      throw new Type0(var11.method8(), var11);
    }, !var0.method0(), new Type0(var0.method0(), var0), Type0 var0 = new Type0(this);]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
public static Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
static Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
private Type0<?> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = new Type0<Type1>(var1), action.weakFs]
-rightRS-
[final Type0<?> var0 = (Type0<?>)var1;, var0 instanceof Type0, var0.method0(new Type0<Type1>(var1)), for (Type0<?> var0 : var1) {
      if (var2.method0() == var3) {
        try {
          var3.method1().method2(var3.method3());
        } catch (Type2 var4) {
          var5.method4(str0 + var3.method5()
              + str1);
          if (var5.method6()) {
            var5.method7(var4.method8());
          }
        }
        var1.method9(var0);
        return;
      }
    }, Type0<?> var0 = null;, this.var0 = new Type0<Type1>(var1), action.weakFs, method0(), var0.method0(), final Type0 var0 = var1.method0();, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
private Type0<?> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = new Type0<Type1>(var1), action.weakFs]
-rightRS-
[final Type0<?> var0 = (Type0<?>)var1;, var0 instanceof Type0, var0.method0(new Type0<Type1>(var1)), for (Type0<?> var0 : var1) {
      if (var2.method0() == var3) {
        try {
          var3.method1().method2(var3.method3());
        } catch (Type2 var4) {
          var5.method4(str0 + var3.method5()
              + str1);
          if (var5.method6()) {
            var5.method7(var4.method8());
          }
        }
        var1.method9(var0);
        return;
      }
    }, Type0<?> var0 = null;, this.var0 = new Type0<Type1>(var1), action.weakFs, method0(), var0.method0(), final Type0 var0 = var1.method0();, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
private Type0<?> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = new Type0<Type1>(var1), action.weakFs]
-rightRS-
[final Type0<?> var0 = (Type0<?>)var1;, var0 instanceof Type0, var0.method0(new Type0<Type1>(var1)), for (Type0<?> var0 : var1) {
      if (var2.method0() == var3) {
        try {
          var3.method1().method2(var3.method3());
        } catch (Type2 var4) {
          var5.method4(str0 + var3.method5()
              + str1);
          if (var5.method6()) {
            var5.method7(var4.method8());
          }
        }
        var1.method9(var0);
        return;
      }
    }, Type0<?> var0 = null;, this.var0 = new Type0<Type1>(var1), action.weakFs, method0(), var0.method0(), final Type0 var0 = var1.method0();, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
private Type0<?> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = new Type0<Type1>(var1), action.weakFs]
-rightRS-
[final Type0<?> var0 = (Type0<?>)var1;, var0 instanceof Type0, var0.method0(new Type0<Type1>(var1)), for (Type0<?> var0 : var1) {
      if (var2.method0() == var3) {
        try {
          var3.method1().method2(var3.method3());
        } catch (Type2 var4) {
          var5.method4(str0 + var3.method5()
              + str1);
          if (var5.method6()) {
            var5.method7(var4.method8());
          }
        }
        var1.method9(var0);
        return;
      }
    }, Type0<?> var0 = null;, this.var0 = new Type0<Type1>(var1), action.weakFs, method0(), var0.method0(), final Type0 var0 = var1.method0();, Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
public static final long var0 = 10000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(true, str0, var0), method0(false, var0), Type0 var0 = var1.method0(var2);, try {
        if (!var0.method0(str0)) {
          throw new Type0(str1 + var1 +
              str2 + var0);
        }
        if (!var0.method1(str0)) {
          var0 += str0;
        }
        for (Type1 var2 : var3) {
          var4.method2(new Type2(str3 + var0 + var2));
        }
      } catch (Type3 var5) {
        throw new Type0(var5);
      }, for (Type0 var0 : var1) {
          var2.method0(new Type1(str0 + var3 + var0));
        }, for (Type0 var0 : var1) {
        var2.method0(var0);
      }, var0.method0(new Type0(str0 + var1 + var2)), var0.method0(var1), !var0.method0(str0), Type0 var0 = new Type0(var1);]
result:fail
===Candidate===
-change-
insert
public static final long var0 = 10000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(true, str0, var0), method0(false, var0), Type0 var0 = var1.method0(var2);, try {
        if (!var0.method0(str0)) {
          throw new Type0(str1 + var1 +
              str2 + var0);
        }
        if (!var0.method1(str0)) {
          var0 += str0;
        }
        for (Type1 var2 : var3) {
          var4.method2(new Type2(str3 + var0 + var2));
        }
      } catch (Type3 var5) {
        throw new Type0(var5);
      }, for (Type0 var0 : var1) {
          var2.method0(new Type1(str0 + var3 + var0));
        }, for (Type0 var0 : var1) {
        var2.method0(var0);
      }, var0.method0(new Type0(str0 + var1 + var2)), var0.method0(var1), !var0.method0(str0), Type0 var0 = new Type0(var1);]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
private @Context Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = (Type0)var1.method0(str0);, final Type0 var0 = var1.method0();, final Type0 var0 = var1.method0(var2, var3, 1);, final Type0 var0 = var1.method0(var2,
          var3, var4 != null? var4: var3 + 1);, final long var0 = var1 == var2? var3: var4 - 1;, var0.method0(), final int var0 = var1.method0();, var0.method0(var1.method1(0)), var0.method0().method1(
        ), var0.method0().method1(
        ).method2().method3().method4(
        var1), final long var0 = var1.method0();, var0.method0().method1(
        ).method2(), final Type0 var0 = method0(var1, var2, var3, var4);, method0(var0, var1, var2, var3, var4, var5, var6, var7), final Type0 var0 = var1.method0(var2);, var0.method0().method1(
        ).method2().method3()]
result:fail
===Candidate===
-change-
insert
private @Context Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = (Type0)var1.method0(str0);, final Type0 var0 = var1.method0();, final Type0 var0 = var1.method0(var2, var3, 1);, final Type0 var0 = var1.method0(var2,
          var3, var4 != null? var4: var3 + 1);, final long var0 = var1 == var2? var3: var4 - 1;, var0.method0(), final int var0 = var1.method0();, var0.method0(var1.method1(0)), var0.method0().method1(
        ), var0.method0().method1(
        ).method2().method3().method4(
        var1), final long var0 = var1.method0();, var0.method0().method1(
        ).method2(), final Type0 var0 = method0(var1, var2, var3, var4);, method0(var0, var1, var2, var3, var4, var5, var6, var7), final Type0 var0 = var1.method0(var2);, var0.method0().method1(
        ).method2().method3()]
result:fail
===Candidate===
-change-
insert
private @Context Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = (Type0)var1.method0(str0);, final Type0 var0 = var1.method0();, final Type0 var0 = var1.method0(var2, var3, 1);, final Type0 var0 = var1.method0(var2,
          var3, var4 != null? var4: var3 + 1);, final long var0 = var1 == var2? var3: var4 - 1;, var0.method0(), final int var0 = var1.method0();, var0.method0(var1.method1(0)), var0.method0().method1(
        ), var0.method0().method1(
        ).method2().method3().method4(
        var1), final long var0 = var1.method0();, var0.method0().method1(
        ).method2(), final Type0 var0 = method0(var1, var2, var3, var4);, method0(var0, var1, var2, var3, var4, var5, var6, var7), final Type0 var0 = var1.method0(var2);, var0.method0().method1(
        ).method2().method3()]
result:fail
===Candidate===
-change-
insert
private @Context Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = (Type0)var1.method0(str0);, final Type0 var0 = var1.method0();, final Type0 var0 = var1.method0(var2, var3, 1);, final Type0 var0 = var1.method0(var2,
          var3, var4 != null? var4: var3 + 1);, final long var0 = var1 == var2? var3: var4 - 1;, var0.method0(), final int var0 = var1.method0();, var0.method0(var1.method1(0)), var0.method0().method1(
        ), var0.method0().method1(
        ).method2().method3().method4(
        var1), final long var0 = var1.method0();, var0.method0().method1(
        ).method2(), final Type0 var0 = method0(var1, var2, var3, var4);, method0(var0, var1, var2, var3, var4, var5, var6, var7), final Type0 var0 = var1.method0(var2);, var0.method0().method1(
        ).method2().method3()]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===Candidate===
-change-
insert
private Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[for (Type0 var0 : var1.method0(Type0.class)) {
      if (var0.method1(var2)) {
        return var0;
      }
    }, var0.method0(Type0.class), var0.method0(var1), OSType.OS_TYPE_UNIX, this.var0 = var0, var0 != null && var0.method0(var1) >= 0]
result:fail
===Candidate===
-change-
insert
private Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[for (Type0 var0 : var1.method0(Type0.class)) {
      if (var0.method1(var2)) {
        return var0;
      }
    }, var0.method0(Type0.class), var0.method0(var1), OSType.OS_TYPE_UNIX, this.var0 = var0, var0 != null && var0.method0(var1) >= 0]
result:fail
===Candidate===
-change-
insert
private Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[for (Type0 var0 : var1.method0(Type0.class)) {
      if (var0.method1(var2)) {
        return var0;
      }
    }, var0.method0(Type0.class), var0.method0(var1), OSType.OS_TYPE_UNIX, this.var0 = var0, var0 != null && var0.method0(var1) >= 0]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===Candidate===
-change-
insert
private Type0<Type1,Type2<Type1>> var0 = new Type3<Type1,Type2<Type1>>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, var0 = var1.method0(var2), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, var0 = var1.method0(), var0.method0() != null, var0.method0(), method0(var0, var1, var2, var3.method1().method2(), var4,
                var5), method0(), var0 = method0(var1, var2), var0 != null && var0.method0() != null, int var0 = var1.method0();, try {
      Type0 var0 = var1.method0();
      Type0 var2 = var1.method1();

      Type1 var3 = new Type1();
      var3.method2(var2);
      var3.method2('.');
      var3.method2(var0);

      Type0 var4 = var3.method3();
      var3.method2('.');
      int var5 = var3.method4();

      Type0 var6 = null;
      Type2 var7 = null;
      Type2 var8 = null;
      Type3 var9 = null;
      method5();  // reset the buffer to the beginning
      if (!method6()) {
        // for sending dense metrics, update metrics cache
        // and get the updated data
        var9 = var10.method7(var1);

        if (var9 != null && var9.method8() != null) {
          for (Type4<Type0, Type5> var11 : var9
              .method8()) {
            Type5 var12 = var11.method9();
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      } else {
        // we support sparse updates

        Type7<Type5> var16 = (Type7<Type5>) var1
            .method18();
        if (var16.method19() > 0) {
          // we got metrics. so send the latest
          for (Type5 var12 : var1.method18()) {
            var3.method2(var12.method0());
            Type0 var13 = var3.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var12.method10(var14);
            var6 = var14.method11();
            var7 = var14.method12();

            Type6 var15 = method13(var13);
            var8 = method14(var15, var7);

            // send metric to Ganglia
            method15(var4, var13, var6, var12.method16().method3(), var15,
                var8);

            // reset the length of the buffer for next iteration
            var3.method17(var5);
          }
        }
      }
    } catch (Type8 var17) {
      throw new Type9(str0, var17);
    }, !method0(), for (Type0<Type1, Type2> var0 : var1
              .method0()) {
            Type2 var2 = var0.method1();
            var3.method2(var2.method3());
            Type1 var4 = var3.method4();

            // visit the metric to identify the Ganglia type and
            // slope
            var2.method5(var5);
            var6 = var5.method6();
            var7 = var5.method7();

            Type3 var8 = method8(var4);
            var9 = method9(var8, var7);

            // send metric to Ganglia
            method10(var10, var4, var6, var2.method11().method4(), var8,
                var9);

            // reset the length of the buffer for next iteration
            var3.method12(var11);
          }, var0.method0(var1), var0.method0() > 0, for (Type0 var0 : var1.method0()) {
            var2.method1(var0.method2());
            Type1 var3 = var2.method3();

            // visit the metric to identify the Ganglia type and
            // slope
            var0.method4(var4);
            var5 = var4.method5();
            var6 = var4.method6();

            Type2 var7 = method7(var3);
            var8 = method8(var7, var6);

            // send metric to Ganglia
            method9(var9, var3, var5, var0.method10().method3(), var7,
                var8);

            // reset the length of the buffer for next iteration
            var2.method11(var10);
          }, var0.method0(var1.method1()), var0.method0(str0 + var1 + str1 + var2 + str2
          + var3 + str3 + var4.method1() + str4
          + method2()), Type0<Type1> var0 = (Type0<Type1>) var1
            .method0();, var0
            .method0(), var0.method0('.')]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===Candidate===
-change-
insert
/**
   * The number of datanodes for each software version. This list should change
   * during rolling upgrades.
   * Software version -> Number of datanodes with this version
   */
  private Type0<Type1, Type2> var0 =
    new Type0<Type1, Type2>(4, 0.75f);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(
        var2,
        var3), this.var0 = var1.method0(
          var2.method1(var3,
              var4)).method2(), this.var0 = var1.method0(
        var2.method1(var3, 
            Type0.class, Type1.class), var2), method0(), var0.method0(
          var1.method1(var2,
              var3)), var0.method0(var1), Type0<Type1> var0 = var1.method0(var2);, var0.method0(), var0.method0(var1.method1()), Type0 var0 =
              new Type0(new Type1(var1.method0(),
                  var1.method1(), str0,
                  var1.method2() == 0 ? var2 : var1.method2(),
                  var3, var4));, var0.method0(
        (var1 > 0 && 
            var1 <= 1.0f),
        var2 +
        str0 + var1 + str1 +
        str2), var0.method0(var1 > 0,
        var2 +
        str0 + var1 + str1 +
        str2), this.var0 = var0, var0.method0(str0, var1), var0.method0(str0 + 
          var1 + str1 + var2), this.var0, this.var0 = method0(var1, var2), this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0)), Type0 var0 = var1.method0(var2).method1(0);, var0
              .method0(var1.method1().method2(var0.method3())), var0 = var1.method0(0), var0.method0(var1) != null, Type0 var0 = var1.method0(var2.method1());, this.var0 = 2 * var1
        + 10 * 1000 * var2, var0.method0(var1
        + str0 + this.var2), var0.method0(
              str0 + var1), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + 
          var1.method1() +  str2), var0.method0(str0
          + var1 + str1 + var1.method1()), var0.method0(str0 + var1
              + str1 + var2 + str2
              + var2.method1()), var0.method0(str0 +
                    (var1 - var2.method1())), var0.method0(str0), method0().method1(var0), var0.method0(var1[var2]), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3.method1(new Type2[var3.method2()]),
                  var2.method3())), var0.method0(new Type0(
                  new Type1(var1, var2),
                  var3,
                  var2.method1())), var0.method0(new Type0(var1, var2,
              var3)), var0.method0(new Type0(var1,
              var2, var3)), var0.method0(new Type0(var1.method1())), this.var0 = new Type0(var1, var2, var3), try {
      this.var0.method0(var1.method1(var2, str0),
        var1.method1(var3, str0));
    } catch (Type0 var4) {
      var5.method2(str1, var4);
    }, try {
        var0.method0(3000);
      } catch (Type0 var1) {
      }, final Type0 var0 = new Type0(
          var1, var2);, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          var0 = null;
        }, try {
      var0.method0(var1.method1());
  
      // Checks if the node is not on the hosts list.  If it is not, then
      // it will be disallowed from registering. 
      if (!var2.method2(var0)) {
        throw new Type0(var0);
      }
        
      var3.method3(str0
          + var0 + str1 + var0.method4());
  
      Type1 var4 = var5.method5(var0.method4());
      Type1 var6 = var7.method6(
          var0.method7(), var0.method8());
        
      if (var6 != null && var6 != var4) {
        var8.method3(str2 + var6);
        // nodeN previously served a different data storage, 
        // which is not served by anybody anymore.
        method9(var6);
        // physically remove node from datanodeMap
        method10(var6);
        var6 = null;
      }
  
      if (var4 != null) {
        if (var6 == var4) {
          // The same datanode has been just restarted to serve the same data 
          // storage. We do not need to remove old data blocks, the delta will
          // be calculated on the next block report from the datanode
          if(var3.method11()) {
            var3.method12(str2
                + str3);
          }
        } else {
          // nodeS is found
          /* The registering datanode is a replacement node for the existing 
            data storage, which from now on will be served by a new node.
            If this message repeats, both nodes might have same storageID 
            by (insanely rare) random chance. User needs to restart one of the
            nodes with its data cleared (or user can just remove the StorageID
            value in "VERSION" file under the data directory of the datanode,
            but this is might not work if VERSION file format has changed 
         */        
          var3.method3(str2 + var4
              + str4 + var0 + str5
              + var0.method4());
        }
        
        boolean var9 = false;
        try {
          // update cluster map
          method13().method14(var4);
          var4.method15(var0);
          var4.method16(false); // Node is in the include list
          
          // resolve network location
          var4.method17(method18(var4));
          method13().method19(var4);
            
          // also treat the registration message as a heartbeat
          var10.method20(var4);
          method21(var4);
          var9 = true;
        } finally {
          if (!var9) {
            method9(var4);
            method10(var4);
          }
        }
        return;
      } 
  
      // this is a new datanode serving a new data storage
      if (str6.method22(var0.method4())) {
        // this data storage has never been registered
        // it is either empty or was created by pre-storageID version of DFS
        var0.method23(method24());
        if (var3.method11()) {
          var3.method12(
              str7
              + str8 + var0.method4() + str9);
        }
      }
      
      Type1 var11 
        = new Type1(var0, var12);
      boolean var9 = false;
      try {
        var11.method17(method18(var11));
        var13.method19(var11);
  
        // register new datanode
        method25(var11);
        method21(var11);
        
        // also treat the registration message as a heartbeat
        // no need to update its timestamp
        // because its is done when the descriptor is created
        var10.method25(var11);
        var9 = true;
      } finally {
        if (!var9) {
          method9(var11);
          method10(var11);
        }
      }
    } catch (Type2 var14) {
      // If the network location is invalid, clear the cached mappings
      // so that we have a chance to re-add this DataNode with the
      // correct network location later.
      var15.method26();
      throw var14;
    }, try {
        var0 = var1.method0(var2).method1();
      } catch (Type0 var3) {
        var4.method2(str0 + var2 + str1);
      }, try {
          var0 = method0(var1);
        } catch(Type0 var2) {
          return new Type1[]{var3};
        }, NameNode.LOG, final int var0 = var1.method0(20*(int)(var2),
        var3);, long var0 = var1.method0(
        var2, 
        var3);, !var0[var1].method0(this.var2), !var0.method0().method1(), var0 == null && !var1.method0(), !var0.method0(), final long var0 = var1.method0(
        var2,
        var3);, for (Type0 var0 : var1.method0()) {
        if (!var0.method1().method2()) {
          var2.method3(var0.method1());
        }
      }, for (Type0 var0 : var1) {
        if ((var2.method0(var0) == null) &&
            (var3.method0(var0) == null)) {
          // The remaining nodes are ones that are referenced by the hosts
          // files but that we do not know about, ie that we have never
          // head from. Eg. an entry that is no longer part of the cluster
          // or a bogus entry was given in the hosts files
          //
          // If the host file entry specified the xferPort, we use that.
          // Otherwise, we guess that it is the default xfer port.
          // We can't ask the DataNode what it had configured, because it's
          // dead.
          Type1 var4 =
              new Type1(new Type2(var0.method1(),
                  var0.method2(), str0,
                  var0.method3() == 0 ? var5 : var0.method3(),
                  var6, var7));
          var4.method4(0); // Consider this node dead for reporting
          var8.method5(var4);
        }
      }, final int var0 = var1.method0(
        var2, 
        var3);, this.var0 = var1.method0(
        var2, var0), final long var0 = var1.method0(
        var2,
        var3)
        * var4 * 1000;, this.var0 = new Type0(var1.new Type1(
        var2.method0(var3, 
                    var4),
        var2.method0(var5, 
                    var6))), var0.method0() == 0, final Type0<Type1> var0 = new Type0<Type1>();, final Type0 var0 = var1.method0();, var0.method0(str0 +
          str1 + var1.method1() +
          str2 + var1.method2() +
          str3 + var2 +
          str4 + var3), var0 = var1.method0(var2)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
Type0<Type1> var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[boolean var0 = var1.method0(str0) && var1.method0(str1);, boolean var0 = var1.method0(str0) || var1.method0(str1);, boolean var0 = var1.method0(str0);, Type0 var0 = new Type0(0, var1, str0);, Type0<Type1> var0 = var1.method0();, for (Type0 var0 : var1) {
          if (var0.method0() == var2
              && var0.method1() == var3
              && var0.method2().method3(var4)) {
            var5 = str0;
            break;
          }
        }, Type0 var0 = null;, var0.method0(), var0.method0(var1), method0(var0.method1(str0)), var0.method0() > 1, var0.method0(var0.method1() - 2), var0.method0() < 2, var0 = var1.method0(var2.method1(), !var3.method2(str0)), var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[boolean var0 = var1.method0(str0) && var1.method0(str1);, boolean var0 = var1.method0(str0) || var1.method0(str1);, boolean var0 = var1.method0(str0);, Type0 var0 = new Type0(0, var1, str0);, Type0<Type1> var0 = var1.method0();, for (Type0 var0 : var1) {
          if (var0.method0() == var2
              && var0.method1() == var3
              && var0.method2().method3(var4)) {
            var5 = str0;
            break;
          }
        }, Type0 var0 = null;, var0.method0(), var0.method0(var1), method0(var0.method1(str0)), var0.method0() > 1, var0.method0(var0.method1() - 2), var0.method0() < 2, var0 = var1.method0(var2.method1(), !var3.method2(str0)), var0.method0(str0)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
private static final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 
      = var1.method0
           (var2.method1(var3)), var0.method0(var1)]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private static final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 
      = var1.method0
           (var2.method1(var3)), var0.method0(var1)]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
@Parameter(required=true)
  private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(var1.method1()), for (Type0 var0 : var1.method0(var2)) {
        var3.method1(var0.method2());
      }, method0(), for (Type0 var0 : var1) {
          var2.method0(str0 + var0.method1());
        }, var0.method0(var1, var2) != 0, method0().method1(str0), method0().method1(var0), Type0<Type1> var0 = new Type2<Type1>();, for (Type0 var0 : var1) {
          method0().method1(var0);
        }, try {
      if (!var0.method0()) {
        if (!var0.method1()) {
          throw new Type0(str0 + 
            var0);
        }
      }
      Type1<Type2> var1 = new Type3<Type2>();
      var1.method2(var2);
      var1.method2(str1 + var0.method3());
      if (var3 != null) {
        for (Type4 var4 : var3) {
          var1.method2(str2 + var4.method3());
        }
      }
      for (Type4 var5 : var6.method4(var7)) {
        var1.method2(var5.method3());
      }
      Type5 var8 = new Type5(this);
      Type1<Type2> var9 = new Type3<Type2>();
      if (var8.method5(var1, var9) != 0) {
        method6().method7(str3);
        for (Type2 var10 : var9) {
          method6().method7(var10);
        }
        throw new Type0(str4);
      }
    } catch (Type6 var11) {
      throw new Type0(var11.method8(), var11);
    }, !var0.method0(), new Type0(var0.method0(), var0), Type0 var0 = new Type0(this);]
result:fail
===Candidate===
-change-
insert
@Parameter(required=true)
  private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(var1.method1()), for (Type0 var0 : var1.method0(var2)) {
        var3.method1(var0.method2());
      }, method0(), for (Type0 var0 : var1) {
          var2.method0(str0 + var0.method1());
        }, var0.method0(var1, var2) != 0, method0().method1(str0), method0().method1(var0), Type0<Type1> var0 = new Type2<Type1>();, for (Type0 var0 : var1) {
          method0().method1(var0);
        }, try {
      if (!var0.method0()) {
        if (!var0.method1()) {
          throw new Type0(str0 + 
            var0);
        }
      }
      Type1<Type2> var1 = new Type3<Type2>();
      var1.method2(var2);
      var1.method2(str1 + var0.method3());
      if (var3 != null) {
        for (Type4 var4 : var3) {
          var1.method2(str2 + var4.method3());
        }
      }
      for (Type4 var5 : var6.method4(var7)) {
        var1.method2(var5.method3());
      }
      Type5 var8 = new Type5(this);
      Type1<Type2> var9 = new Type3<Type2>();
      if (var8.method5(var1, var9) != 0) {
        method6().method7(str3);
        for (Type2 var10 : var9) {
          method6().method7(var10);
        }
        throw new Type0(str4);
      }
    } catch (Type6 var11) {
      throw new Type0(var11.method8(), var11);
    }, !var0.method0(), new Type0(var0.method0(), var0), Type0 var0 = new Type0(this);]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
public static Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
static Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
private Type0<?> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = new Type0<Type1>(var1), action.weakFs]
-rightRS-
[final Type0<?> var0 = (Type0<?>)var1;, var0 instanceof Type0, var0.method0(new Type0<Type1>(var1)), for (Type0<?> var0 : var1) {
      if (var2.method0() == var3) {
        try {
          var3.method1().method2(var3.method3());
        } catch (Type2 var4) {
          var5.method4(str0 + var3.method5()
              + str1);
          if (var5.method6()) {
            var5.method7(var4.method8());
          }
        }
        var1.method9(var0);
        return;
      }
    }, Type0<?> var0 = null;, this.var0 = new Type0<Type1>(var1), action.weakFs, method0(), var0.method0(), final Type0 var0 = var1.method0();, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
private Type0<?> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = new Type0<Type1>(var1), action.weakFs]
-rightRS-
[final Type0<?> var0 = (Type0<?>)var1;, var0 instanceof Type0, var0.method0(new Type0<Type1>(var1)), for (Type0<?> var0 : var1) {
      if (var2.method0() == var3) {
        try {
          var3.method1().method2(var3.method3());
        } catch (Type2 var4) {
          var5.method4(str0 + var3.method5()
              + str1);
          if (var5.method6()) {
            var5.method7(var4.method8());
          }
        }
        var1.method9(var0);
        return;
      }
    }, Type0<?> var0 = null;, this.var0 = new Type0<Type1>(var1), action.weakFs, method0(), var0.method0(), final Type0 var0 = var1.method0();, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
private Type0<?> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = new Type0<Type1>(var1), action.weakFs]
-rightRS-
[final Type0<?> var0 = (Type0<?>)var1;, var0 instanceof Type0, var0.method0(new Type0<Type1>(var1)), for (Type0<?> var0 : var1) {
      if (var2.method0() == var3) {
        try {
          var3.method1().method2(var3.method3());
        } catch (Type2 var4) {
          var5.method4(str0 + var3.method5()
              + str1);
          if (var5.method6()) {
            var5.method7(var4.method8());
          }
        }
        var1.method9(var0);
        return;
      }
    }, Type0<?> var0 = null;, this.var0 = new Type0<Type1>(var1), action.weakFs, method0(), var0.method0(), final Type0 var0 = var1.method0();, Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
public static final long var0 = 10000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(true, str0, var0), method0(false, var0), Type0 var0 = var1.method0(var2);, try {
        if (!var0.method0(str0)) {
          throw new Type0(str1 + var1 +
              str2 + var0);
        }
        if (!var0.method1(str0)) {
          var0 += str0;
        }
        for (Type1 var2 : var3) {
          var4.method2(new Type2(str3 + var0 + var2));
        }
      } catch (Type3 var5) {
        throw new Type0(var5);
      }, for (Type0 var0 : var1) {
          var2.method0(new Type1(str0 + var3 + var0));
        }, for (Type0 var0 : var1) {
        var2.method0(var0);
      }, var0.method0(new Type0(str0 + var1 + var2)), var0.method0(var1), !var0.method0(str0), Type0 var0 = new Type0(var1);]
result:fail
===Candidate===
-change-
insert
public static final long var0 = 10000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(true, str0, var0), method0(false, var0), Type0 var0 = var1.method0(var2);, try {
        if (!var0.method0(str0)) {
          throw new Type0(str1 + var1 +
              str2 + var0);
        }
        if (!var0.method1(str0)) {
          var0 += str0;
        }
        for (Type1 var2 : var3) {
          var4.method2(new Type2(str3 + var0 + var2));
        }
      } catch (Type3 var5) {
        throw new Type0(var5);
      }, for (Type0 var0 : var1) {
          var2.method0(new Type1(str0 + var3 + var0));
        }, for (Type0 var0 : var1) {
        var2.method0(var0);
      }, var0.method0(new Type0(str0 + var1 + var2)), var0.method0(var1), !var0.method0(str0), Type0 var0 = new Type0(var1);]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
private @Context Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = (Type0)var1.method0(str0);, final Type0 var0 = var1.method0();, final Type0 var0 = var1.method0(var2, var3, 1);, final Type0 var0 = var1.method0(var2,
          var3, var4 != null? var4: var3 + 1);, final long var0 = var1 == var2? var3: var4 - 1;, var0.method0(), final int var0 = var1.method0();, var0.method0(var1.method1(0)), var0.method0().method1(
        ), var0.method0().method1(
        ).method2().method3().method4(
        var1), final long var0 = var1.method0();, var0.method0().method1(
        ).method2(), final Type0 var0 = method0(var1, var2, var3, var4);, method0(var0, var1, var2, var3, var4, var5, var6, var7), final Type0 var0 = var1.method0(var2);, var0.method0().method1(
        ).method2().method3()]
result:fail
===Candidate===
-change-
insert
private @Context Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = (Type0)var1.method0(str0);, final Type0 var0 = var1.method0();, final Type0 var0 = var1.method0(var2, var3, 1);, final Type0 var0 = var1.method0(var2,
          var3, var4 != null? var4: var3 + 1);, final long var0 = var1 == var2? var3: var4 - 1;, var0.method0(), final int var0 = var1.method0();, var0.method0(var1.method1(0)), var0.method0().method1(
        ), var0.method0().method1(
        ).method2().method3().method4(
        var1), final long var0 = var1.method0();, var0.method0().method1(
        ).method2(), final Type0 var0 = method0(var1, var2, var3, var4);, method0(var0, var1, var2, var3, var4, var5, var6, var7), final Type0 var0 = var1.method0(var2);, var0.method0().method1(
        ).method2().method3()]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(1, var1.method1() - 1).method2();, var0.method0(), var0.method0(0) != var1 || var0.method0(var0.method1() - 1) != var1, var0.method0(1, var0.method1() - 1), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(), var3, var3 + var3)), var0.method0(var1.method1(var2, var3 + var3, var3)), var0.method0(var1.method1(), var2), var0.method0(var1.method1()), var0.method0(var1)]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Default value for IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY */
  public static final int     var0 = 1000;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** See <a href="{@docRoot}/../core-default.html">core-default.xml</a> */
  public static final Type0  var0 =
      str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===Candidate===
-change-
insert
private volatile Type0 var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[method0(str0), method0(str0 +
                  var0.method1(var1)), method0(var0)]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected static final Type0 var0  = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/** Depth of all leaf nodes */
  private int var0 = -1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
  protected static int var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public static final int     var0 = 50 * 1024 * 1024;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
/**
   * When the ratio of stale datanodes reaches this number, stop avoiding 
   * writing to stale datanodes, i.e., continue using stale nodes for writing.
   */
  private final float var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[boolean var0 = var1 && var2;, this.var0 = var0]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private final Type0<Type1> var0 
    = new Type0<Type1>();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile int var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[info.tasksMap]
-rightRS-
[var0 == null, var0 = new Type0<Type1>(), info.amInfos]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Metric(str0) Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
/**
   * An HTTP response to send back if we detect an HTTP request to our IPC
   * port.
   */
  static final Type0 var0 =
    str0 +
    str1 +
    str2 +
    str3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1.method1(var2.method2())), var0 = var1.method0(var0, 0, var2)]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};

-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }), Type0 var0 = var1.method0(1, var1.method1() - 1).method2();]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] ISO8859_1_ESCAPE={{"\u00A0","&nbsp;"},{"\u00A1","&iexcl;"},{"\u00A2","&cent;"},{"\u00A3","&pound;"},{"\u00A4","&curren;"},{"\u00A5","&yen;"},{"\u00A6","&brvbar;"},{"\u00A7","&sect;"},{"\u00A8","&uml;"},{"\u00A9","&copy;"},{"\u00AA","&ordf;"},{"\u00AB","&laquo;"},{"\u00AC","&not;"},{"\u00AD","&shy;"},{"\u00AE","&reg;"},{"\u00AF","&macr;"},{"\u00B0","&deg;"},{"\u00B1","&plusmn;"},{"\u00B2","&sup2;"},{"\u00B3","&sup3;"},{"\u00B4","&acute;"},{"\u00B5","&micro;"},{"\u00B6","&para;"},{"\u00B7","&middot;"},{"\u00B8","&cedil;"},{"\u00B9","&sup1;"},{"\u00BA","&ordm;"},{"\u00BB","&raquo;"},{"\u00BC","&frac14;"},{"\u00BD","&frac12;"},{"\u00BE","&frac34;"},{"\u00BF","&iquest;"},{"\u00C0","&Agrave;"},{"\u00C1","&Aacute;"},{"\u00C2","&Acirc;"},{"\u00C3","&Atilde;"},{"\u00C4","&Auml;"},{"\u00C5","&Aring;"},{"\u00C6","&AElig;"},{"\u00C7","&Ccedil;"},{"\u00C8","&Egrave;"},{"\u00C9","&Eacute;"},{"\u00CA","&Ecirc;"},{"\u00CB","&Euml;"},{"\u00CC","&Igrave;"},{"\u00CD","&Iacute;"},{"\u00CE","&Icirc;"},{"\u00CF","&Iuml;"},{"\u00D0","&ETH;"},{"\u00D1","&Ntilde;"},{"\u00D2","&Ograve;"},{"\u00D3","&Oacute;"},{"\u00D4","&Ocirc;"},{"\u00D5","&Otilde;"},{"\u00D6","&Ouml;"},{"\u00D7","&times;"},{"\u00D8","&Oslash;"},{"\u00D9","&Ugrave;"},{"\u00DA","&Uacute;"},{"\u00DB","&Ucirc;"},{"\u00DC","&Uuml;"},{"\u00DD","&Yacute;"},{"\u00DE","&THORN;"},{"\u00DF","&szlig;"},{"\u00E0","&agrave;"},{"\u00E1","&aacute;"},{"\u00E2","&acirc;"},{"\u00E3","&atilde;"},{"\u00E4","&auml;"},{"\u00E5","&aring;"},{"\u00E6","&aelig;"},{"\u00E7","&ccedil;"},{"\u00E8","&egrave;"},{"\u00E9","&eacute;"},{"\u00EA","&ecirc;"},{"\u00EB","&euml;"},{"\u00EC","&igrave;"},{"\u00ED","&iacute;"},{"\u00EE","&icirc;"},{"\u00EF","&iuml;"},{"\u00F0","&eth;"},{"\u00F1","&ntilde;"},{"\u00F2","&ograve;"},{"\u00F3","&oacute;"},{"\u00F4","&ocirc;"},{"\u00F5","&otilde;"},{"\u00F6","&ouml;"},{"\u00F7","&divide;"},{"\u00F8","&oslash;"},{"\u00F9","&ugrave;"},{"\u00FA","&uacute;"},{"\u00FB","&ucirc;"},{"\u00FC","&uuml;"},{"\u00FD","&yacute;"},{"\u00FE","&thorn;"},{"\u00FF","&yuml;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] HTML40_EXTENDED_ESCAPE={{"\u0192","&fnof;"},{"\u0391","&Alpha;"},{"\u0392","&Beta;"},{"\u0393","&Gamma;"},{"\u0394","&Delta;"},{"\u0395","&Epsilon;"},{"\u0396","&Zeta;"},{"\u0397","&Eta;"},{"\u0398","&Theta;"},{"\u0399","&Iota;"},{"\u039A","&Kappa;"},{"\u039B","&Lambda;"},{"\u039C","&Mu;"},{"\u039D","&Nu;"},{"\u039E","&Xi;"},{"\u039F","&Omicron;"},{"\u03A0","&Pi;"},{"\u03A1","&Rho;"},{"\u03A3","&Sigma;"},{"\u03A4","&Tau;"},{"\u03A5","&Upsilon;"},{"\u03A6","&Phi;"},{"\u03A7","&Chi;"},{"\u03A8","&Psi;"},{"\u03A9","&Omega;"},{"\u03B1","&alpha;"},{"\u03B2","&beta;"},{"\u03B3","&gamma;"},{"\u03B4","&delta;"},{"\u03B5","&epsilon;"},{"\u03B6","&zeta;"},{"\u03B7","&eta;"},{"\u03B8","&theta;"},{"\u03B9","&iota;"},{"\u03BA","&kappa;"},{"\u03BB","&lambda;"},{"\u03BC","&mu;"},{"\u03BD","&nu;"},{"\u03BE","&xi;"},{"\u03BF","&omicron;"},{"\u03C0","&pi;"},{"\u03C1","&rho;"},{"\u03C2","&sigmaf;"},{"\u03C3","&sigma;"},{"\u03C4","&tau;"},{"\u03C5","&upsilon;"},{"\u03C6","&phi;"},{"\u03C7","&chi;"},{"\u03C8","&psi;"},{"\u03C9","&omega;"},{"\u03D1","&thetasym;"},{"\u03D2","&upsih;"},{"\u03D6","&piv;"},{"\u2022","&bull;"},{"\u2026","&hellip;"},{"\u2032","&prime;"},{"\u2033","&Prime;"},{"\u203E","&oline;"},{"\u2044","&frasl;"},{"\u2118","&weierp;"},{"\u2111","&image;"},{"\u211C","&real;"},{"\u2122","&trade;"},{"\u2135","&alefsym;"},{"\u2190","&larr;"},{"\u2191","&uarr;"},{"\u2192","&rarr;"},{"\u2193","&darr;"},{"\u2194","&harr;"},{"\u21B5","&crarr;"},{"\u21D0","&lArr;"},{"\u21D1","&uArr;"},{"\u21D2","&rArr;"},{"\u21D3","&dArr;"},{"\u21D4","&hArr;"},{"\u2200","&forall;"},{"\u2202","&part;"},{"\u2203","&exist;"},{"\u2205","&empty;"},{"\u2207","&nabla;"},{"\u2208","&isin;"},{"\u2209","&notin;"},{"\u220B","&ni;"},{"\u220F","&prod;"},{"\u2211","&sum;"},{"\u2212","&minus;"},{"\u2217","&lowast;"},{"\u221A","&radic;"},{"\u221D","&prop;"},{"\u221E","&infin;"},{"\u2220","&ang;"},{"\u2227","&and;"},{"\u2228","&or;"},{"\u2229","&cap;"},{"\u222A","&cup;"},{"\u222B","&int;"},{"\u2234","&there4;"},{"\u223C","&sim;"},{"\u2245","&cong;"},{"\u2248","&asymp;"},{"\u2260","&ne;"},{"\u2261","&equiv;"},{"\u2264","&le;"},{"\u2265","&ge;"},{"\u2282","&sub;"},{"\u2283","&sup;"},{"\u2286","&sube;"},{"\u2287","&supe;"},{"\u2295","&oplus;"},{"\u2297","&otimes;"},{"\u22A5","&perp;"},{"\u22C5","&sdot;"},{"\u2308","&lceil;"},{"\u2309","&rceil;"},{"\u230A","&lfloor;"},{"\u230B","&rfloor;"},{"\u2329","&lang;"},{"\u232A","&rang;"},{"\u25CA","&loz;"},{"\u2660","&spades;"},{"\u2663","&clubs;"},{"\u2665","&hearts;"},{"\u2666","&diams;"},{"\u0152","&OElig;"},{"\u0153","&oelig;"},{"\u0160","&Scaron;"},{"\u0161","&scaron;"},{"\u0178","&Yuml;"},{"\u02C6","&circ;"},{"\u02DC","&tilde;"},{"\u2002","&ensp;"},{"\u2003","&emsp;"},{"\u2009","&thinsp;"},{"\u200C","&zwnj;"},{"\u200D","&zwj;"},{"\u200E","&lrm;"},{"\u200F","&rlm;"},{"\u2013","&ndash;"},{"\u2014","&mdash;"},{"\u2018","&lsquo;"},{"\u2019","&rsquo;"},{"\u201A","&sbquo;"},{"\u201C","&ldquo;"},{"\u201D","&rdquo;"},{"\u201E","&bdquo;"},{"\u2020","&dagger;"},{"\u2021","&Dagger;"},{"\u2030","&permil;"},{"\u2039","&lsaquo;"},{"\u203A","&rsaquo;"},{"\u20AC","&euro;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] BASIC_ESCAPE={{"\"","&quot;"},{"&","&amp;"},{"<","&lt;"},{">","&gt;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] APOS_ESCAPE={{"'","&apos;"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[var0.method0()]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static int var0 = 5;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 360;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
static boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===Candidate===
-change-
insert
public static final int var0 = 51200;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(str0);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(new Type1(var1.method0()));, try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, Type0 var0 = null;, Type0 var0 = var1.method0(0, var2);, Type0 var0 = var1.method0(var2 + 1);, int var0 = var1.method0(str0);, method0(var0, var1), var0.method0(str0) > -1, var0.method0(str0) > -1 || var0.method0(str1) > -1
               || var0.method0(str2) > -1 || var0.method0(str3) > -1
               || var0.method0(str4) > -1 || var0.method0(str5) > -1, var0.method0(), var0.method0(str0) || var0.method0(str1)]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===Candidate===
-change-
insert
/**
   * for replaceBlock response
   */
  private final long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, method0(), this.var0, var0.method0(str0 + var1 +
                str1 + var2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1 + str0 + var2 +
                      str1), var0.method0(var1 + str0), var0.method0(str0 + var1
                        + str1), var0.method0(), var0.method0(
          var1, var2, var3.method1()), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2
            .method1());, var0 = var1.method0(
              var2, var3 - var4, var3
            ), var0<var1, var0-var1-1, var0.method0(var1.method1(), var2, 0, var3), var0 == 0, var0.method0(str0).method0(var1), var0 = var1.method0(
        var2.method1(), var2.method2()), Type0 var0 = new Type0(var1);, var0.method0(str0 + var1 + str1
          + var2 + str2 + var3 + str3
          + var4 + str4), var0.method0(str0 + var1 + str1 + var2, var3), var0.method0(str0 + var1 + 
                    str1 + var2 + str2), var0.method0(str0 + var1
              + str1 + var2 + str2), var0.method0(str0 + var1
                + str1 + var2 + str2), var0.method0(str0 + var1, var2), var0.method0(str0 +
                  var1.method1()), var0.method0(var1 + str0 + var2.method1(var3)), var0.method0(str0, var1), var0.method0(str0 + var1
            + str1 + var2 + str2 + var3
            + str3 + var4), var0.method0(var1), var0.method0(this), new Type0(method0().method1()), method0().method1() + str0 + var0
        + str1 + var1
        + str2 + var2
        + str3 + var3
        + str4 + var4
        + str5, var0 == var1, new Type0(method0().method1())
          .method2(str0), new Type0(method0().method1())
          .method2(str0).method2(var0), new Type0(method0().method1())
          .method2(str0).method2(var0).method2(str1), final Type0 var0 = new Type0(method0().method1())
          .method2(str0).method2(var1).method2(str1).method2(var2);, var0.method0(str0), var0.method0(str0).method0(var1)
            .method0(str1), var0.method0(str0).method0(var1)
            .method0(str1).method0(var2.method1(var3)), Type0 var0 = null;, try {
          method0(var0, var1);
        } catch (Type0 var2) {
          // checksum error detected locally. there is no reason to continue.
          if (var3 != null) {
            try {
              ((Type1) var3.method1()).method2(var4,
                  var5, var6,
                  var7);
              // Wait until the responder sends back the response
              // and interrupt this thread.
              var8.method3(3000);
            } catch (Type2 var9) { }
          }
          throw new Type0(str0 + var2);
        }, try {
      if (var0 && !var1) {
        var2 = new Type0(var3, 
            new Type1(var4, var5, var6));
        var2.method0(); // start thread to processes responses
      }

      while (method1() >= 0) { /* Receive until the last packet */ }

      // wait for all outstanding packet responses. And then
      // indicate responder to gracefully shutdown.
      // Mark that responder has been closed for future processing
      if (var2 != null) {
        ((Type1)var2.method2()).method3();
        var7 = true;
      }

      // If this write is for a replication or transfer-RBW/Finalized,
      // then finalize block or convert temporary to RBW.
      // For client-writes, the block is finalized in the PacketResponder.
      if (var8 || var1) {
        // close the block/crc files
        method3();
        var9.method4(var10.method5());

        if (var11 == var12) {
          // for TRANSFER_RBW, convert temporary to RBW
          var13.method6(var9);
        } else {
          // for isDatnode or TRANSFER_FINALIZED
          // Finalize the block.
          var13.method7(var9);
        }
        var14.method8();
      }

    } catch (Type2 var15) {
      if (var16.method9()) {
        // Do not throw if shutting down for restart. Otherwise, it will cause
        // premature termination of responder.
        var17.method10(str0 + var9 + str1);
      } else {
        var17.method10(str2 + var9, var15);
        throw var15;
      }
    } finally {
      // Clear the previous interrupt state of this thread.
      var18.method11();

      // If a shutdown for restart was initiated, upstream needs to be notified.
      // There is no need to do anything special if the responder was closed
      // normally.
      if (!var7) { // Data transfer was not complete.
        if (var2 != null) {
          // In case this datanode is shutting down for quick restart,
          // send a special ack upstream.
          if (var16.method9() && var0 && !var1) {
            Type3 var19 = ((Type4)var10).method12();
            Type3 var20 = new Type3(var19.method13()  + 
                var21 + str3 + var19.method14() + str4);
            if (var20.method15() && !var20.method16()) {
              var17.method17(str5 +
                  var20.method18());
            }
            try {
              Type5 var22 = new Type5(var20);
              // write out the current time.
              var22.method19(var23.method20(var24.method21() + var25));
              var22.method22();
              var22.method3();
            } catch (Type2 var15) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }
            try {
              ((Type1) var2.method2()).
                  method23(var26.method24());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var18.method25(1000);
            } catch (Type6 var27) {
              // It is already going down. Ignore this.
            } catch (Type2 var15) {
              var17.method10(str6, var15);
            }
          }
          var2.method26();
        }
        var28.method27(this);
        method28();
      }
      if (var2 != null) {
        try {
          var2.method26();
          // join() on the responder should timeout a bit earlier than the
          // configured deadline. Otherwise, the join() on this thread will
          // likely timeout as well.
          long var29 = var16.method29().method30();
          var29 = var29 > 1  ? var29*8/10 : var29;
          var2.method31(var29);
          if (var2.method32()) {
            Type7 var30 = str7 + var2
                + str8;
            var17.method17(var30 + str9 + var31.method33(var2));
            throw new Type2(var30);
          }
        } catch (Type6 var32) {
          var2.method26();
          // do not throw if shutting down for restart.
          if (!var16.method9()) {
            throw new Type2(str10);
          }
        }
        var2 = null;
      }
    }, try {
              Type0 var0 = new Type0(var1);
              // write out the current time.
              var0.method0(var2.method1(var3.method2() + var4));
              var0.method3();
              var0.method4();
            } catch (Type1 var5) {
              // The worst case is not recovering this RBW replica. 
              // Client will fall back to regular pipeline recovery.
            }, try {
              ((Type0) var0.method0()).
                  method1(var1.method2());
              // Even if the connection is closed after the ack packet is
              // flushed, the client can react to the connection closure 
              // first. Insert a delay to lower the chance of client 
              // missing the OOB ack.
              var2.method3(1000);
            } catch (Type1 var3) {
              // It is already going down. Ignore this.
            } catch (Type2 var4) {
              var5.method4(str0, var4);
            }, try {
            if (var0 != var1 && !var2) {
              // read an ack from downstream datanode
              var3.method0(var4);
              var5 = var6.method1();
              if (var7.method2()) {
                var7.method3(var8 + str0 + var3);
              }
              // Process an OOB ACK.
              Type1 var9 = var3.method4();
              if (var9 != null) {
                var7.method5(str1 + var9);
                method6(var3, var10, 0L, 0L,
                    var11);
                continue;
              }
              var12 = var3.method7();
            }
            if (var12 != var10
                || var0 == var1) {
              var13 = method8(var12);
              if (!method9()) {
                break;
              }
              var14 = var12;
              if (var0 == var15
                  && var12 != var14) {
                throw new Type4(var8 + str2 + var14
                    + str3 + var12);
              }
              if (var0 == var15) {
                // The total ack time includes the ack times of downstream
                // nodes.
                // The value is 0 if this responder doesn't have a downstream
                // DN in the pipeline.
                var16 = var5 - var17;
                // Report the elapsed time from ack send to ack receive minus
                // the downstream ack time.
                long var18 = var16
                    - var3.method10();
                if (var18 < 0) {
                  if (var7.method2()) {
                    var7.method3(str4 + var18
                        + str5);
                  }
                } else {
                  var19.method11(var18);
                }
              }
              var20 = var20;
            }
          } catch (Type5 var21) {
            var22 = true;
          } catch (Type4 var23) {
            if (var24.method12()) {
              var22 = true;
            } else {
              // continue to run even if can not read from mirror
              // notify client of the error
              // and wait for the client to shut down the pipeline
              var2 = true;
              var7.method5(var8, var23);
            }
          }]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
private int var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0 = new Type0(var1), datum.hostname]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[][] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===Candidate===
-change-
insert
int[] var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0(), var0 
      = var1.method0
           (var2.method1(var3)), var0 = var1, datum.finishTime, var0 = new Type0(var1), datum.error, var0 = new Type0(var1.method0()), datum.taskType, datum.hostname, datum.port, var0 = new Type0(var1.method0().method1()), var0.method0(var1.method1()), var0 == null ? null : var0.method0(), datum.status]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===Candidate===
-change-
insert
public static int var0 = 3;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0<Type1> var0 =
          var1.method0(var2,
                     str0 + var3 + str1 + var4 + str2,
                     new Type2[]{var5},
                     var6);, var0.method0(var1.method1().method2()), var0.method0(), try {
      Type0 var0 = method0();

      // Search for the user. We'll only ever need to look at the first result
      Type1<Type2> var1 = var0.method1(var2,
                                                           var3,
                                                           new Type3[]{var4},
                                                           var5);
      if (var1.method2()) {
        Type2 var6 = var1.method3();
        Type4 var7 = var6.method4();

        Type1<Type2> var8 =
          var0.method1(var2,
                     str0 + var9 + str1 + var10 + str2,
                     new Type3[]{var7},
                     var5);
        while (var8.method2()) {
          Type2 var11 = var8.method3();
          Type5 var12 = var11.method5().method6(var13);
          var14.method7(var12.method6().method8());
        }
      }
    } catch (Type6 var15) {
      var16.method9(str3 + var4, var15);
      return new Type7<Type4>();
    }, Type0 var0 = var1.method0();, Type0<Type1> var0 = new Type2<Type1>();, var0.method0(str0 + var1, var2), Type0<Type1> var0 = var1.method0(var2,
                                                           var3,
                                                           new Type2[]{var4},
                                                           var5);, Type0 var0 = var1.method0().method1(var2);, var0 = var1.method0(var2, var3), var0 =
        var1.method0(var2, var3), var0 = method0(
        var1.method1(var2, var3)), var0 = method0(
          var1.method1(var2, var3))]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===Candidate===
-change-
insert
private boolean var0 = true;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0()]
-rightRS-
[method0(), var0.method0(), var0.method0().method1(0) == var1.method2(var2), for (Type0 var0 : method0()) {
        if (var0.method1().method2(0) == var1.method3(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
      if (var0.method0(var2)) {
        return;
      }
    }]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static final String[][] JAVA_CTRL_CHARS_ESCAPE={{"\b","\\b"},{"\n","\\n"},{"\t","\\t"},{"\f","\\f"},{"\r","\\r"}};

-leftRS-
[]
-rightRS-
[var0.method0()]
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator... translators
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var0)]
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
Loading Class - org.apache.commons.lang3.ArrayUtils
===buggy===
-statement-
clone
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return array.clone();

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
array
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{expression},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
array
-leftRS-
[]
-rightRS-
[]
Loading Class - org.apache.commons.lang3.text.translate.CharSequenceTranslator
===buggy===
-statement-
arraycopy
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
translators.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:NumberLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:NumberLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:NumberLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:NumberLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:NumberLiteral{arguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
translators
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:NumberLiteral{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
array
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0
          + var1 + str1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = str0
          + str1
          + var1 + str2
          + var2;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[var0.method0(), method0(var0), method0((Type0) var0, method1(var1))]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
assert method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (array == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
array == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
newArray=new CharSequenceTranslator[translators.length + 1]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
newArray=new CharSequenceTranslator[translators.length + 1]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
1
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
1
to
2
-context-
P:InfixExpression{rightOperand},L:QualifiedName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
1
to
2
-context-
P:InfixExpression{rightOperand},L:QualifiedName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
translators.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===Candidate===
-change-
insert
if (var0 >= 0) {
      return false;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[final int var0 = method0(var1.method1());, final int var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 >= 0) {
      return false;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[final int var0 = method0(var1.method1());, final int var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 >= 0) {
      return false;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[final int var0 = method0(var1.method1());, final int var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 >= 0) {
      return false;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[final int var0 = method0(var1.method1());, final int var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 >= 0) {
      return false;
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[final int var0 = method0(var1.method1());, final int var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[var1 + 1];]
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:Assignment{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequenceTranslator[] newArray=new CharSequenceTranslator[translators.length + 1];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
newarray=new String[array.length][2]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
newarray=new String[array.length][2]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
String[][] newarray=new String[array.length][2];

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0, this.var0 = var0]
-rightRS-
[Type0 var0 = method0(var1, var2
        .method1(), this.var3, var4);, this.var0, this.var0 = var0]
result:fail
===Candidate===
-change-
insert
private final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0, this.var0 = var0]
-rightRS-
[Type0 var0 = method0(var1, var2
        .method1(), this.var3, var4);, this.var0, this.var0 = var0]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
  Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
  Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final transient Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0(
        var2.method1(var3), str0, str1)]
-rightRS-
[new Type0<Type1>(str0, null, var0.method0(var1)), var0.method0().
      method1(var1).
    method2(), var0.method0().
      method1(str0).method2().
      method3(str1), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3(), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3().
    method3()]
result:fail
===Candidate===
-change-
insert
private final transient Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0(
        var2.method1(var3), str0, str1)]
-rightRS-
[new Type0<Type1>(str0, null, var0.method0(var1)), var0.method0().
      method1(var1).
    method2(), var0.method0().
      method1(str0).method2().
      method3(str1), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3(), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3().
    method3()]
result:fail
===Candidate===
-change-
insert
private final transient Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0(
        var2.method1(var3), str0, str1)]
-rightRS-
[new Type0<Type1>(str0, null, var0.method0(var1)), var0.method0().
      method1(var1).
    method2(), var0.method0().
      method1(str0).method2().
      method3(str1), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3(), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3().
    method3()]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
/**
   * Exception that reflects a string that cannot be unmangled.
   */
  public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    
    public UnmanglingError(Type2 var1, Type3 var2) {
      super(var1, var2);
    }
    
    public UnmanglingError(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0(str0 + var0)]
-rightRS-
[var0.method0(var1, 0, var2), char var0[] = var1.method0().method1();, var0.method0(str0, str0, var1), var0.method0(str0, str0, var1, new Type0()), var0.method0(), var0.method0(var1.method1())]
result:fail
===Candidate===
-change-
insert
/**
   * Exception that reflects a string that cannot be unmangled.
   */
  public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    
    public UnmanglingError(Type2 var1, Type3 var2) {
      super(var1, var2);
    }
    
    public UnmanglingError(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0(str0 + var0)]
-rightRS-
[var0.method0(var1, 0, var2), char var0[] = var1.method0().method1();, var0.method0(str0, str0, var1), var0.method0(str0, str0, var1, new Type0()), var0.method0(), var0.method0(var1.method1())]
result:fail
===Candidate===
-change-
insert
/**
   * Exception that reflects a string that cannot be unmangled.
   */
  public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    
    public UnmanglingError(Type2 var1, Type3 var2) {
      super(var1, var2);
    }
    
    public UnmanglingError(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0(str0 + var0)]
-rightRS-
[var0.method0(var1, 0, var2), char var0[] = var1.method0().method1();, var0.method0(str0, str0, var1), var0.method0(str0, str0, var1, new Type0()), var0.method0(), var0.method0(var1.method1())]
result:fail
===Candidate===
-change-
insert
/**
   * Exception that reflects a string that cannot be unmangled.
   */
  public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    
    public UnmanglingError(Type2 var1, Type3 var2) {
      super(var1, var2);
    }
    
    public UnmanglingError(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0(str0 + var0)]
-rightRS-
[var0.method0(var1, 0, var2), char var0[] = var1.method0().method1();, var0.method0(str0, str0, var1), var0.method0(str0, str0, var1, new Type0()), var0.method0(), var0.method0(var1.method1())]
result:fail
===Candidate===
-change-
insert
/**
   * Exception that reflects a string that cannot be unmangled.
   */
  public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    
    public UnmanglingError(Type2 var1, Type3 var2) {
      super(var1, var2);
    }
    
    public UnmanglingError(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0(str0 + var0)]
-rightRS-
[var0.method0(var1, 0, var2), char var0[] = var1.method0().method1();, var0.method0(str0, str0, var1), var0.method0(str0, str0, var1, new Type0()), var0.method0(), var0.method0(var1.method1())]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
private long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
static class CsvUnescaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvUnescaper should never reach the [1] index");
    }
    if (input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE) {
      out.write(input.toString());
      return input.length();
    }
    String quoteless=input.subSequence(1,input.length() - 1).toString();
    if (StringUtils.containsAny(quoteless,CSV_SEARCH_CHARS)) {
      out.write(StringUtils.replace(quoteless,CSV_QUOTE_STR + CSV_QUOTE_STR,CSV_QUOTE_STR));
    }
 else {
      out.write(input.toString());
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
AggregateTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
newArray
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:MethodInvocation{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:MethodInvocation{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:MethodInvocation{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:MethodInvocation{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:MethodInvocation{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
return new AggregateTranslator(newArray);

-leftRS-
[var0.method0(var1, 0, var2, 1, var3), Type0[] var0 = new Type0[var1 + 1];]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < array.length; i++) {
  newarray[i][0]=array[i][1];
  newarray[i][1]=array[i][0];
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < array.length; i++) {
  newarray[i][0]=array[i][1];
  newarray[i][1]=array[i][0];
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < array.length; i++) {
  newarray[i][0]=array[i][1];
  newarray[i][1]=array[i][0];
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < array.length; i++) {
  newarray[i][0]=array[i][1];
  newarray[i][1]=array[i][0];
}

-leftRS-
[Type0[][] var0 = new Type0[var1][2];]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < array.length; i++) {
  newarray[i][0]=array[i][1];
  newarray[i][1]=array[i][0];
}

-leftRS-
[Type0[][] var0 = new Type0[var1][2];]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:ForStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (int i=0; i < array.length; i++) {
  newarray[i][0]=array[i][1];
  newarray[i][1]=array[i][0];
}

-leftRS-
[Type0[][] var0 = new Type0[var1][2];]
-rightRS-
[]
===buggy===
-statement-
for (int i=0; i < array.length; i++) {
  newarray[i][0]=array[i][1];
  newarray[i][1]=array[i][0];
}

-leftRS-
[Type0[][] var0 = new Type0[var1][2];]
-rightRS-
[]
===buggy===
-statement-
array.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
protected Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0 == null || var1.method0().method1(var0), var0.method0(), var0.method0(var1.method1() + str0 + var1.method2() + str1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0 == null || var1.method0().method1(var0), var0.method0(), var0.method0(var1.method1() + str0 + var1.method2() + str1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
protected Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0 == null || var1.method0().method1(var0), var0.method0(), var0.method0(var1.method1() + str0 + var1.method2() + str1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private static Type0<Type1, Type2> var0 = new Type3<Type1, Type2>();
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1, var2, var3), var0.method0(var1), var0.method0(var1, var2, new Type0[] {var3, var4})]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
private static Type0<Type1, Type2> var0 = new Type3<Type1, Type2>();
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1, var2, var3), var0.method0(var1), var0.method0(var1, var2, new Type0[] {var3, var4})]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
private static Type0<Type1, Type2> var0 = new Type3<Type1, Type2>();
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1, var2, var3), var0.method0(var1), var0.method0(var1, var2, new Type0[] {var3, var4})]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
private static Type0<Type1, Type2> var0 = new Type3<Type1, Type2>();
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1, var2, var3), var0.method0(var1), var0.method0(var1, var2, new Type0[] {var3, var4})]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===Candidate===
-change-
insert
private static Type0<Type1, Type2> var0 = new Type3<Type1, Type2>();
-context-
P:TypeDeclaration{bodyDeclarations},L:TypeDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[var0.method0(var1, var2, var3), var0.method0(var1), var0.method0(var1, var2, new Type0[] {var3, var4})]
-rightRS-
[this.var0 = var0, this.var0]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0, this.var0 = var0]
-rightRS-
[Type0 var0 = method0(var1, var2
        .method1(), this.var3, var4);, this.var0, this.var0 = var0]
result:fail
===Candidate===
-change-
insert
private final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0, this.var0 = var0]
-rightRS-
[Type0 var0 = method0(var1, var2
        .method1(), this.var3, var4);, this.var0, this.var0 = var0]
result:fail
===Candidate===
-change-
insert
private final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0, this.var0 = var0]
-rightRS-
[Type0 var0 = method0(var1, var2
        .method1(), this.var3, var4);, this.var0, this.var0 = var0]
result:fail
===Candidate===
-change-
insert
private final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0, this.var0 = var0]
-rightRS-
[Type0 var0 = method0(var1, var2
        .method1(), this.var3, var4);, this.var0, this.var0 = var0]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
  Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0<Type1> var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
public static class Type0 extends Type1 {
    private static final long var0 = 1L;
    public InvalidTopologyException(Type2 var1) {
      super(var1);
    }
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0 var0 = null;, ((Type0)var0).method0(var1[1]), var0.method0(var1), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0.method0(var1).method1(), var0.method0(var1).method1().method2(var2.method1()), new Type0(var0.method0()
                                           +str0
                                           +var1+str1+var2), Type0 var0 = method0(var1);, method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0()+var1, var0.method0(var1)+var2, (var0.method0(var1)+var2).
            method1(var3+var2), method0(), boolean var0 =
        var1 == null || !(var1 instanceof Type0);, Type0 var0 = var1.method0().method1(method2(this).method3());, var0 = var0.method0(1), var0 = var0.method0(0, var1), method0(var0, var1.method1(1)), var0=var0.method0(1), boolean var0 = var1.method0(var2);, var0.method0(this.var1+1), Type0[] var0 = var1.method0(var2, 2);, var0.method0() == 0, var0<0 || var0>=this.method0(), Type0 var0 = var1.method0(0);, var0.method0(var1-var2, var3), var0.method0(var1, var2), var0.method0(var1.method1(var2.method2(var3, null))), var0 = var1.method0(var2), method0(this), var0.method0().method1(method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(this), var0.method0(null), int var0=var1.method0(var2);, int var0 = var1.method0(var2);, method0(var0), for (int var0 = var1.method0(); var2 != null && var0 > 0;
           var2 = var2.method1(), var0--) {
        if (var2 == var3) {
          return true;
        }
      }, int var0 =
        var1 ? 1 : ((Type0)var2).method0();, int var0 = var1.method0();, int var0 = method0();, var0.method0(), var0 == null || var0.method0() == 0, var0 == 1, var0<var1, var0 == 0 && var1 != 0, method0(var0, 0, var1.method1(var2)), int var0=0;, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0, var2);
            return false;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2)) {
            var3 = (Type0)var1.method1(var0);
            break;
          }
        }, for(int var0=0; var0<var1.method0(); var0++) {
          if (var1.method1(var0).method2().method3(var2.method2())) {
            var1.method4(var0);
            var3--;
            var2.method5(null);
            return true;
          }
        }, int var0;, for(int var0=0; var0<var1.method0(); var0++) {
        if (var1.method1(var0).method2().method3(var2[0])) {
          var3 = var1.method1(var0);
        }
      }, for(int var0=0; var0<var1.method0(); var0++) {
          Type0 var2 = (Type0)var1.method1(var0);
          if (var3 == null || var3 != var2) {
            // not the excludedNode
            int var4 = var2.method2();
            if (var3 != null && var2.method3(var3)) {
              var4 -= var5;
            }
            if (var6+var4 > var7) {
              // the leaf is in the child subtree
              return var2.method4(var7-var6, var3);
            } else {
              // go to the next child
              var6 = var6+var4;
            }
          } else { // it is the excluededNode
            // skip it and set the excludedNode to be null
            var3 = null;
          }
        }, for(int var0=0; var0<var1; var0++) {
      var2.method0(var3.method1(var4.method2(var0, null)));
      var2.method0(str0);
    }, for(int var0=0; var0<var1; var0++) {
        if(var2 == 0 && var3 == var4[var0]) { //local node
          //swap the local node and the node at position 0
          if( var0 != 0 ) {
            method0(var4, var2, var0);
          }
          var2=1;
          if(var5 != -1 ) {
            if(var5 == 0) {
              var5 = var0;
            }
            break;
          }
        } else if(var5 == -1 && method1(var3, var4[var0])) {
          //local rack
          var5 = var0;
          if(var2 != 0 ) break;
        }
      }, Type0 var0=method0(var1);, var0 instanceof Type0, var0 = (Type0)var1.method0(var2), (Type0)var0, Type0 var0 = (Type0)var1.method0(var2);, Type0 var0 = (Type0)method0(var1.method1());, Type0 var0 = (Type0)var1;, !method0(var0), var0 != null && var1.method0(var0), int var0=var1.method0(), var2=var3.method0();, Type0 var0 = method0(var1.method1());, method0(var0.method1()), var0<var1.method0(), var0.method0()-
          var1-var2.method1()+var3, var0.method0(var1).method1().method2(var2), var0.method0(var1).method1().method2(var2[0]), !var0.method0(var1), var0 -= ((Type0)var1).method0(), var0=((Type0)var1).method0(), var0.method0(0) == var1, var0.method0(str0)]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
  Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
  Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type2> var0 = var1
        .method0(var2, var3,
            method1().var4,
            method1().var5,
            method1().var6);, method0(null), final Type0 var0 = var1.method0(this,
        var2, var3, var4, var5, var6, var7, var8,
        var9, var10.method1(var11), var12);, Type0 var0 = var1.method0(var2);, var0.method0(this, var1, var2, var3,
        var4, var5, var6.method1()), Type0 var0 = var1.method0(
          var2.method1(),
          var2.method2());, this.var0 = var0, Type0 var0 = method0(var1);, var0.method0(), try {
        return var0.method0(var1);
      } catch(Type0 var2) {
        var3.method1(str0 + var1 + str1
            + var4);
        return var0.method0(
            var4); 
      }, this.var0.var1, method0(var0, var1, var2), method0(var0, var1, true, null), method0(var0, var1, var2, var3, var4,
        var5), Type0 var0 = 
          var1.method0().method1(var2);, var0 = 
        var1.method0().method1(var2), var0 = var1.method0(var2), var0 = var1.method0(str0, str1), final Type0 var0 = var1.method0(
          var2,
          var3);, this.var0 = var1.method0(var2), var0.method0(var1) == null, this.var0 = var1.method0(
        var2.method0(var3, var4),
        var5), Type0 var0 = var1.method0(var2.method1());, var0[var1] = new Type0(var2[var1], var3.method0(var1)), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1), var0 = var1.method0(
          var2,
          var3), var0 > 0, var0 * var1 +
            var2, final int var0 = 3000 * var1 + var2;, Type0 var0 = method0(var1, var2, var3);, var0.method0(var1, var2,
        method1(),
        var3), dfsClientConf.defaultBlockSize, method0(var0, var1, var2,
        var3, null), method0(var0, var1, var2,
        var3, var4), var0 = var1.method0(var2,
          var3), var0 = var1.method0(
          var2, 
          var3), Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, false);, this.var0 = new Type0(
      var1.method0(var2),
      var3.method1(var2),
      var2.method2(
        var4,
        var5)), Type0 var0 = var1.method0(
          var2, var3);, Type0 var0 = var1;, final Type0 var0;, var0.method0(
            var1
            + str0 + var2), var0.method0(str0), var0.method0(str0 +
      var1.method1(',').method2(var2)+ str1 +
      var1.method1(',').method2(var3) + str2), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(str0 + var1[var2] + str1
                + var3 + str2 + var4), var0.method0(str0 +
                      str1), var0.method0(str0 + var1
                  + str1 + var2), var0.method0(str0 + var1[var2] + str1 + var3), var0.method0(str0
                  + str1 + var1 + str2 + var2
                  + str3 + var3[var4]
                  + str4), this.var0 = new Type0(var1), BlockReaderLocal.LOG, var0.method0(
            var1), dfsClientConf.defaultReplication, var0 = var1.method0(var2,
          10 * var3), var0 = var1.method0(
          var2,
          var3) * 1000, Type0 var0 = (var1.method0(var2) == null) ?
        null : var1.method1(var2, 0);, this.var0 = var1.method0(
        var2,
        var3), new Type0(var0, var1), var0.method0(
          var1, var2), var0 = var1.method0(var2, 3000), var0 = var1.method0(
        var2,
        var3), int var0 = var1.method0(var2,
          var3);, int var0 = var1.method0(
        var2,
        var3);, var0.method0(str0 + var1 + str1
            + var2), var0.method0(var1
          + str0 + var2
          + str1), var0.method0(str0 + var1 + str1
              + (var2/1000) + str2
              + (var3/1000) + str3
              + str4, var4), var0.method0(str0, var1), var0.method0(str0 + var1 + str1+var2+str2 + var3[var2], var4), var0 = method0(var1), var0 + var1 * var2, dfsClientConf.hdfsTimeout, Type0 var0 = var1.method0(method1().var2);, new Type0(str0
            + var0.method0().method1()), var0.method0() && 0 != var1, !method0().var0, dfsClientConf.maxBlockAcquireFailures, this.var0 = str0 + var1 + str1 + 
        var2.method0().method1()  + str1 + var3.method2().method3()]
result:fail
===buggy===
-statement-
static class CsvEscaper extends CharSequenceTranslator {
  private static final char CSV_DELIMITER=',';
  private static final char CSV_QUOTE='"';
  private static final String CSV_QUOTE_STR=String.valueOf(CSV_QUOTE);
  private static final char[] CSV_SEARCH_CHARS=new char[]{CSV_DELIMITER,CSV_QUOTE,CharUtils.CR,CharUtils.LF};
  @Override public int translate(  CharSequence input,  int index,  Writer out) throws IOException {
    if (index != 0) {
      throw new IllegalStateException("CsvEscaper should never reach the [1] index");
    }
    if (StringUtils.containsNone(input.toString(),CSV_SEARCH_CHARS)) {
      out.write(input.toString());
    }
 else {
      out.write(CSV_QUOTE);
      out.write(StringUtils.replace(input.toString(),CSV_QUOTE_STR,CSV_QUOTE_STR + CSV_QUOTE_STR));
      out.write(CSV_QUOTE);
    }
    return input.length();
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private final transient Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0(
        var2.method1(var3), str0, str1)]
-rightRS-
[new Type0<Type1>(str0, null, var0.method0(var1)), var0.method0().
      method1(var1).
    method2(), var0.method0().
      method1(str0).method2().
      method3(str1), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3(), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3().
    method3()]
result:fail
===Candidate===
-change-
insert
private final transient Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0(
        var2.method1(var3), str0, str1)]
-rightRS-
[new Type0<Type1>(str0, null, var0.method0(var1)), var0.method0().
      method1(var1).
    method2(), var0.method0().
      method1(str0).method2().
      method3(str1), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3(), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3().
    method3()]
result:fail
===Candidate===
-change-
insert
private final transient Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:TypeDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1.method0(
        var2.method1(var3), str0, str1)]
-rightRS-
[new Type0<Type1>(str0, null, var0.method0(var1)), var0.method0().
      method1(var1).
    method2(), var0.method0().
      method1(str0).method2().
      method3(str1), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3(), var0.method0().
      method1(str0).method2().
      method3(str1).method4(var1, str2).
      method3(str3, var2).
      method3().
    method3()]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }).method0(
            new Type0(var0.method1())
          )]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[new Type0(
            new Type1[][] { 
              {str0, str1},
              {str2, str3},
          }).method0(
            new Type0(var0.method1())
          )]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
newArray
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:NumberLiteral{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return newarray;

-leftRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
-rightRS-
[]
===buggy===
-statement-
return newarray;

-leftRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
-rightRS-
[]
===buggy===
-statement-
return newarray;

-leftRS-
[for(int var0 = 0; var0<var1; var0++) {
            var2[var0][0] = var3[var0][1];
            var2[var0][1] = var3[var0][0];
        }, Type0[][] var0 = new Type0[var1][2];]
-rightRS-
[]
===buggy===
-statement-
newarray
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
array
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
newarray
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
array
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ArrayAccess{array},L:,R:SimpleName{index}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
Loading Class - org.apache.commons.lang3.text.translate.LookupTranslator
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
CharSequence[]... lookup
-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
Loading Class - org.apache.commons.lang3.text.translate.OctalUnescaper
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OCTAL_MAX=377
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 9
-context-
P:FieldDeclaration{fragments},L:PrimitiveType{type},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 9
-context-
P:FieldDeclaration{fragments},L:PrimitiveType{type},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 9
-context-
P:FieldDeclaration{fragments},L:PrimitiveType{type},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:PrimitiveType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:PrimitiveType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
volatile
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:PrimitiveType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
volatile
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:PrimitiveType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private static final Type0 var0 = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2,
        var3)]
result:fail
===Candidate===
-change-
insert
private static final Type0 var0 = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2,
        var3)]
result:fail
===Candidate===
-change-
insert
private static final Type0 var0 = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2,
        var3)]
result:fail
===Candidate===
-change-
insert
private static final Type0 var0 = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2,
        var3)]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static Type0 var0 = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(var2, var3);, Type0[] var0 = var1.method0(var2, 
        var3);]
result:fail
===Candidate===
-change-
insert
static Type0 var0 = str0;
-context-
P:TypeDeclaration{bodyDeclarations},L:SimpleType{superclassType},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(var2, var3);, Type0[] var0 = var1.method0(var2, 
        var3);]
result:fail
===buggy===
-statement-
int
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
int
to
long
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
int
to
long
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Parameter
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:FieldDeclaration{modifiers},L:,R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
public static final Type0 var0 =
      new Type0(str0);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 =
        var1.method0();, Type0<Type1> var0 = var1.method0();, var0.method0(var1, var2), var0.method0(var1.method1(), var1), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, Type0 var0 = var1.method0();, for(Type0 var0 : var1.method0().method1()) {
      Type1 var2 = method2(var0);
      Type2 var3 =
          new Type2(var0.method3(),
            var0.method4(), var2);
      var4.method5(var3.method6(), var3);
    }]
result:fail
===Candidate===
-change-
insert
public static final Type0 var0 =
      new Type0(str0);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 =
        var1.method0();, Type0<Type1> var0 = var1.method0();, var0.method0(var1, var2), var0.method0(var1.method1(), var1), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, Type0 var0 = var1.method0();, for(Type0 var0 : var1.method0().method1()) {
      Type1 var2 = method2(var0);
      Type2 var3 =
          new Type2(var0.method3(),
            var0.method4(), var2);
      var4.method5(var3.method6(), var3);
    }]
result:fail
===Candidate===
-change-
insert
public static final Type0 var0 =
      new Type0(str0);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 =
        var1.method0();, Type0<Type1> var0 = var1.method0();, var0.method0(var1, var2), var0.method0(var1.method1(), var1), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, Type0 var0 = var1.method0();, for(Type0 var0 : var1.method0().method1()) {
      Type1 var2 = method2(var0);
      Type2 var3 =
          new Type2(var0.method3(),
            var0.method4(), var2);
      var4.method5(var3.method6(), var3);
    }]
result:fail
===Candidate===
-change-
insert
public static final Type0 var0 =
      new Type0(str0);
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 =
        var1.method0();, Type0<Type1> var0 = var1.method0();, var0.method0(var1, var2), var0.method0(var1.method1(), var1), Type0 var0 = method0(var1);, Type0 var0 = new Type0();, Type0 var0 = var1.method0();, for(Type0 var0 : var1.method0().method1()) {
      Type1 var2 = method2(var0);
      Type2 var3 =
          new Type2(var0.method3(),
            var0.method4(), var2);
      var4.method5(var3.method6(), var3);
    }]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
private final static Type0 var0 =
      new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0()
        .method0(true), this.method0(true), new Type0()
        .method0(true)
        .method1(str0)]
-rightRS-
[this.var0 = var1.method0(), var0.method0(str0 + this.var1 + str1), this.var0 = var0, method0(this.var0, var1)
            && this.var2 == var2
            && this.var3 == var3
            && method0(this.var4, var5)
            && this.var6 == var6
            && method0(this.var7, var8)
            && this.var9 == var9
            && method0(this.var10, var11)
            && this.var12 == var12
            && method0(this.var13, var14), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
private final static Type0 var0 =
      new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0()
        .method0(true), this.method0(true), new Type0()
        .method0(true)
        .method1(str0)]
-rightRS-
[this.var0 = var1.method0(), var0.method0(str0 + this.var1 + str1), this.var0 = var0, method0(this.var0, var1)
            && this.var2 == var2
            && this.var3 == var3
            && method0(this.var4, var5)
            && this.var6 == var6
            && method0(this.var7, var8)
            && this.var9 == var9
            && method0(this.var10, var11)
            && this.var12 == var12
            && method0(this.var13, var14), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
private final static Type0 var0 =
      new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[new Type0()
        .method0(true), this.method0(true), new Type0()
        .method0(true)
        .method1(str0)]
-rightRS-
[this.var0 = var1.method0(), var0.method0(str0 + this.var1 + str1), this.var0 = var0, method0(this.var0, var1)
            && this.var2 == var2
            && this.var3 == var3
            && method0(this.var4, var5)
            && this.var6 == var6
            && method0(this.var7, var8)
            && this.var9 == var9
            && method0(this.var10, var11)
            && this.var12 == var12
            && method0(this.var13, var14), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===Candidate===
-change-
insert
private Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[final Type0 var0 = new Type0(var1);, var0.method0(var1.method1(var2)), method0()]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.method0() != var0]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
/** An array {@link Feature}s. */
  private static final Type0[] var0 = new Type0[0];
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0]
-rightRS-
[this.var0 = var0, this(var0.method0() != null ? var0.method0()
        : var0.method1(), var0.method2(), var0.method3(),
        var1, var2, var3);, this.var0, long var0 = 0L;, this.var0 = var1.method0(var2, var0)]
result:fail
===Candidate===
-change-
insert
/** An array {@link Feature}s. */
  private static final Type0[] var0 = new Type0[0];
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0]
-rightRS-
[this.var0 = var0, this(var0.method0() != null ? var0.method0()
        : var0.method1(), var0.method2(), var0.method3(),
        var1, var2, var3);, this.var0, long var0 = 0L;, this.var0 = var1.method0(var2, var0)]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
protected Type0[] var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, this(var0.method0() != null ? var0.method0()
        : var0.method1(), var0.method2(), var0.method3(),
        var1, var2, var3);, this.var0, long var0 = 0L;, this.var0 = var1.method0(var2, var0)]
result:fail
===Candidate===
-change-
insert
protected Type0[] var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, this(var0.method0() != null ? var0.method0()
        : var0.method1(), var0.method2(), var0.method3(),
        var1, var2, var3);, this.var0, long var0 = 0L;, this.var0 = var1.method0(var2, var0)]
result:fail
===Candidate===
-change-
insert
protected Type0[] var0 = var1;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, this(var0.method0() != null ? var0.method0()
        : var0.method1(), var0.method2(), var0.method3(),
        var1, var2, var3);, this.var0, long var0 = 0L;, this.var0 = var1.method0(var2, var0)]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
/**
   * Create the singleton instance. However, the thread can be started lazily in
   * {@link #addRenewAction(FileSystem)}
   */
  private static Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0.class, method0(true), super(var0.method0() + str0 + Type0.class.method0());]
result:fail
===Candidate===
-change-
insert
/**
   * Create the singleton instance. However, the thread can be started lazily in
   * {@link #addRenewAction(FileSystem)}
   */
  private static Type0 var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0.class, method0(true), super(var0.method0() + str0 + Type0.class.method0());]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
public static final Type0[] var0 = {};
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1]
-rightRS-
[this.var0 = var0, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
public static final Type0[] var0 = {};
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1]
-rightRS-
[this.var0 = var0, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
public static final Type0[] var0 = {};
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1]
-rightRS-
[this.var0 = var0, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
public static final Type0[] var0 = {};
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1]
-rightRS-
[this.var0 = var0, this.var0 = var1]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 == null, this.var0 = var1]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===Candidate===
-change-
insert
private long var0 = 0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[bpServiceToActive.bpNamenode]
-rightRS-
[Type0 var0 = method0();]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
public final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0, var0 == 0, var0.method0(var1), var0 < var1, this.var0 = var1.method0()]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===Candidate===
-change-
insert
public final Type0 var0 = new Type0();
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var0, var0 == 0, var0.method0(var1), var0 < var1, this.var0 = var1.method0()]
-rightRS-
[var0.method0
      (Type0.class,
       new Type1() {
         public Type2 method1() { return new Type0(); }
       }), new Type0()]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private Type0 var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
    public boolean var4 = false;
    public boolean var5 = false;
    public boolean var6 = false;
    public boolean var7 = false;
    public boolean var8 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0)var1;, var0 instanceof Type0]
result:fail
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
    public boolean var4 = false;
    public boolean var5 = false;
    public boolean var6 = false;
    public boolean var7 = false;
    public boolean var8 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0)var1;, var0 instanceof Type0]
result:fail
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
    public boolean var4 = false;
    public boolean var5 = false;
    public boolean var6 = false;
    public boolean var7 = false;
    public boolean var8 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0)var1;, var0 instanceof Type0]
result:fail
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
    public boolean var4 = false;
    public boolean var5 = false;
    public boolean var6 = false;
    public boolean var7 = false;
    public boolean var8 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0)var1;, var0 instanceof Type0]
result:fail
===Candidate===
-change-
insert
public static final class Type0 implements Type1 {
    public boolean var0 = false;
    public boolean var1 = false;
    public boolean var2 = false;
    public boolean var3 = false;
    public boolean var4 = false;
    public boolean var5 = false;
    public boolean var6 = false;
    public boolean var7 = false;
    public boolean var8 = false;
  }
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0)var1;, var0 instanceof Type0]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
Type0<Type1> var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[boolean var0 = var1.method0(str0) && var1.method0(str1);, boolean var0 = var1.method0(str0) || var1.method0(str1);, boolean var0 = var1.method0(str0);, Type0 var0 = new Type0(0, var1, str0);, Type0<Type1> var0 = var1.method0();, for (Type0 var0 : var1) {
          if (var0.method0() == var2
              && var0.method1() == var3
              && var0.method2().method3(var4)) {
            var5 = str0;
            break;
          }
        }, Type0 var0 = null;, var0.method0(), var0.method0(var1), method0(var0.method1(str0)), var0.method0() > 1, var0.method0(var0.method1() - 2), var0.method0() < 2, var0 = var1.method0(var2.method1(), !var3.method2(str0)), var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = null;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[boolean var0 = var1.method0(str0) && var1.method0(str1);, boolean var0 = var1.method0(str0) || var1.method0(str1);, boolean var0 = var1.method0(str0);, Type0 var0 = new Type0(0, var1, str0);, Type0<Type1> var0 = var1.method0();, for (Type0 var0 : var1) {
          if (var0.method0() == var2
              && var0.method1() == var3
              && var0.method2().method3(var4)) {
            var5 = str0;
            break;
          }
        }, Type0 var0 = null;, var0.method0(), var0.method0(var1), method0(var0.method1(str0)), var0.method0() > 1, var0.method0(var0.method1() - 2), var0.method0() < 2, var0 = var1.method0(var2.method1(), !var3.method2(str0)), var0.method0(str0)]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===Candidate===
-change-
insert
final boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[var0.method0().method1(var1, null, var2)]
-rightRS-
[this.var0 = var0, Type0 var0 = new Type0(var1);, Type0 var0 = var1.method0(var2.method1().method2());, var0.method0(str0+ var1), var0.method0().method1(var1, null, var2), var0 = new Type0(str0).method0(str1, str2, var1), var0.method0()]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
final static int var0 = 101;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final static int var0 = 101;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final static int var0 = 101;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
final static int var0 = 100;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final static int var0 = 100;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final static int var0 = 100;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
private volatile boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(Type0.class,
        new Type1(var1))]
result:fail
===Candidate===
-change-
insert
private volatile boolean var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0.method0(Type0.class,
        new Type1(var1))]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===Candidate===
-change-
insert
protected long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1[var2.method0()];]
result:fail
===Candidate===
-change-
insert
protected long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:FieldDeclaration{bodyDeclarations},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1[var2.method0()];]
result:fail
===buggy===
-statement-
private static int OCTAL_MAX=377;

-leftRS-
[]
-rightRS-
[var0.method0(var1.method1(var2, var3).method2(), 10) > var4, var0.method0( var1.method1(var2.method2(var3, var4).method3(), 8) ), var0.method0() - 1, var0 < var1.method0() && var2.method1(var1.method2(var0)), var0.method0(var1) == '\\' && var1 < (var0.method1() - 1) && var2.method2(var0.method0(var1 + 1)), int var0 = var1 + 1;, int var0 = var1 + 2;, var0.method0(var1, var2)]
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
sz=seq[0].length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
sz=seq[0].length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
seq
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int sz=seq[0].length();

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1[0].method0();]
===buggy===
-statement-
int sz=seq[0].length();

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1[0].method0();]
===buggy===
-statement-
int sz=seq[0].length();

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1[0].method0();]
===buggy===
-statement-
int sz=seq[0].length();

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1[0].method0();]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int sz=seq[0].length();

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1[0].method0();]
===buggy===
-statement-
int sz=seq[0].length();

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1[0].method0();]
===buggy===
-statement-
int sz=seq[0].length();

-leftRS-
[]
-rightRS-
[int var0 = var1;, int var0 = var1[0].method0();]
===buggy===
-statement-
lookup
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[int var0 = var1;]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===Candidate===
-change-
insert
Type0<?> var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), this.var0 = var1, this.var0 = var0, Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), Type0<Type1, Type2<?>> var0;, var0.method0(var1, var2), var0.method0(this, null), var0.method0(var1, new Type0[] {str0}), var0.method0(var1, new Type0[] {var2}), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1.method1(), var1.method2())]
-rightRS-
[Type0 var0 = var1.method0(var2);, var0.method0(var1) != null, var0 = (var1.method0(var2) != null ) ? 
        new Type0 [] {var1.method0(var2)} : null, var0 = var1.method0(var2[0]), Type0 var0 = method0(var1);, method0(var0) == null, final Type0 var0 = method0(var1);, Type0[] var0 = var1.method0(var2);, new Type0(method0(var0, var1)), final Type0 var0 = method0(var1, var2);, var0 = var1.method0(var2), Type0<?> var0 = var1.method0(var2);, var0.method0(var1, var2.method1(var1)), Type0 var0 = method0(var1, var2.method1(var3), var4);, var0.method0(str0, 
                                       var1.method1((Type1) var2.method2())), Type0[] var0 = var1.method0(var2.method1());, var0.method0(var1, 
          var2.method1(var3.method2())), this.var0 = var0, Type0 var0 = var1;, Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;]
result:fail
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
if (lookup != null) {
  for (  CharSequence[] seq : lookup) {
    this.lookupMap.put(seq[0],seq[1]);
    int sz=seq[0].length();
    if (sz < _shortest) {
      _shortest=sz;
    }
    if (sz > _longest) {
      _longest=sz;
    }
  }
}

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
lookup != null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 != null
to
==
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final Type0 var0;, final Type0 var0 = method0(var1);, var0 = var1.method0(), int var0;, Type0 var0 = var1.method0() + var2.method1() + str0
          + var2.method2()
          + str1 + var3 + str2
          + var4.method3(str3, str4)
          + var5.method4(var6, var7);]
result:fail
===Candidate===
-change-
update
var0 != null
to
==
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final Type0 var0;, final Type0 var0 = method0(var1);, var0 = var1.method0(), int var0;, Type0 var0 = var1.method0() + var2.method1() + str0
          + var2.method2()
          + str1 + var3 + str2
          + var4.method3(str3, str4)
          + var5.method4(var6, var7);]
result:fail
===buggy===
-statement-
longest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (CharSequence[] seq : lookup) {
  this.lookupMap.put(seq[0],seq[1]);
  int sz=seq[0].length();
  if (sz < _shortest) {
    _shortest=sz;
  }
  if (sz > _longest) {
    _longest=sz;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (CharSequence[] seq : lookup) {
  this.lookupMap.put(seq[0],seq[1]);
  int sz=seq[0].length();
  if (sz < _shortest) {
    _shortest=sz;
  }
  if (sz > _longest) {
    _longest=sz;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:IfStatement{statements},L:,R:EnhancedForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:IfStatement{statements},L:,R:EnhancedForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:IfStatement{statements},L:,R:EnhancedForStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
for (CharSequence[] seq : lookup) {
  this.lookupMap.put(seq[0],seq[1]);
  int sz=seq[0].length();
  if (sz < _shortest) {
    _shortest=sz;
  }
  if (sz > _longest) {
    _longest=sz;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:IfStatement{statements},L:,R:EnhancedForStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:IfStatement{statements},L:,R:EnhancedForStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
for (CharSequence[] seq : lookup) {
  this.lookupMap.put(seq[0],seq[1]);
  int sz=seq[0].length();
  if (sz < _shortest) {
    _shortest=sz;
  }
  if (sz > _longest) {
    _longest=sz;
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1())
-context-
P:IfStatement{statements},L:EnhancedForStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
for (CharSequence[] seq : lookup) {
  this.lookupMap.put(seq[0],seq[1]);
  int sz=seq[0].length();
  if (sz < _shortest) {
    _shortest=sz;
  }
  if (sz > _longest) {
    _longest=sz;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
for (CharSequence[] seq : lookup) {
  this.lookupMap.put(seq[0],seq[1]);
  int sz=seq[0].length();
  if (sz < _shortest) {
    _shortest=sz;
  }
  if (sz > _longest) {
    _longest=sz;
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequence
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
lookup
-leftRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
-rightRS-
[]
===buggy===
-statement-
_longest=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
_longest=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===Candidate===
-change-
insert
Type0 var0[] = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
-rightRS-
[final Type0 var0 = var1.method0(
          var2.method1(var3, false), var3);, final Type0 var0 = var1.method0(
         var2.method1(var3, true), var3);, var0.method0() != null, var0 = method0(var1), var0.method0(var1.method1()), var0.method0().method1(), this.var0 = var0, this.var0, final Type0 var0
            = var1.method0(var2, var3);, var0.method0(var1.method1(0), var2), Type0 var0 = var1.method0(var2.method1(0), var3);, this.var0.method0(), var0.method0(), Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, int var0 = var1.method0();, var0 ? new Type0(var1)
          : var2 ? new Type1(var1)
          : var1, var0 instanceof Type0, Type0 var0 = 
            (Type0) var1;, this.var0.method0().method1(
              var1), var0.method0(var1,
            var2, var3, this)]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[long var0 = method0();, final long var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===Candidate===
-change-
insert
short var0 = 0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), long var0 = 0;]
-rightRS-
[short var0 = 0;, long var0 = 0;, Type0 var0 = var1.method0(var2, false);, Type0 var0 =(Type0)var1[var2];, var0 = var1.method0(true), method0(var0, var1-1, 0,
          var2.method1()*var2.method2(), true), Type0 var0 =
        new Type0(
            var1,
            var2.method0(),
            var3,
            var4);, method0(var0, var1-1, 0,
        -var2.method1()*var2.method2(), true), var0 = var1.method0(), var0.method0() > 0, int var0 = var1.method0();, int var0 = var1.method0(null).method1();, var0.method0(var0.method1()-1), Type0 var0 = (Type0)var1;, var0.method0(var1.method1(var2, false), var2
          ).method2()]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[]
-rightRS-
[this.var0, int var0 = var1;, int var0 = 0;, int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }, this.var0.method0(var1[0], var1[1])]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
int _longest=0;

-leftRS-
[int var0 = var1;]
-rightRS-
[]
===buggy===
-statement-
lookupMap
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
seq
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
seq
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[int var0 = var1;, int var0 = var1[0].method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[int var0 = var1;, int var0 = var1[0].method0();]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[int var0 = var1;, int var0 = var1[0].method0();]
-rightRS-
[]
===buggy===
-statement-
_longest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
_longest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
_longest
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:EnhancedForStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz > _longest) {
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
_longest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _longest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;, int var0 = var1[0].method0();]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;, int var0 = var1[0].method0();]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;, int var0 = var1[0].method0();]
===buggy===
-statement-
_shortest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
_shortest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
_shortest
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }]
-rightRS-
[]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }]
-rightRS-
[]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }]
-rightRS-
[]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:EnhancedForStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }]
-rightRS-
[]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }]
-rightRS-
[]
===buggy===
-statement-
if (sz < _shortest) {
  _shortest=sz;
}

-leftRS-
[int var0 = var1[0].method0();, var0 + var1 > var2.method0(), var0 = var1.method0() - var2, for (Type0[] var0 : var1) {
                this.var2.method0(var0[0], var0[1]);
                int var3 = var0[0].method1();
                if (var3 < var4) {
                    var4 = var3;
                }
                if (var3 > var5) {
                    var5 = var3;
                }
            }]
-rightRS-
[]
===buggy===
-statement-
sz
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
_shortest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  _shortest=sz;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
_shortest=Integer.MAX_VALUE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
_shortest=Integer.MAX_VALUE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = new Type0<Type1, Type2>()
-context-
P:MethodDeclaration{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1, Type0<Type1, Type2>> var0 =
        var1.method0(var2);, this.var0 = var0]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:Assignment{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[this.var0]
-rightRS-
[]
===buggy===
-statement-
Integer.MAX_VALUE
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:VariableDeclarationFragment{initializer},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int _shortest=Integer.MAX_VALUE;

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
_shortest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
_longest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
HashMap
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
CharSequence
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{type},R:SimpleType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
lookupMap
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
CharSequence
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
CharSequence
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<?>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[Type0<Type1> var0 = null;]
result:fail
===buggy===
-statement-
CharSequence
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1<?>>
-context-
P:ParameterizedType{typeArguments},L:SimpleType{typeArguments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
shortest
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:SimpleName{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
abstract
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
abstract
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
Loading Class - org.apache.commons.lang3.text.translate.UnicodeEscaper
===buggy===
-statement-
UnicodeEscaper
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
codepointLow
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:ClassInstanceCreation{arguments},L:SimpleType{type},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return new UnicodeEscaper(codepointLow,codepointHigh,false);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
static
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
private
to
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
private
to
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
int
to
short
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
int
to
short
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
int
to
short
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
int
to
short
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
private
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int below
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int above
-leftRS-
[]
-rightRS-
[this.var0 = var0]
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
boolean between
-leftRS-
[this.var0 = var0]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
Loading Class - org.apache.commons.lang3.text.translate.NumericEntityUnescaper
===buggy===
-statement-
options
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
copyOf
-leftRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
-rightRS-
[]
===buggy===
-statement-
copyOf
-leftRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
-rightRS-
[]
===buggy===
-statement-
OPTION
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
options.length
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return 0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return 0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1 - 1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[final int var0 = var1.method0().var2 - 1;, final int var0 = var1 - 1;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - 1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[final int var0 = var1.method0().var2 - 1;, final int var0 = var1 - 1;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - 1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[final int var0 = var1.method0().var2 - 1;, final int var0 = var1 - 1;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0>var1) {
      var0 = var1;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0>var1) {
      var0 = var1;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (options.length > 0) {
  this.options=EnumSet.copyOf(Arrays.asList(options));
}
 else {
  this.options=EnumSet.copyOf(Arrays.asList(new OPTION[]{OPTION.semiColonRequired}));
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:SingleVariableDeclaration{type},L:,R:SimpleName{name}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
OPTION... options
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
between
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
between
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
above
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
above
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
below
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
Loading Class - org.apache.commons.lang3.text.translate.UnicodeUnescaper
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[int var0 = var1.method0(var2.method1(), 16);, var0.method0(var1) == '\\' && var1 + 1 < var0.method1() && var0.method0(var1 + 1) == 'u', var0 + var1 < var2.method0() && var2.method1(var0 + var1) == 'u', var0 + var1 < var2.method0() && var2.method1(var0 + var1) == '+', var0 + var1 + 4 <= var2.method0(), new Type0(str0 + var0.method0(var1, var0.method1())
                        + str1), int var0 = 2;, Type0 var0 = var1.method0(var2 + var3, var2 + var3 + 4);, try {
                    int var0 = var1.method0(var2.method1(), 16);
                    var3.method2((char) var0);
                } catch (Type0 var4) {
                    throw new Type1(str0 + var2, var4);
                }, var0.method0((char) var1)]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
abstract
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
abstract
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public static enum OPTION {semiColonRequired, semiColonOptional, errorIfNoSemiColon}

-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===Candidate===
-change-
insert
/**
   * The inode id
   */
  final private long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:EnumDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[method0(null), new Type0(var0.method0(var1),
        var0.method0(var2) + var0.method0(var3),
        var0.method0(var4), method1(),
        var0.method0(var5), method2()), method0().var0 == 0, var0 == 0, byte[][] var0 = new byte[var1][];, var0 < var1]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
/**
   * The inode id
   */
  final private long var0;
-context-
P:TypeDeclaration{bodyDeclarations},L:EnumDeclaration{bodyDeclarations},R:FieldDeclaration{bodyDeclarations}
-leftRS-
[method0(null), new Type0(var0.method0(var1),
        var0.method0(var2) + var0.method0(var3),
        var0.method0(var4), method1(),
        var0.method0(var5), method2()), method0().var0 == 0, var0 == 0, byte[][] var0 = new byte[var1][];, var0 < var1]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
public static enum OPTION {semiColonRequired, semiColonOptional, errorIfNoSemiColon}

-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(var2.method1(var0)), this.var0 = var1.method0(var2.method1(new Type0[] { var3 }))]
===buggy===
-statement-
codePointAt
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
charCount
-leftRS-
[char[] var0 = var1.method0(var1.method1(var2, var3));, var0 += var1.method0(var1.method1(var2, var0)), int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
charCount
-leftRS-
[char[] var0 = var1.method0(var1.method1(var2, var3));, var0 += var1.method0(var1.method1(var2, var0)), int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
var0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:MethodInvocation{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
pos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{leftHandSide},L:,R:MethodInvocation{rightHandSide}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
pos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
consumed
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
consumed
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
consumed
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
pt
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
consumed
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
Loading Class - org.apache.commons.lang3.text.translate.CodePointTranslator
===buggy===
-statement-
abstract
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
CharSequenceTranslator
-leftRS-
[boolean var0 = method0(var1, var2);, int var0 = var1.method0(var2, var3);]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:TypeDeclaration{superclassType},L:SimpleName{name},R:MethodDeclaration{bodyDeclarations}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
translate
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(Type0)var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(Type0)var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 - 2
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0-1
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(Type0)var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(Type0)var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 - 2
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
writer
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ClassInstanceCreation{type},L:,R:InfixExpression{arguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
writer=new StringWriter(input.length() * 2)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
writer=new StringWriter(input.length() * 2)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
input.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input.length()
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
input.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
StringWriter
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:TryStatement{statements},L:VariableDeclarationStatement{statements},R:MethodInvocation{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
StringWriter writer=new StringWriter(input.length() * 2);

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, method0(var0, var1), int var0 = method0(var1, var2, var3);]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0(var1.method0() * 2);, int var0 = var1.method0();, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3), var0.method0(), method0(var0, var1), int var0 = method0(var1, var2, var3);, try {
            Type0 var0 = new Type0(var1.method0() * 2);
            method1(var1, var0);
            return var0.method2();
        } catch (Type1 var2) {
            // this should never ever happen while writing to a StringWriter
            throw new Type2(var2);
        }]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return null;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
int consumed=translate(input,pos,out);

-leftRS-
[]
-rightRS-
[char[] var0 = var1.method0(var1.method1(var2, var3));, var0 += var1.method0(var1.method1(var2, var0)), int var0 = 0;, var0.method0(var1)]
===buggy===
-statement-
translate
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int consumed=translate(input,pos,out);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int consumed=translate(input,pos,out);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
consumed=translate(input,pos,out)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
consumed=translate(input,pos,out)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
pos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{arguments},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
pos
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
out
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[]
-rightRS-
[int var0 = method0(var1, var2, var3);, char[] var0 = var1.method0(var1.method1(var2, var3));, var0 += var1.method0(var1.method1(var2, var0)), for (int var0 = 0; var0 < var1; var0++) {
                var2 += var3.method0(var3.method1(var4, var2));
            }, int var0 = 0;, var0.method0(var1), method0(var0, var1)]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
length
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
len=input.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
len=input.length()
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, !new Type0(var0).method0()]
-rightRS-
[var0 = var1.method0(var2, var0), Type0 var0 = var1.method0(var2, null);]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===Candidate===
-change-
insert
if (var0 == 0) {
      throw new Type0(str0);
    }
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0[] var0 = var1.method0(str0, 2);, Type0[] var0 = var1.method0(str0);, Type0 var0 = var1.method0(str0)
    .method1()
    .method2(str1 +
           str2)
    .method3(str3);]
-rightRS-
[Type0[] var0 = new Type0[var1];]
result:fail
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
int len=input.length();

-leftRS-
[int var0 = 0;]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
out
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = var1 - var2;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (out == null) {
  throw new IllegalArgumentException("The Writer must not be null");
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
out == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
input
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NullLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[int var0 = 0;]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (input == null) {
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
input == null
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===Candidate===
-change-
update
var0 == null
to
!=
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, Type0[] var0 = var1.method0().method1(
          var2, var3, var4, var5, var6, var7,
          var8, var9, var10);, Type0 var0 = new Type0(str0);, Type0 var0 = method0().method1(var1, var2);]
result:fail
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:WhileStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
len
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
len
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
len
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
while (pos < len) {
  int consumed=translate(input,pos,out);
  if (consumed == 0) {
    char[] c=Character.toChars(Character.codePointAt(input,pos));
    out.write(c);
    pos+=c.length;
    continue;
  }
  for (int pt=0; pt < consumed; pt++) {
    pos+=Character.charCount(Character.codePointAt(input,pos));
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:MethodDeclaration{statements},L:WhileStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
pos
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
len
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (consumed == 0) {
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[int var0 = method0(var1, var2, var3);, int var0 = 0;, method0(var0, var1)]
-rightRS-
[]
===buggy===
-statement-
consumed
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != 0) {
          var1--; // recheck if bufferPosn matches start of delimiter
          var0 = 0;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  char[] c=Character.toChars(Character.codePointAt(input,pos));
  out.write(c);
  pos+=c.length;
  continue;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
pos=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
pos=0
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
        return null;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = method0(var1, var2, var3, var4);, Type0 var0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(var1, true);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[for (Type0 var0 : var1.method0()) {
      Type1 var2 = var0.method1().method2();
      Type1 var3 = var0.method3();
      boolean var4 = var3 == null || var3.method4() || str0.method5(var3);
	  Type1 var5 = var4 ? str1 :
          (var0.method6() == 0 ? 
              str2 : str3);
      Type1 var6 = var7.method7(str4, var0.method8() * 100);
      var8.
        method9().
          method10().
            method11().method12(var7.method13(var0.method1().method14())).method15(). // for sorting
            method16(method17(str5, var2), var2).method15().
          method10(var0.method18().method2()).
          method10(var0.method19().method2()).
          method10(var0.method20().method2()).
          method10(var0.method21().method2()).
          method10(var0.method22().method2()).
          method10().
            method11().method12(var6).method15(). // for sorting
            method23(var9).
              method12(method24(var6, '%')). // tooltip
              method23(var10).
                method25(method24(str6, var6, '%')).method15().method15().method15().
          method10().
            method16(var4 ?
              str7 : method24(str8, var3), var5).method15().
          method10(var0.method26().method2()).method15();
      if (var11 != var12 && ++var13 >= 20) break;
    }, Type0 var0 = var1.method0(str0, var2.method1() * 100);, Type0 var0 = var1.method0().method1();, Type0 var0 = var1.method0();, Type0 var0 = var1 ? str0 :
          (var2.method0() == 0 ? 
              str1 : str2);]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = new Type2<Type1>();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, this.var0 = var1.method0(var0), var0 = var1.method0(var0, var2, var3)]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===Candidate===
-change-
insert
Type0 
        var0 = 
          new Type0(this);
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, var0.method0(var1), Type0 var0 = var1.method0(var2.method1(
          str0, var3 + str1 + 0));, var0.method0(var1.method1(var2,
        var3)), final Type0 var0 = var1.method0(
        var2.method1() + str0 + var2.method2());, Type0 var0 = 
          var1.method0(var2[0].method1());, var0.method0(
        var1.method1(var2, var3)), var0.method0(var1.method1()) == null, var0.method0(str0
          + var1.method1(var2)), var0.method0(var1.method1(var2)), var0.method0(var1) != null, var0 = var1.method0(var2), var0 = var1
          .method0(var2.method1(var3,
              var4), var2.method1(
              var5,
              var6)), this.var0 = (var1 == null) 
       ? new Type0(str0, var2, var3, var3 == 0, 
           var4, new Type1(var4.method0(var5, str1)))
       : new Type0(str0, var2, var3, var3 == 0,
           var4, new Type1(var4.method0(var5, str1)),
           var1.method1()), var0.method0(var1.method1(str0,
          str1)), Type0 var0 = var1.method0(var2.method1());, var0.method0(var1,
          var2.method1(),
          var2.method2(),
          var2.method3(),
          var2.method4(var3),
          var4.method5(),
          method6(), var2.method7()), Type0 var0 = var1.method0(var2);, var0.method0(str0) != null, str0 + var0 + str1 + method0()
        + str2 + method1() + str3
        + var1.method2() + str4, var0.method0(var1.method1(var2,
                                          var3.method2())), this.method0().method1(str0), this.var0 = var0]
-rightRS-
[var0 = var1.method0(Type0.class, this, var2.method1(),
                              var2.method2(), 
                              var3.method3(var4, 
                                          var5), 
                              false, var3, var6), this.var0 =  var1.method0(var2,
                                      var3), this.var0 = var1.method0(var2,
                                          var3), this.var0 = var1.method0(var2, 
                                       var3), var0.method0(var1,
                    var2) < 0, var0.method0(var1, 
                    var2) < 0, Type0 var0 = var1.method0(
        var2.method1(str0));, Type0 var0 = var1.method0(
        this.method1().method2(var2));, int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(method1()), var0.method0(), var0 + str0 + method0(), var0.method0().method1(), var0 = method0(var1.method1()), this.var0.method0(), new Type0(method0(), method1(),
        var0.method2(), method3()), var0 = method0(var1), Type0 var0 = var1.method0();, var0.method0(var1.method1().method2(), var2), this.var0 = var0, this.var0 = new Type0()]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, var0 = var1.method0(var2), final Type0 var0 = var1.method0(var2);]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2);, byte[][] var0 = {{}};, var0 = var1.method0(var2), final Type0 var0 = var1.method0(var2);]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
short var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[this.var0 = var0, this.var0, final long var0 = var1.method0();]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
long var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();, var0.method0().method1().method2()]
-rightRS-
[int var0 = var1.method0();, final int var0 = var1.method0();]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===Candidate===
-change-
insert
var0++
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0.method0(var1), this.var0.method0(var1), var0.method0(var1, var2), this.var0 = new Type0(
            new Type1(var0, this.var1)), this.var0 = var0, this.var0 = method0(var1, var2), Type0[] var0 = new Type0[var1];, this.var0 = var1.method0(
          var2, var3), for (int var0 = 0; var0 < var1; var0++) {
        Type0 var2 = new Type0();
        var2.method0(var3);
        var4[var0] = var2;
      }, for(int var0=0; var0<var1; var0++) {
        var2[var3++] = new Type0(var4[var0]);
      }, for(int var0=0; var0<var1;var0++) {
        var2[var0]= var3.method0(var4);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3.method0(var4[var0]);
      }, for (int var0 = 0; var0 < var1; var0++) {
        var2[var0] = var3[var0].method0();
      }]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===Candidate===
-change-
insert
int var0 = var1;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);, var0.method0()]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, final Type0 var0 = var1.method0();, var0.method0() == null]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:VariableDeclarationStatement{statements},R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
int pos=0;

-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, Type0 var0 = new Type0(var1.method0() * 2);, var0+= var1, Type0[] var0 = new Type0[var1 + 1];, var0.method0(var1, 0, var2, 1, var3)]
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Class
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ParameterizedType{type},L:,R:WildcardType{typeArguments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Class
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Object
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Object
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
String
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Long
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Integer
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Short
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Short
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Byte
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Byte
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Double
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Float
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Float
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Boolean
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Boolean
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
[]
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
[]
-context-
P:ArrayType{dimensions},L:Dimension{dimensions},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:ArrayType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Character
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
Character
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:ArrayType{elementType},L:,R:Dimension{dimensions}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
abstract
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:TypeDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.LimitedPrivate({str0, str1})
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:TypeDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
