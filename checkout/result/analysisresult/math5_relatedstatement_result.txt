Loading Change Pool...Loading Class - org.apache.commons.math3.complex.Complex
===buggy===
-statement-
"("
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
", "
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:SimpleName{extendedOperands}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:SimpleName{extendedOperands}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:SimpleName{extendedOperands}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:SimpleName{extendedOperands}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
imaginary
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:StringLiteral{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:StringLiteral{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:StringLiteral{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
", "
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
", "
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:SimpleName{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:SimpleName{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:SimpleName{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:SimpleName{extendedOperands}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
"("
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
"("
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
"("
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0 +
      str1 +
      str2 +
      str3 +
      str4 +
      str5 +
      str6+
      str7
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0 +
      str1 +
      str2 +
      str3 +
      str4 +
      str5 +
      str6+
      str7
-context-
P:InfixExpression{leftOperand},L:,R:StringLiteral{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:StringLiteral{leftOperand},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
"("
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
str0
to
str0
-context-
P:InfixExpression{leftOperand},L:,R:SimpleName{rightOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
imaginary
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:StringLiteral{extendedOperands}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, str0, 2)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, str0, 2)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, str0, 2)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, str0, 2)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, str0, 2)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
this
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
this
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(str0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
method0(str0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
method0(str0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
method0(str0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0() / 1024
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0.class
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0.class
-context-
P:InfixExpression{extendedOperands},L:StringLiteral{extendedOperands},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
")"
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
try {
        assert method0() : str0
          + str1
          + str2;
      } catch(Type0 var0) {
        var1.method1(var2.method2(var0));
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
try {
        assert method0() : str0
          + str1
          + str2;
      } catch(Type0 var0) {
        var1.method1(var2.method2(var0));
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
try {
        assert method0() : str0
          + str1
          + str2;
      } catch(Type0 var0) {
        var1.method1(var2.method2(var0));
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
try {
        assert method0() : str0
          + str1
          + str2;
      } catch(Type0 var0) {
        var1.method1(var2.method2(var0));
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
try {
        assert method0() : str0
          + str1
          + str2;
      } catch(Type0 var0) {
        var1.method1(var2.method2(var0));
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0);
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, !var0.method0(Type0.class).method1(), this.var0 = !var1.method0(Type1.class).method1(), var0 == null || var0.method0(Type0.class).method1(), var0.method0(var1), var0.method0(Type0.class), var0.method0(), Type0<Type1> var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0);
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, !var0.method0(Type0.class).method1(), this.var0 = !var1.method0(Type1.class).method1(), var0 == null || var0.method0(Type0.class).method1(), var0.method0(var1), var0.method0(Type0.class), var0.method0(), Type0<Type1> var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0);
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, !var0.method0(Type0.class).method1(), this.var0 = !var1.method0(Type1.class).method1(), var0 == null || var0.method0(Type0.class).method1(), var0.method0(var1), var0.method0(Type0.class), var0.method0(), Type0<Type1> var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0);
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, !var0.method0(Type0.class).method1(), this.var0 = !var1.method0(Type1.class).method1(), var0 == null || var0.method0(Type0.class).method1(), var0.method0(var1), var0.method0(Type0.class), var0.method0(), Type0<Type1> var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0);
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, !var0.method0(Type0.class).method1(), this.var0 = !var1.method0(Type1.class).method1(), var0 == null || var0.method0(Type0.class).method1(), var0.method0(var1), var0.method0(Type0.class), var0.method0(), Type0<Type1> var0 = var1.method0();]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = var1.method0(var2)
        || var1.method0(var3);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = new Type1(var1.method0(
            var2, true, var3,
            method1(var4, var5, var1, var2),
            method2(var4, var5, var1, var2), var6));, var0.method0(var1).method1() != var2.method0(var3).method1(), var0.method0(var1)?
            var2.method1() : var3.method2(var4), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1, var2);]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0(var2)
        || var1.method0(var3);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = new Type1(var1.method0(
            var2, true, var3,
            method1(var4, var5, var1, var2),
            method2(var4, var5, var1, var2), var6));, var0.method0(var1).method1() != var2.method0(var3).method1(), var0.method0(var1)?
            var2.method1() : var3.method2(var4), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1, var2);]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0(var2)
        || var1.method0(var3);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = new Type1(var1.method0(
            var2, true, var3,
            method1(var4, var5, var1, var2),
            method2(var4, var5, var1, var2), var6));, var0.method0(var1).method1() != var2.method0(var3).method1(), var0.method0(var1)?
            var2.method1() : var3.method2(var4), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1, var2);]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0(var2)
        || var1.method0(var3);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = new Type1(var1.method0(
            var2, true, var3,
            method1(var4, var5, var1, var2),
            method2(var4, var5, var1, var2), var6));, var0.method0(var1).method1() != var2.method0(var3).method1(), var0.method0(var1)?
            var2.method1() : var3.method2(var4), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1, var2);]
result:fail
===Candidate===
-change-
insert
boolean var0 = var1.method0(var2)
        || var1.method0(var3);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1), Type0 var0 = new Type1(var1.method0(
            var2, true, var3,
            method1(var4, var5, var1, var2),
            method2(var4, var5, var1, var2), var6));, var0.method0(var1).method1() != var2.method0(var3).method1(), var0.method0(var1)?
            var2.method1() : var3.method2(var4), Type0 var0 = var1.method0(var2);, Type0 var0 = method0(var1, var2);]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===Candidate===
-change-
insert
method0(var0, var1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
      .method0(str0
          + str1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
      .method0(str0
          + str1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
      .method0(str0
          + str1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
      .method0(str0
          + str1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
      .method0(str0
          + str1)
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = !var1.method0()
        && var1.method1().method2() ? null
        : var1.method3();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[str0 +
      str1 + var0 + str2 + var1 +
      str3 + var2.method0() +
      str1 + var3 + str2 +
      var4.method1(), Type0 var0 = var1.method0().method1();, str0 + var0 + str1 + var1
      + str2 + var2 + str1 +
      var3.method0(), str0 + var0 + str1 + var1.method0()
        + str2 + var2 + str1 + var1.method1()
        + str2 + var3 + str1 +
          var4.method2()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = !var1.method0()
        && var1.method1().method2() ? null
        : var1.method3();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[str0 +
      str1 + var0 + str2 + var1 +
      str3 + var2.method0() +
      str1 + var3 + str2 +
      var4.method1(), Type0 var0 = var1.method0().method1();, str0 + var0 + str1 + var1
      + str2 + var2 + str1 +
      var3.method0(), str0 + var0 + str1 + var1.method0()
        + str2 + var2 + str1 + var1.method1()
        + str2 + var3 + str1 +
          var4.method2()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = !var1.method0()
        && var1.method1().method2() ? null
        : var1.method3();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[str0 +
      str1 + var0 + str2 + var1 +
      str3 + var2.method0() +
      str1 + var3 + str2 +
      var4.method1(), Type0 var0 = var1.method0().method1();, str0 + var0 + str1 + var1
      + str2 + var2 + str1 +
      var3.method0(), str0 + var0 + str1 + var1.method0()
        + str2 + var2 + str1 + var1.method1()
        + str2 + var3 + str1 +
          var4.method2()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = !var1.method0()
        && var1.method1().method2() ? null
        : var1.method3();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[str0 +
      str1 + var0 + str2 + var1 +
      str3 + var2.method0() +
      str1 + var3 + str2 +
      var4.method1(), Type0 var0 = var1.method0().method1();, str0 + var0 + str1 + var1
      + str2 + var2 + str1 +
      var3.method0(), str0 + var0 + str1 + var1.method0()
        + str2 + var2 + str1 + var1.method1()
        + str2 + var3 + str1 +
          var4.method2()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = !var1.method0()
        && var1.method1().method2() ? null
        : var1.method3();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[str0 +
      str1 + var0 + str2 + var1 +
      str3 + var2.method0() +
      str1 + var3 + str2 +
      var4.method1(), Type0 var0 = var1.method0().method1();, str0 + var0 + str1 + var1
      + str2 + var2 + str1 +
      var3.method0(), str0 + var0 + str1 + var1.method0()
        + str2 + var2 + str1 + var1.method1()
        + str2 + var3 + str1 +
          var4.method2()]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0(str0);
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = new Type0();, var0[var1] = var2.method0(), var0.method0()]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return 1;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return 1;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return 1;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return 1;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return 1;
      }
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
assert method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
result:fail
===Candidate===
-change-
insert
assert method0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===Candidate===
-change-
insert
Type0 var0 = new Type0();
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(), Type0 var0 = new Type0(str0);]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
long var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return "(" + real + ", "+ imaginary+ ")";

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:MethodDeclaration{statements},L:,R:ReturnStatement{statements}
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return NaN;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
imaginary
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{leftOperand},L:,R:NumberLiteral{rightOperand}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (real == 0.0 && imaginary == 0.0) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      var0 = var1;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0 var0 = var1.method0(0, var2).method1();, var0.method0(var1.method1().method2()), var0.method0() + str0 + var1.method1(), var0.method0(), Type0 var0 = var1.method0().method1();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
assert method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
result:fail
===Candidate===
-change-
insert
assert method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
synchronized (var0) {
      for (Type0 var1 : var0) {
        var2.method0(str0
            + var1.method1().method2());
        Type1 var3 = null; 
        try {
          if (var4 == null) {
            var3 = var1.method3(var5);
          } else {
            var3 = var1.method3(var4, var5);
          }

          if (var3 != null) {
            var6 = var1;
            var7 = var3;
            var2.method0(str1 + var1.method1().method2()
                + str2);
            break;
          }
          else {
            var2.method4(str3 + var1.method1().method2()
                + str4);
          }
        } 
        catch (Type2 var8) {
          var2.method4(str5 + var1.method1().method2()
              + str6 + var8.method5());
        }
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized (var0) {
      for (Type0 var1 : var0) {
        var2.method0(str0
            + var1.method1().method2());
        Type1 var3 = null; 
        try {
          if (var4 == null) {
            var3 = var1.method3(var5);
          } else {
            var3 = var1.method3(var4, var5);
          }

          if (var3 != null) {
            var6 = var1;
            var7 = var3;
            var2.method0(str1 + var1.method1().method2()
                + str2);
            break;
          }
          else {
            var2.method4(str3 + var1.method1().method2()
                + str4);
          }
        } 
        catch (Type2 var8) {
          var2.method4(str5 + var1.method1().method2()
              + str6 + var8.method5());
        }
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized (var0) {
      for (Type0 var1 : var0) {
        var2.method0(str0
            + var1.method1().method2());
        Type1 var3 = null; 
        try {
          if (var4 == null) {
            var3 = var1.method3(var5);
          } else {
            var3 = var1.method3(var4, var5);
          }

          if (var3 != null) {
            var6 = var1;
            var7 = var3;
            var2.method0(str1 + var1.method1().method2()
                + str2);
            break;
          }
          else {
            var2.method4(str3 + var1.method1().method2()
                + str4);
          }
        } 
        catch (Type2 var8) {
          var2.method4(str5 + var1.method1().method2()
              + str6 + var8.method5());
        }
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized (var0) {
      for (Type0 var1 : var0) {
        var2.method0(str0
            + var1.method1().method2());
        Type1 var3 = null; 
        try {
          if (var4 == null) {
            var3 = var1.method3(var5);
          } else {
            var3 = var1.method3(var4, var5);
          }

          if (var3 != null) {
            var6 = var1;
            var7 = var3;
            var2.method0(str1 + var1.method1().method2()
                + str2);
            break;
          }
          else {
            var2.method4(str3 + var1.method1().method2()
                + str4);
          }
        } 
        catch (Type2 var8) {
          var2.method4(str5 + var1.method1().method2()
              + str6 + var8.method5());
        }
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
synchronized (var0) {
      for (Type0 var1 : var0) {
        var2.method0(str0
            + var1.method1().method2());
        Type1 var3 = null; 
        try {
          if (var4 == null) {
            var3 = var1.method3(var5);
          } else {
            var3 = var1.method3(var4, var5);
          }

          if (var3 != null) {
            var6 = var1;
            var7 = var3;
            var2.method0(str1 + var1.method1().method2()
                + str2);
            break;
          }
          else {
            var2.method4(str3 + var1.method1().method2()
                + str4);
          }
        } 
        catch (Type2 var8) {
          var2.method4(str5 + var1.method1().method2()
              + str6 + var8.method5());
        }
      }
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===buggy===
-statement-
if (isNaN) {
  return NaN;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isNaN
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:IfStatement{expression},L:,R:Block{thenStatement}
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
(real == c.real)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
(var0 ? 1 << 10 : 0)
-context-
P:InfixExpression{leftOperand},L:,R:ParenthesizedExpression{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===Candidate===
-change-
insert
var0.method0(0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1.method1()), var0.method0(0)]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + method1(var1))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1,
                         str0 +
                         str1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1)
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[new Type0(
        var0.method0(new Type1[var0.method1()])), var0 = var1.method0(), var0 = var1.method0(var2.method1(), var0), var0 == null? str0: var0.method0(), var0 = new Type0<Type1>(var1.method0()), var0 < var1.method0(), long var0 = var1.method0();, var0.method0(str0 + var1.method1()), var0.method0() == 0, final Type0[] var0 = new Type0[var1.method0()];, var0.method0(), var0.method0(str0 + var1), var0.method0(var1 + str0 + var2), var0.method0(var1
        + str0 + var2 + str1
        + var3
        + str0 + var4 + str1
        + var5
        + str0 + var6), var0.method0(str0 + var1 + str1
          + var2), var0.method0(str0 + var1
          + str1), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 +
          str1 + var1 + str2 + var2 + str3 +
          var3.method1() + str4 +
          str5), var0.method0(str0 + var1
          + str1 + var2 + str2), var0.method0(str0
            + str1 + var1
            + str2), var0.method0(str0
            + var1 + str1
            + str2), var0.method0(str0 + var1.method1()
        + str1 + var2 + str2 + var3.method2()
        + str3 + (var4 - var5) + str4), var0.method0(str0
          + var1 + str1 + var2 + str2 + var1.method1()
          + str3), var0.method0(str0 + var1 +
              str1 + var2 + str2 +
              str3), var0.method0(var1), var0.method0(str0
            + str1 + var1 + str2 + var2, var3), var0.method0(str0 + var1
              + ((var2 > 0) ? (str1 + var2 + str2) : str3)), var0
              .method0(str0
                  + str1
                  + str2 + (var1.method1() - var2)
                  + str3), var0.method0(str0), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3), var0.method0(str0 + var1 + str1
        + var2 + str2 + var3
        + str3 + var4.method1()
        + str4 + var4.method2()
        + str5 + var4.method3()
        + str6 + var5.method4()
        + str7 + var6 + str8
        + var7 + str9
        + var7.method5()), var0.method0(str0 + var1 + str1 +
        var2 + str2), var0.method0(str0
                  + str1, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
return (real == c.real) && (imaginary == c.imaginary);

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, method1(var1.method2(0)))
-context-
P:IfStatement{statements},L:,R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c.real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c.imaginary
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:InfixExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:CastExpression{type},L:,R:SimpleName{expression}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:CastExpression{type},L:,R:SimpleName{expression}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
c=(Complex)other
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
c=(Complex)other
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 0
-context-
P:VariableDeclarationStatement{fragments},L:VariableDeclarationFragment{fragments},R:
-leftRS-
[long var0 = 0, var1 = 0, var2 = 0;]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = new Type0(var0)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
var0 = new Type0(var0)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0 = var1.method0().method1();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1, byte[]> var0 = var1.method0();, Type0<Type1, byte[]> var0 = method0(var1, var2);, var0.method0(var1), Type0<Type1, byte[]> var0 = var1.method0(var2.method1());, var0.method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1.method0().method1();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1, byte[]> var0 = var1.method0();, Type0<Type1, byte[]> var0 = method0(var1, var2);, var0.method0(var1), Type0<Type1, byte[]> var0 = var1.method0(var2.method1());, var0.method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1.method0().method1();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1, byte[]> var0 = var1.method0();, Type0<Type1, byte[]> var0 = method0(var1, var2);, var0.method0(var1), Type0<Type1, byte[]> var0 = var1.method0(var2.method1());, var0.method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1.method0().method1();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1, byte[]> var0 = var1.method0();, Type0<Type1, byte[]> var0 = method0(var1, var2);, var0.method0(var1), Type0<Type1, byte[]> var0 = var1.method0(var2.method1());, var0.method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
final Type0 var0 = var1.method0().method1();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0<Type1, byte[]> var0 = var1.method0();, Type0<Type1, byte[]> var0 = method0(var1, var2);, var0.method0(var1), Type0<Type1, byte[]> var0 = var1.method0(var2.method1());, var0.method0(new Type0(var1))]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
              var0 = new Type0(
                  var1.method0(var2, var3));
            }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0()
              .method1(var2);, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, Type0 var0 = var1.method0();, var0.method0(), var0.method0(var1), var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
              var0 = new Type0(
                  var1.method0(var2, var3));
            }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0()
              .method1(var2);, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, Type0 var0 = var1.method0();, var0.method0(), var0.method0(var1), var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
              var0 = new Type0(
                  var1.method0(var2, var3));
            }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0()
              .method1(var2);, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, Type0 var0 = var1.method0();, var0.method0(), var0.method0(var1), var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
              var0 = new Type0(
                  var1.method0(var2, var3));
            }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0()
              .method1(var2);, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, Type0 var0 = var1.method0();, var0.method0(), var0.method0(var1), var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
              var0 = new Type0(
                  var1.method0(var2, var3));
            }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0()
              .method1(var2);, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, Type0 var0 = var1.method0();, var0.method0(), var0.method0(var1), var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0 + var1 + str1)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(var2);]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1 + str1)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(var2);]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1 + str1)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(var2);]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1 + str1)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(var2);]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1 + str1)
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[Type0[] var0 = var1.method0(var2);]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var1 = new Type0(var1, var2.method1());
      }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var1 = new Type0(var1, var2.method1());
      }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var1 = new Type0(var1, var2.method1());
      }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var1 = new Type0(var1, var2.method1());
      }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var1 = new Type0(var1, var2.method1());
      }
-context-
P:IfStatement{statements},L:,R:VariableDeclarationStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Complex c=(Complex)other;

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:VariableDeclarationStatement{type},L:,R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
float var0 = var1.method0();
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0;, this.var0 = var0, long var0
            = var1 + var2.method0(var3);, long var0 = var1.method0();, Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 == null) {
      throw new Type0(str0);
    }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2, str0);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 =
      var1.method0(method1(var2, var3),
               var4);, Type0 var0 =
        method0(var1, var2);, Type0 var0 =
      method0(var1, var2);, Type0 var0 = method0(var1,
                                                  var2);, long var0 =
      var1.method0(
        method1(var2, var3),
        var4);]
-rightRS-
[Type0 var0 = null;, var0.method0()]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
          var1 = var2.method0(var0);
        }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6), Type0 var0 = 
            var1.method0(
                var2.method1().method2());, var0.method0(var1 == null ? str0 : var1.method1()), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3), long var0 = var1 - var2;, Type0 var0 = new Type0(var1);, var0.method0(str0 + method1(var1)), var0.method0(
            str0
                + str1
                + str2), var0.method0(str0
                + var1.method1()), var0.method0(str0), this.var0 = var0, Type0<Type1> var0 =
              method0(this.var1, var2);, var0.method0(var1), Type0<Type1> var0 = var1.method0(str0);, var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5(), for (Type0 var0 : var1) {
            for (Type0 var2 : var0.method0()) {
              var3
                  .method1()
                  .method2(
                      method3(str0, method4(var4),
                          var2.method5(), str1),
                      var2.method5() + str2
                          + var2.method6() + str3)
                  .method7();
            }
          }, var0.method0(), int var0 = 0;, var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6()), long var0 =
              method0(str0).method1() ? var1.method2() : var2
                  .method3(method0(str0));, Type0 var0;, method0().method1(str0), method0().method1(var0, 0, var1), method0().method1(
                  str0
                      + var0.method2(var1)), char[] var0 = new char[65536];, var0.method0(str0 + method1(var1)).method2(), var0.method0(
            str0
                + str1
                + str2).method1(), var0.method0(str0
                + var1.method1())
              .method2(), var0.method0(str0).method1(), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4), var0.method0(str0 + var1 + str1)
                    .method1(method2(str2, method3(var2),
                        var3.method4()), str3)
                    .method0(str4).method5().method0(), var0
                  .method0()
                  .method1(
                      method2(str0, method3(var1),
                          var2.method4(), str1),
                      var2.method4() + str2
                          + var2.method5() + str3)
                  .method6(), var0 = var1.method0(var2, 0, (int) var3), var0 = var1.method0(method1(var2)), method0(var0), method0(str0), long var0 =
              method0(str0).method1() ? -4 * 1024 : var1.method2(method0(str0));, try {
        var0 = var1.method0(method1(var2));
      } catch (Type0 var3) {
        var4.method2(str0 + method1(var2)).method3();
        return;
      }, try {
            var0 =
                new Type0(this.var1
                    .method0(
                        var2.method1(
                            var3.method2().method3())
                            + var4 + method4(var5)
                            + var4
                            + method4(var6), this.var7).method5()
                    .method6());
          } catch (Type1 var8) {
            var9.method7(str0).method8();
          }, try {
            long var0 = var1 - var2;
            if (var0 < var3.method0()) {
                var4.method1(str0 + var0 + str1)
                    .method2(method3(str2, method4(var5),
                        var3.method5()), str3)
                    .method1(str4).method6().method1();
            }
            // TODO: Use secure IO Utils to avoid symlink attacks.
            //TODO Fix findBugs close warning along with IOUtils change
            Type0 var6 = new Type0(var3);
            char[] var7 = new char[65536];
            var6.method7(var2);
            int var8 = 0;
            int var9 = 0;
            method8().method9(str5);
            while ((var8 = var6.method10(var7, 0, (int) var0)) > 0
                && var9 < (var1 - var2)) {
              method8().method9(var7, 0, var8); // TODO: HTMl Quoting?
              var9 += var8;
              var0 = var0 - var9;
            }
            var6.method11();
            method8().method9(str6);
          } catch (Type1 var10) {
              method8().method9(
                  str7
                      + var11.method12(var10));
          }, this.var0
                    .method0(
                        var1.method1(
                            var2.method2().method3())
                            + var3 + method4(var4)
                            + var3
                            + method4(var5), this.var6).method5(), !method0(var0).method1(), method0(str0).method1(), var0 = var0 < 0 ? var1.method0() + var0 : var0, var0 = var0 < 0 ? var1.method0() : var0, var0 < var1.method0(), Type0<Type1> var0 = new Type2<Type1>(var1);, this.var0 = new Type0(var1), this.var0, var0
                  .method0(), Type0 var0 = null;, for (Type0 var0 : var1.method0()) {
              var2
                  .method1()
                  .method2(
                      method3(str0, method4(var3),
                          var0.method5(), str1),
                      var0.method5() + str2
                          + var0.method6() + str3)
                  .method7();
            }, Type0 var0 = var1.method0(var2);, method0()]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===Candidate===
-change-
insert
Type0 var0 = null;
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1 + str0;]
-rightRS-
[var0.method0(method1()), var0.method0(method1()).method2(str0 + 
        var1 + str1 + var2.method3(), var2), var0.method0(), try {
      Type0 var0 = var1.method0().method1()
        .method2(var2);
      if (var0 == null) {
        throw new Type1(str0);
      }
      var3.method3(var0);
    } catch (Type1 var4) {
      var5.method4(method5()).method6(str1 + 
        var2 + str2 + var4.method7(), var4);
    }, var0.method0(var1), var0.method0().method1(), Type0 var0 = var1.method0().method1()
        .method2(var2);, Type0 var0 = var1 + str0;]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 != null) {
        var1.method0(var0);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[final int var0 = method0();, int var0 = method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0(var1);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0() != 0, final byte[] var0 = new byte[var1.method0()];, final short var0 = var1.method0().method1(
        var2.method2());]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2.method2(var1)
            + str2 + var3);
      }
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, this.var0 = var0, Type0 var0 = var1.method0(var2 + str0);, var0.method0(var1, var2, var3), Type0 var0 = var1.method0();, Type0 var0 = method0(var1);]
-rightRS-
[Type0 var0 = var1.method0(
          var2.method1(var3), var4.method2());, var0 != null && !var0.method0(), var0 == null || var0.method0()]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:IfStatement{statements},L:VariableDeclarationStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return str0 + var0 +
        str1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(!var1.method1(),
        str0), !var0.method0(var1, var2).method1(), var0 == null || var0.method0(), var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return str0 + var0 +
        str1;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(!var1.method1(),
        str0), !var0.method0(var1, var2).method1(), var0 == null || var0.method0(), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1(str0, str1, var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(str0, str1, var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(str0, str1, var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(str0, str1, var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(str0, str1, var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1.method1(var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1.method1(var2))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return 0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return 0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1 + str1), var0.method0(str0
            + var1 + str1 + var2
            + str2
            + str3), var0.method0(str0
            +var1+str1+ var2.method1().var3 
            +str2), var0.method0(str0
          +var1+str1+var2
          +str2), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1), var0.method0(str0
            + str1 + var1 + str2), var0.method0(
              str0 + var1), var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0, var1, 
          str1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0, var1.method1(str1), 
          str2), var0.method0(str0, 
               method1(var1.method2(str1), var0),
               str2), var0.method0(str0, 
                method1(var1.method2(str1), var0),
                str2), var0.method0(var1[0], var1[1], str0), var0.method0(str0, var1.method1(var2)
          .method2(), str1), this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0, var1, 
          str1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0, var1.method1(str1), 
          str2), var0.method0(str0, 
               method1(var1.method2(str1), var0),
               str2), var0.method0(str0, 
                method1(var1.method2(str1), var0),
                str2), var0.method0(var1[0], var1[1], str0), var0.method0(str0, var1.method1(var2)
          .method2(), str1), this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0, var1, 
          str1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0, var1.method1(str1), 
          str2), var0.method0(str0, 
               method1(var1.method2(str1), var0),
               str2), var0.method0(str0, 
                method1(var1.method2(str1), var0),
                str2), var0.method0(var1[0], var1[1], str0), var0.method0(str0, var1.method1(var2)
          .method2(), str1), this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0, var1, 
          str1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0, var1.method1(str1), 
          str2), var0.method0(str0, 
               method1(var1.method2(str1), var0),
               str2), var0.method0(str0, 
                method1(var1.method2(str1), var0),
                str2), var0.method0(var1[0], var1[1], str0), var0.method0(str0, var1.method1(var2)
          .method2(), str1), this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0, var1, 
          str1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0, var1.method1(str1), 
          str2), var0.method0(str0, 
               method1(var1.method2(str1), var0),
               str2), var0.method0(str0, 
                method1(var1.method2(str1), var0),
                str2), var0.method0(var1[0], var1[1], str0), var0.method0(str0, var1.method1(var2)
          .method2(), str1), this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0, var1, var2, 
                          var3, var4)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(new Type0(var1)), var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0(var1, var2,
                  var3, var4[var5].method0(), var4[var5]
                      .method1());, for (Type0 var0 : var1) {
          // add this block to the block --> node locations map
          var2.method0(var0, var3);

          // For blocks that do not have host/rack information,
          // assign to default  rack.
          Type1[] var4 = null;
          if (var5 == 0) {
            var4 = new Type1[]{var6};
          } else {
            var4 = var7;
          }

          // add this block to the rack --> block map
          for (int var8 = 0; var8 < var9; var8++) {
            Type1 var10 = var4[var8];
            Type2<Type0> var11 = var12.method1(var10);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var12.method0(var10, var11);
            }
            var11.method2(var0);
            if (!var4[var8].method3(var6)) {
              // Add this host to rackToNodes map
              method4(var13, var4[var8], var3[var8]);
            }
          }

          // add this block to the node --> block map
          for (int var8 = 0; var8 < var5; var8++) {
            Type1 var14 = var3[var8];
            Type2<Type0> var11 = var15.method1(var14);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var15.method0(var14, var11);
            }
            var11.method2(var0);
          }
        }, long var0 = var1[var2].method0();, for (int var0 = 0; var0 < var1; var0++) {
      Type0 var2 = var3[var0].method0(var4);
      Type1 var5 = var2.method1(var3[var0]);
      var6.method2(var5);
    }, for (int var0 = 0; var0 < var1.method0(); var0++) {
      var2[var0] = var1.method1(var0).var3; 
      var4[var0] = var1.method1(var0).var4;
      var5[var0] = var1.method1(var0).var5;
    }, for (int var0 = 0; var0 < var1; var0++) {
            var2 += var3[var0].method0();

            // each split can be a maximum of maxSize
            long var4 = var3[var0].method0();
            long var5 = var3[var0].method1();
            long var6 = 0;
            do {
              if (var7 == 0) {
                var6 = var4;
              } else {
                if (var4 > var7 && var4 < 2 * var7) {
                  // if remainder is between max and 2*max - then
                  // instead of creating splits of size max, left-max we
                  // create splits of size left/2 and left/2. This is
                  // a heuristic to avoid creating really really small
                  // splits.
                  var6 = var4 / 2;
                } else {
                  var6 = var8.method2(var7, var4);
                }
              }
              Type0 var9 = new Type0(var10, var5,
                  var6, var3[var0].method3(), var3[var0]
                      .method4());
              var4 -= var6;
              var5 += var6;

              var11.method5(var9);
            } while (var4 > 0);
          }, for (int var0 = 0; var0 < var1; var0++) {
          var2[var0] = (new Type0(var3[var0], 
                              var4)).method0();
        }, for (int var0 = 0; var0 < var1; var0++) {
        this.var2[var0] = (new Type0(var3[var0])).method0();
      }, long var0 = 0;, Type0<Type1> var0 = new Type0<Type1>(
              var1);, var0 = var1.method0(var2, var3), method0(var0, var1.method1(new Type0[var1.method2()]), 
                    var2, var3, var4, var5), method0(var0, var1.method1(new Type0[var1.method2()]), 
                  var2, var3, var4, var5), Type0[] var0 = new Type0[var1.method0()];, long[] var0 = new long[var1.method0()];, var0 < var1.method0(), var0 = var1.method0(new Type0[var1.method1()]), this.var0 = 0, Type0[] var0 = var1.method0(var2, 0, 
                                                           var2.method1());, var0 = var1.method0(), var0.method0(var1, 0, 
                                                           var1.method1()), var0[0] = new Type0(var1, 0, var2, var3[0]
              .method0(), var3[0].method1()), Type0[] var0 = var1.method0(
                     method1(var2).method2(new Type1[0]));, Type0 var0 = new Type0(var1, var2, 
                                   var3, var4.method0(new Type1[0]));, var0 += var1[var2].method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, var1, var2, 
                          var3, var4)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(new Type0(var1)), var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0(var1, var2,
                  var3, var4[var5].method0(), var4[var5]
                      .method1());, for (Type0 var0 : var1) {
          // add this block to the block --> node locations map
          var2.method0(var0, var3);

          // For blocks that do not have host/rack information,
          // assign to default  rack.
          Type1[] var4 = null;
          if (var5 == 0) {
            var4 = new Type1[]{var6};
          } else {
            var4 = var7;
          }

          // add this block to the rack --> block map
          for (int var8 = 0; var8 < var9; var8++) {
            Type1 var10 = var4[var8];
            Type2<Type0> var11 = var12.method1(var10);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var12.method0(var10, var11);
            }
            var11.method2(var0);
            if (!var4[var8].method3(var6)) {
              // Add this host to rackToNodes map
              method4(var13, var4[var8], var3[var8]);
            }
          }

          // add this block to the node --> block map
          for (int var8 = 0; var8 < var5; var8++) {
            Type1 var14 = var3[var8];
            Type2<Type0> var11 = var15.method1(var14);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var15.method0(var14, var11);
            }
            var11.method2(var0);
          }
        }, long var0 = var1[var2].method0();, for (int var0 = 0; var0 < var1; var0++) {
      Type0 var2 = var3[var0].method0(var4);
      Type1 var5 = var2.method1(var3[var0]);
      var6.method2(var5);
    }, for (int var0 = 0; var0 < var1.method0(); var0++) {
      var2[var0] = var1.method1(var0).var3; 
      var4[var0] = var1.method1(var0).var4;
      var5[var0] = var1.method1(var0).var5;
    }, for (int var0 = 0; var0 < var1; var0++) {
            var2 += var3[var0].method0();

            // each split can be a maximum of maxSize
            long var4 = var3[var0].method0();
            long var5 = var3[var0].method1();
            long var6 = 0;
            do {
              if (var7 == 0) {
                var6 = var4;
              } else {
                if (var4 > var7 && var4 < 2 * var7) {
                  // if remainder is between max and 2*max - then
                  // instead of creating splits of size max, left-max we
                  // create splits of size left/2 and left/2. This is
                  // a heuristic to avoid creating really really small
                  // splits.
                  var6 = var4 / 2;
                } else {
                  var6 = var8.method2(var7, var4);
                }
              }
              Type0 var9 = new Type0(var10, var5,
                  var6, var3[var0].method3(), var3[var0]
                      .method4());
              var4 -= var6;
              var5 += var6;

              var11.method5(var9);
            } while (var4 > 0);
          }, for (int var0 = 0; var0 < var1; var0++) {
          var2[var0] = (new Type0(var3[var0], 
                              var4)).method0();
        }, for (int var0 = 0; var0 < var1; var0++) {
        this.var2[var0] = (new Type0(var3[var0])).method0();
      }, long var0 = 0;, Type0<Type1> var0 = new Type0<Type1>(
              var1);, var0 = var1.method0(var2, var3), method0(var0, var1.method1(new Type0[var1.method2()]), 
                    var2, var3, var4, var5), method0(var0, var1.method1(new Type0[var1.method2()]), 
                  var2, var3, var4, var5), Type0[] var0 = new Type0[var1.method0()];, long[] var0 = new long[var1.method0()];, var0 < var1.method0(), var0 = var1.method0(new Type0[var1.method1()]), this.var0 = 0, Type0[] var0 = var1.method0(var2, 0, 
                                                           var2.method1());, var0 = var1.method0(), var0.method0(var1, 0, 
                                                           var1.method1()), var0[0] = new Type0(var1, 0, var2, var3[0]
              .method0(), var3[0].method1()), Type0[] var0 = var1.method0(
                     method1(var2).method2(new Type1[0]));, Type0 var0 = new Type0(var1, var2, 
                                   var3, var4.method0(new Type1[0]));, var0 += var1[var2].method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, var1, var2, 
                          var3, var4)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(new Type0(var1)), var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0(var1, var2,
                  var3, var4[var5].method0(), var4[var5]
                      .method1());, for (Type0 var0 : var1) {
          // add this block to the block --> node locations map
          var2.method0(var0, var3);

          // For blocks that do not have host/rack information,
          // assign to default  rack.
          Type1[] var4 = null;
          if (var5 == 0) {
            var4 = new Type1[]{var6};
          } else {
            var4 = var7;
          }

          // add this block to the rack --> block map
          for (int var8 = 0; var8 < var9; var8++) {
            Type1 var10 = var4[var8];
            Type2<Type0> var11 = var12.method1(var10);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var12.method0(var10, var11);
            }
            var11.method2(var0);
            if (!var4[var8].method3(var6)) {
              // Add this host to rackToNodes map
              method4(var13, var4[var8], var3[var8]);
            }
          }

          // add this block to the node --> block map
          for (int var8 = 0; var8 < var5; var8++) {
            Type1 var14 = var3[var8];
            Type2<Type0> var11 = var15.method1(var14);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var15.method0(var14, var11);
            }
            var11.method2(var0);
          }
        }, long var0 = var1[var2].method0();, for (int var0 = 0; var0 < var1; var0++) {
      Type0 var2 = var3[var0].method0(var4);
      Type1 var5 = var2.method1(var3[var0]);
      var6.method2(var5);
    }, for (int var0 = 0; var0 < var1.method0(); var0++) {
      var2[var0] = var1.method1(var0).var3; 
      var4[var0] = var1.method1(var0).var4;
      var5[var0] = var1.method1(var0).var5;
    }, for (int var0 = 0; var0 < var1; var0++) {
            var2 += var3[var0].method0();

            // each split can be a maximum of maxSize
            long var4 = var3[var0].method0();
            long var5 = var3[var0].method1();
            long var6 = 0;
            do {
              if (var7 == 0) {
                var6 = var4;
              } else {
                if (var4 > var7 && var4 < 2 * var7) {
                  // if remainder is between max and 2*max - then
                  // instead of creating splits of size max, left-max we
                  // create splits of size left/2 and left/2. This is
                  // a heuristic to avoid creating really really small
                  // splits.
                  var6 = var4 / 2;
                } else {
                  var6 = var8.method2(var7, var4);
                }
              }
              Type0 var9 = new Type0(var10, var5,
                  var6, var3[var0].method3(), var3[var0]
                      .method4());
              var4 -= var6;
              var5 += var6;

              var11.method5(var9);
            } while (var4 > 0);
          }, for (int var0 = 0; var0 < var1; var0++) {
          var2[var0] = (new Type0(var3[var0], 
                              var4)).method0();
        }, for (int var0 = 0; var0 < var1; var0++) {
        this.var2[var0] = (new Type0(var3[var0])).method0();
      }, long var0 = 0;, Type0<Type1> var0 = new Type0<Type1>(
              var1);, var0 = var1.method0(var2, var3), method0(var0, var1.method1(new Type0[var1.method2()]), 
                    var2, var3, var4, var5), method0(var0, var1.method1(new Type0[var1.method2()]), 
                  var2, var3, var4, var5), Type0[] var0 = new Type0[var1.method0()];, long[] var0 = new long[var1.method0()];, var0 < var1.method0(), var0 = var1.method0(new Type0[var1.method1()]), this.var0 = 0, Type0[] var0 = var1.method0(var2, 0, 
                                                           var2.method1());, var0 = var1.method0(), var0.method0(var1, 0, 
                                                           var1.method1()), var0[0] = new Type0(var1, 0, var2, var3[0]
              .method0(), var3[0].method1()), Type0[] var0 = var1.method0(
                     method1(var2).method2(new Type1[0]));, Type0 var0 = new Type0(var1, var2, 
                                   var3, var4.method0(new Type1[0]));, var0 += var1[var2].method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, var1, var2, 
                          var3, var4)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(new Type0(var1)), var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0(var1, var2,
                  var3, var4[var5].method0(), var4[var5]
                      .method1());, for (Type0 var0 : var1) {
          // add this block to the block --> node locations map
          var2.method0(var0, var3);

          // For blocks that do not have host/rack information,
          // assign to default  rack.
          Type1[] var4 = null;
          if (var5 == 0) {
            var4 = new Type1[]{var6};
          } else {
            var4 = var7;
          }

          // add this block to the rack --> block map
          for (int var8 = 0; var8 < var9; var8++) {
            Type1 var10 = var4[var8];
            Type2<Type0> var11 = var12.method1(var10);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var12.method0(var10, var11);
            }
            var11.method2(var0);
            if (!var4[var8].method3(var6)) {
              // Add this host to rackToNodes map
              method4(var13, var4[var8], var3[var8]);
            }
          }

          // add this block to the node --> block map
          for (int var8 = 0; var8 < var5; var8++) {
            Type1 var14 = var3[var8];
            Type2<Type0> var11 = var15.method1(var14);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var15.method0(var14, var11);
            }
            var11.method2(var0);
          }
        }, long var0 = var1[var2].method0();, for (int var0 = 0; var0 < var1; var0++) {
      Type0 var2 = var3[var0].method0(var4);
      Type1 var5 = var2.method1(var3[var0]);
      var6.method2(var5);
    }, for (int var0 = 0; var0 < var1.method0(); var0++) {
      var2[var0] = var1.method1(var0).var3; 
      var4[var0] = var1.method1(var0).var4;
      var5[var0] = var1.method1(var0).var5;
    }, for (int var0 = 0; var0 < var1; var0++) {
            var2 += var3[var0].method0();

            // each split can be a maximum of maxSize
            long var4 = var3[var0].method0();
            long var5 = var3[var0].method1();
            long var6 = 0;
            do {
              if (var7 == 0) {
                var6 = var4;
              } else {
                if (var4 > var7 && var4 < 2 * var7) {
                  // if remainder is between max and 2*max - then
                  // instead of creating splits of size max, left-max we
                  // create splits of size left/2 and left/2. This is
                  // a heuristic to avoid creating really really small
                  // splits.
                  var6 = var4 / 2;
                } else {
                  var6 = var8.method2(var7, var4);
                }
              }
              Type0 var9 = new Type0(var10, var5,
                  var6, var3[var0].method3(), var3[var0]
                      .method4());
              var4 -= var6;
              var5 += var6;

              var11.method5(var9);
            } while (var4 > 0);
          }, for (int var0 = 0; var0 < var1; var0++) {
          var2[var0] = (new Type0(var3[var0], 
                              var4)).method0();
        }, for (int var0 = 0; var0 < var1; var0++) {
        this.var2[var0] = (new Type0(var3[var0])).method0();
      }, long var0 = 0;, Type0<Type1> var0 = new Type0<Type1>(
              var1);, var0 = var1.method0(var2, var3), method0(var0, var1.method1(new Type0[var1.method2()]), 
                    var2, var3, var4, var5), method0(var0, var1.method1(new Type0[var1.method2()]), 
                  var2, var3, var4, var5), Type0[] var0 = new Type0[var1.method0()];, long[] var0 = new long[var1.method0()];, var0 < var1.method0(), var0 = var1.method0(new Type0[var1.method1()]), this.var0 = 0, Type0[] var0 = var1.method0(var2, 0, 
                                                           var2.method1());, var0 = var1.method0(), var0.method0(var1, 0, 
                                                           var1.method1()), var0[0] = new Type0(var1, 0, var2, var3[0]
              .method0(), var3[0].method1()), Type0[] var0 = var1.method0(
                     method1(var2).method2(new Type1[0]));, Type0 var0 = new Type0(var1, var2, 
                                   var3, var4.method0(new Type1[0]));, var0 += var1[var2].method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
method0(var0, var1, var2, 
                          var3, var4)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(new Type0(var1)), var0.method0(var1), Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0(var1, var2,
                  var3, var4[var5].method0(), var4[var5]
                      .method1());, for (Type0 var0 : var1) {
          // add this block to the block --> node locations map
          var2.method0(var0, var3);

          // For blocks that do not have host/rack information,
          // assign to default  rack.
          Type1[] var4 = null;
          if (var5 == 0) {
            var4 = new Type1[]{var6};
          } else {
            var4 = var7;
          }

          // add this block to the rack --> block map
          for (int var8 = 0; var8 < var9; var8++) {
            Type1 var10 = var4[var8];
            Type2<Type0> var11 = var12.method1(var10);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var12.method0(var10, var11);
            }
            var11.method2(var0);
            if (!var4[var8].method3(var6)) {
              // Add this host to rackToNodes map
              method4(var13, var4[var8], var3[var8]);
            }
          }

          // add this block to the node --> block map
          for (int var8 = 0; var8 < var5; var8++) {
            Type1 var14 = var3[var8];
            Type2<Type0> var11 = var15.method1(var14);
            if (var11 == null) {
              var11 = new Type3<Type0>();
              var15.method0(var14, var11);
            }
            var11.method2(var0);
          }
        }, long var0 = var1[var2].method0();, for (int var0 = 0; var0 < var1; var0++) {
      Type0 var2 = var3[var0].method0(var4);
      Type1 var5 = var2.method1(var3[var0]);
      var6.method2(var5);
    }, for (int var0 = 0; var0 < var1.method0(); var0++) {
      var2[var0] = var1.method1(var0).var3; 
      var4[var0] = var1.method1(var0).var4;
      var5[var0] = var1.method1(var0).var5;
    }, for (int var0 = 0; var0 < var1; var0++) {
            var2 += var3[var0].method0();

            // each split can be a maximum of maxSize
            long var4 = var3[var0].method0();
            long var5 = var3[var0].method1();
            long var6 = 0;
            do {
              if (var7 == 0) {
                var6 = var4;
              } else {
                if (var4 > var7 && var4 < 2 * var7) {
                  // if remainder is between max and 2*max - then
                  // instead of creating splits of size max, left-max we
                  // create splits of size left/2 and left/2. This is
                  // a heuristic to avoid creating really really small
                  // splits.
                  var6 = var4 / 2;
                } else {
                  var6 = var8.method2(var7, var4);
                }
              }
              Type0 var9 = new Type0(var10, var5,
                  var6, var3[var0].method3(), var3[var0]
                      .method4());
              var4 -= var6;
              var5 += var6;

              var11.method5(var9);
            } while (var4 > 0);
          }, for (int var0 = 0; var0 < var1; var0++) {
          var2[var0] = (new Type0(var3[var0], 
                              var4)).method0();
        }, for (int var0 = 0; var0 < var1; var0++) {
        this.var2[var0] = (new Type0(var3[var0])).method0();
      }, long var0 = 0;, Type0<Type1> var0 = new Type0<Type1>(
              var1);, var0 = var1.method0(var2, var3), method0(var0, var1.method1(new Type0[var1.method2()]), 
                    var2, var3, var4, var5), method0(var0, var1.method1(new Type0[var1.method2()]), 
                  var2, var3, var4, var5), Type0[] var0 = new Type0[var1.method0()];, long[] var0 = new long[var1.method0()];, var0 < var1.method0(), var0 = var1.method0(new Type0[var1.method1()]), this.var0 = 0, Type0[] var0 = var1.method0(var2, 0, 
                                                           var2.method1());, var0 = var1.method0(), var0.method0(var1, 0, 
                                                           var1.method1()), var0[0] = new Type0(var1, 0, var2, var3[0]
              .method0(), var3[0].method1()), Type0[] var0 = var1.method0(
                     method1(var2).method2(new Type1[0]));, Type0 var0 = new Type0(var1, var2, 
                                   var3, var4.method0(new Type1[0]));, var0 += var1[var2].method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(var1), var0.method0(var1.method1(var2)), final Type0 var0 = var1[var2 - 1];, var0.method0(var1.method1() + 1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return true;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1), var0.method0(str0), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, var0.method0(), var0.method0(var1), var0.method0(Type0.class), Type0<Type1> var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return true;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[var0.method0(str0 + var1), var0.method0(str0), this.var0 = var0, Type0 var0 = var1.method0(var2);, Type0 var0 = new Type0();, var0 == ((Type0) var1).var0, var0.method0(), var0.method0(var1), var0.method0(Type0.class), Type0<Type1> var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===Candidate===
-change-
insert
long var0 = method0();
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0()]
-rightRS-
[this.var0.method0(), var0.method0(), method0()]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = method0(var1, new Type0(new Type1(var2)))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = new Type0(var1[var2], var3);, Type0 var0 = new Type0(((Type1)var1).method0().method1())
          .method2();, var0.method0(var1 + str0), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1, new Type0(new Type1(var2)))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = new Type0(var1[var2], var3);, Type0 var0 = new Type0(((Type1)var1).method0().method1())
          .method2();, var0.method0(var1 + str0), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1, new Type0(new Type1(var2)))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = new Type0(var1[var2], var3);, Type0 var0 = new Type0(((Type1)var1).method0().method1())
          .method2();, var0.method0(var1 + str0), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1, new Type0(new Type1(var2)))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = new Type0(var1[var2], var3);, Type0 var0 = new Type0(((Type1)var1).method0().method1())
          .method2();, var0.method0(var1 + str0), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = method0(var1, new Type0(new Type1(var2)))
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = new Type0(var1[var2], var3);, Type0 var0 = new Type0(((Type1)var1).method0().method1())
          .method2();, var0.method0(var1 + str0), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
return var0 >0;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[method0().method1(var0, null), method0(), method0() != null, var0 = method0(method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
break;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
break;
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[Type0 var0 = var1;]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = 1
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = true
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (c.isNaN) {
  return isNaN;
}
 else {
  return (real == c.real) && (imaginary == c.imaginary);
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:IfStatement{statements},L:IfStatement{statements},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:InstanceofExpression{rightOperand},L:SimpleName{leftOperand},R:
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = true;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = new Type0(var1), this.method0().method1(var0.method0())]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
      var0.method1(str0 + var1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var0.method1(str0 + var1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var0.method1(str0 + var1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var0.method1(str0 + var1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[method0()]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var0.method1(str0 + var1);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[method0()]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===Candidate===
-change-
insert
if (var0 <= 0) {
          // EOS:
          return -1;
        }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[this.var0 = var0, long var0 = var1 + var2;, this.var0 = var1 + var2, var0 + var1 < var2, int var0 = var1;]
-rightRS-
[int var0 = var1.method0(var2);, int var0 = method0(var1, 0, 1);, int var0 = method0(var1, 0, var2);, var0 = var1.method0(var2, var3, var4), var0.method0(var1 + var2 , var3, var4, var5), long var0;, this.var0 = var0, int var0 = var1;]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(null)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0) var1.method0();, var0.method0() == var1, new Type0(str0 + var0.method0() +
                                        str1 + var0.method1())]
result:fail
===Candidate===
-change-
insert
var0.method0(null)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0) var1.method0();, var0.method0() == var1, new Type0(str0 + var0.method0() +
                                        str1 + var0.method1())]
result:fail
===Candidate===
-change-
insert
var0.method0(null)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0) var1.method0();, var0.method0() == var1, new Type0(str0 + var0.method0() +
                                        str1 + var0.method1())]
result:fail
===Candidate===
-change-
insert
var0.method0(null)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0) var1.method0();, var0.method0() == var1, new Type0(str0 + var0.method0() +
                                        str1 + var0.method1())]
result:fail
===Candidate===
-change-
insert
var0.method0(null)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (Type0) var1.method0();, var0.method0() == var1, new Type0(str0 + var0.method0() +
                                        str1 + var0.method1())]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, var0.method0(var1.method1(), new Type0(var1)), var0.method0(var1.method1()), var0.method0(var1, var2.method1()), Type0 var0 = 
        var1.method0(var2.method1());, int var0 = var1.method0(var2) ? var1.method1(var2) : 0;, Type0 var0 =
          var1.method0(var2.method1());, var0.method0(var1), new Type0(var0.method0(var1))]
-rightRS-
[Type0 var0 = var1.method0(
            var2.method1(), var3);, method0(var0,
          var1.method1(
              var0.method2(),
              var2),
              var3), method0(var0,
          var1.method1(
              var0.method2(),
              str0),
          var2), method0(var0,
          var1.method1(
              var0.method2(),
              var2),
          var3), method0(var0.method1(), var1), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      method0(var0.method1(), var2);
    }, var0.method0(var1, var2.method1())]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, var0.method0(var1.method1(), new Type0(var1)), var0.method0(var1.method1()), var0.method0(var1, var2.method1()), Type0 var0 = 
        var1.method0(var2.method1());, int var0 = var1.method0(var2) ? var1.method1(var2) : 0;, Type0 var0 =
          var1.method0(var2.method1());, var0.method0(var1), new Type0(var0.method0(var1))]
-rightRS-
[Type0 var0 = var1.method0(
            var2.method1(), var3);, method0(var0,
          var1.method1(
              var0.method2(),
              var2),
              var3), method0(var0,
          var1.method1(
              var0.method2(),
              str0),
          var2), method0(var0,
          var1.method1(
              var0.method2(),
              var2),
          var3), method0(var0.method1(), var1), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      method0(var0.method1(), var2);
    }, var0.method0(var1, var2.method1())]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, var0.method0(var1.method1(), new Type0(var1)), var0.method0(var1.method1()), var0.method0(var1, var2.method1()), Type0 var0 = 
        var1.method0(var2.method1());, int var0 = var1.method0(var2) ? var1.method1(var2) : 0;, Type0 var0 =
          var1.method0(var2.method1());, var0.method0(var1), new Type0(var0.method0(var1))]
-rightRS-
[Type0 var0 = var1.method0(
            var2.method1(), var3);, method0(var0,
          var1.method1(
              var0.method2(),
              var2),
              var3), method0(var0,
          var1.method1(
              var0.method2(),
              str0),
          var2), method0(var0,
          var1.method1(
              var0.method2(),
              var2),
          var3), method0(var0.method1(), var1), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      method0(var0.method1(), var2);
    }, var0.method0(var1, var2.method1())]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, var0.method0(var1.method1(), new Type0(var1)), var0.method0(var1.method1()), var0.method0(var1, var2.method1()), Type0 var0 = 
        var1.method0(var2.method1());, int var0 = var1.method0(var2) ? var1.method1(var2) : 0;, Type0 var0 =
          var1.method0(var2.method1());, var0.method0(var1), new Type0(var0.method0(var1))]
-rightRS-
[Type0 var0 = var1.method0(
            var2.method1(), var3);, method0(var0,
          var1.method1(
              var0.method2(),
              var2),
              var3), method0(var0,
          var1.method1(
              var0.method2(),
              str0),
          var2), method0(var0,
          var1.method1(
              var0.method2(),
              var2),
          var3), method0(var0.method1(), var1), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      method0(var0.method1(), var2);
    }, var0.method0(var1, var2.method1())]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, var0.method0(var1.method1(), new Type0(var1)), var0.method0(var1.method1()), var0.method0(var1, var2.method1()), Type0 var0 = 
        var1.method0(var2.method1());, int var0 = var1.method0(var2) ? var1.method1(var2) : 0;, Type0 var0 =
          var1.method0(var2.method1());, var0.method0(var1), new Type0(var0.method0(var1))]
-rightRS-
[Type0 var0 = var1.method0(
            var2.method1(), var3);, method0(var0,
          var1.method1(
              var0.method2(),
              var2),
              var3), method0(var0,
          var1.method1(
              var0.method2(),
              str0),
          var2), method0(var0,
          var1.method1(
              var0.method2(),
              var2),
          var3), method0(var0.method1(), var1), Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      method0(var0.method1(), var2);
    }, var0.method0(var1, var2.method1())]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2);
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2);
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2);
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2);
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var0.method1(str0 + var1 + str1 + var2);
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return -1;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(var1)]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return -1;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(var1)]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return -1;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(var1)]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return -1;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(var1)]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===Candidate===
-change-
insert
if (!var0.method0(var1)) {
        return -1;
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[var0.method0(var1)]
-rightRS-
[var0.method0(var1,
              var2.method1(var3).method2(),
              var2.method1(var4).method2()), var0.method0(var1), Type0 var0 = var1.method0().method1(var2);, Type0<Type1> var0 =
        var1.method0(var2.method1());, Type0<Type1> var0 =
        var1.method0(var2);, var0.method0(0), Type0<Type1> var0 = var1.method0(var2);, var0.method0(var1,
                    var2.method1())]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
        var1.method1(new Type0(method2(var0.method3(),
            var2.method4())));
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[final long var0 = var1.method0(var2);, this.var0 = var1, fsn.dir]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var1.method1(new Type0(method2(var0.method3(),
            var2.method4())));
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[final long var0 = var1.method0(var2);, this.var0 = var1, fsn.dir]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var1.method1(new Type0(method2(var0.method3(),
            var2.method4())));
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[final long var0 = var1.method0(var2);, this.var0 = var1, fsn.dir]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var1.method1(new Type0(method2(var0.method3(),
            var2.method4())));
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[final long var0 = var1.method0(var2);, this.var0 = var1, fsn.dir]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
        var1.method1(new Type0(method2(var0.method3(),
            var2.method4())));
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[final long var0 = var1.method0(var2);, this.var0 = var1, fsn.dir]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 != null) {
        var2 += var0.method0();
      }
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 != null) {
        var2 += var0.method0();
      }
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 != null) {
        var2 += var0.method0();
      }
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===Candidate===
-change-
insert
for (Type0 var0 : var1) {
      if (var0 != null) {
        var2 += var0.method0();
      }
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0(var1, method1()), method0(null), method0(true, false), method0(false, false), method0(true, true) * method1(), var0.method0(str0 + method1(var1)), this instanceof Type0?
        var0.method0((Type0)this)
        : method1(null), method0() * method1(), var0.method0(var1, var2 * method1())]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0) {
        return var1.method0() || var1.method1() || var1.method2();
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[for (Type0 var0 : var1) {
	  Type1 var2 = var0.method0().method1();
	  if (var2.method2(
	        Type2.class.method3())
	    || var2.method2(
                Type3.class.method3())) {
	    return true;
	  }
	  if (var3.method2(var4)) {
	    if (var2.method2(
		Type4.class.method3())) {
	      return true;
	    }
	  }
	  if (var3.method2(var5)) {
	    if (var2.method2(
		Type4.class.method3())
              || var2.method2(
  		Type5.class.method3())) {
	      return true;
	    }
	  }
	}, var0.method0(str0), var0.method0(str0) || var0.method0(str1)
	    || var0.method0(str2)
	    || var0.method0(str3), var0.method0(
	        Type0.class.method1())
	    || var0.method0(
                Type1.class.method1()), var0.method0(var1), var0.method0(
		Type0.class.method1()), var0.method0(
		Type0.class.method1())
              || var0.method0(
  		Type1.class.method1()), var0 != null && var1.method0(var0[0]), Type0 var0 = var1.method0().method1();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0) {
        return var1.method0() || var1.method1() || var1.method2();
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[for (Type0 var0 : var1) {
	  Type1 var2 = var0.method0().method1();
	  if (var2.method2(
	        Type2.class.method3())
	    || var2.method2(
                Type3.class.method3())) {
	    return true;
	  }
	  if (var3.method2(var4)) {
	    if (var2.method2(
		Type4.class.method3())) {
	      return true;
	    }
	  }
	  if (var3.method2(var5)) {
	    if (var2.method2(
		Type4.class.method3())
              || var2.method2(
  		Type5.class.method3())) {
	      return true;
	    }
	  }
	}, var0.method0(str0), var0.method0(str0) || var0.method0(str1)
	    || var0.method0(str2)
	    || var0.method0(str3), var0.method0(
	        Type0.class.method1())
	    || var0.method0(
                Type1.class.method1()), var0.method0(var1), var0.method0(
		Type0.class.method1()), var0.method0(
		Type0.class.method1())
              || var0.method0(
  		Type1.class.method1()), var0 != null && var1.method0(var0[0]), Type0 var0 = var1.method0().method1();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0) {
        return var1.method0() || var1.method1() || var1.method2();
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[for (Type0 var0 : var1) {
	  Type1 var2 = var0.method0().method1();
	  if (var2.method2(
	        Type2.class.method3())
	    || var2.method2(
                Type3.class.method3())) {
	    return true;
	  }
	  if (var3.method2(var4)) {
	    if (var2.method2(
		Type4.class.method3())) {
	      return true;
	    }
	  }
	  if (var3.method2(var5)) {
	    if (var2.method2(
		Type4.class.method3())
              || var2.method2(
  		Type5.class.method3())) {
	      return true;
	    }
	  }
	}, var0.method0(str0), var0.method0(str0) || var0.method0(str1)
	    || var0.method0(str2)
	    || var0.method0(str3), var0.method0(
	        Type0.class.method1())
	    || var0.method0(
                Type1.class.method1()), var0.method0(var1), var0.method0(
		Type0.class.method1()), var0.method0(
		Type0.class.method1())
              || var0.method0(
  		Type1.class.method1()), var0 != null && var1.method0(var0[0]), Type0 var0 = var1.method0().method1();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0) {
        return var1.method0() || var1.method1() || var1.method2();
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[for (Type0 var0 : var1) {
	  Type1 var2 = var0.method0().method1();
	  if (var2.method2(
	        Type2.class.method3())
	    || var2.method2(
                Type3.class.method3())) {
	    return true;
	  }
	  if (var3.method2(var4)) {
	    if (var2.method2(
		Type4.class.method3())) {
	      return true;
	    }
	  }
	  if (var3.method2(var5)) {
	    if (var2.method2(
		Type4.class.method3())
              || var2.method2(
  		Type5.class.method3())) {
	      return true;
	    }
	  }
	}, var0.method0(str0), var0.method0(str0) || var0.method0(str1)
	    || var0.method0(str2)
	    || var0.method0(str3), var0.method0(
	        Type0.class.method1())
	    || var0.method0(
                Type1.class.method1()), var0.method0(var1), var0.method0(
		Type0.class.method1()), var0.method0(
		Type0.class.method1())
              || var0.method0(
  		Type1.class.method1()), var0 != null && var1.method0(var0[0]), Type0 var0 = var1.method0().method1();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0) {
        return var1.method0() || var1.method1() || var1.method2();
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[for (Type0 var0 : var1) {
	  Type1 var2 = var0.method0().method1();
	  if (var2.method2(
	        Type2.class.method3())
	    || var2.method2(
                Type3.class.method3())) {
	    return true;
	  }
	  if (var3.method2(var4)) {
	    if (var2.method2(
		Type4.class.method3())) {
	      return true;
	    }
	  }
	  if (var3.method2(var5)) {
	    if (var2.method2(
		Type4.class.method3())
              || var2.method2(
  		Type5.class.method3())) {
	      return true;
	    }
	  }
	}, var0.method0(str0), var0.method0(str0) || var0.method0(str1)
	    || var0.method0(str2)
	    || var0.method0(str3), var0.method0(
	        Type0.class.method1())
	    || var0.method0(
                Type1.class.method1()), var0.method0(var1), var0.method0(
		Type0.class.method1()), var0.method0(
		Type0.class.method1())
              || var0.method0(
  		Type1.class.method1()), var0 != null && var1.method0(var0[0]), Type0 var0 = var1.method0().method1();, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[byte[][] var0 = new byte[var1][];, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, var0.method0(var1.method1(var2, false), var2
          ), final Type0 var0 = var1.method0();, var0.method0() == null, Type0 var0 = new Type0(
                                 var1,
                                 var2,var3,
                                 var4, var5, var6, 
                                 var7, var8);, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[byte[][] var0 = new byte[var1][];, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, var0.method0(var1.method1(var2, false), var2
          ), final Type0 var0 = var1.method0();, var0.method0() == null, Type0 var0 = new Type0(
                                 var1,
                                 var2,var3,
                                 var4, var5, var6, 
                                 var7, var8);, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[byte[][] var0 = new byte[var1][];, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, var0.method0(var1.method1(var2, false), var2
          ), final Type0 var0 = var1.method0();, var0.method0() == null, Type0 var0 = new Type0(
                                 var1,
                                 var2,var3,
                                 var4, var5, var6, 
                                 var7, var8);, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[byte[][] var0 = new byte[var1][];, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, var0.method0(var1.method1(var2, false), var2
          ), final Type0 var0 = var1.method0();, var0.method0() == null, Type0 var0 = new Type0(
                                 var1,
                                 var2,var3,
                                 var4, var5, var6, 
                                 var7, var8);, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);]
result:fail
===Candidate===
-change-
insert
final Type0[] var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:ReturnStatement{statements}
-leftRS-
[]
-rightRS-
[byte[][] var0 = new byte[var1][];, final Type0 var0 = 
          var1.method0(var2.method1(), var3);, var0.method0(var1.method1(var2, false), var2
          ), final Type0 var0 = var1.method0();, var0.method0() == null, Type0 var0 = new Type0(
                                 var1,
                                 var2,var3,
                                 var4, var5, var6, 
                                 var7, var8);, final Type0 var0 = var1.method0(
          method1(var2), false);, final Type0 var0 = var1.method0(var2, false);, final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, var3);, Type0 var0 = var1.method0(var2,
          var3, false);]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (other instanceof Complex) {
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
      var1.method1(0);  // replication
      var1.method2(0);   // modification time
      var1.method2(0);   // access time
      var1.method2(0);   // preferred block size
      var1.method3(-2);   // # of blocks
      var2.method4(var1, ((Type0)var0).method5());
      var3.method6(var0.method7());
      var4.method8(var1, var0.method9(),
                             var0.method10(),
                             var3);      
    } else {
      Type1 var5 = (Type1)var0;
      var1.method1(var5.method11());
      var1.method2(var5.method12());
      var1.method2(var5.method13());
      var1.method2(var5.method14());
      Type2[] var6 = var5.method15();
      var1.method3(var7);
      for (Type2 var8 : var6)
        var8.method8(var1);
      var3.method6(var5.method7());
      var4.method8(var1, var5.method9(),
                             var5.method10(),
                             var3);
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(var0.method1(), var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        var2.method1(str0, var3);
        var2.method1(str1, var4);
        return var5;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  Complex c=(Complex)other;
  if (c.isNaN) {
    return isNaN;
  }
 else {
    return (real == c.real) && (imaginary == c.imaginary);
  }
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
other
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
other
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{extendedOperands},L:SimpleName{rightOperand},R:
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
other
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===Candidate===
-change-
insert
try {
      var0.method0(var1, var2);
    } catch (Type0 var3) {
      throw new Type0(str0 + var4 + str1 +
                            str2 + var1 +
                            str3 + var2, var3);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2
          + str2 + var3 + str1 + var4), var0.method0(str0 + var1 + str1 + var2
          + str2 + var1.method1()), var0.method0(str0 + var1 + str1 +
          var2 + str2 + var3), new Type0(var0, var1.method0(), var2), new Type0(new Type1(var0), var0.method0()), int var0 = (var1 == null) ? 0 : var2;, method0(var0).method1(), var0.method0() != var1.method1(), new Type0(str0
          + var0 + str1 + var0.method0() + str2 + var1), var0.method0() == 0, var0 < var1, Type0 var0 = new Type1(var1, 
            var2.method0(), var3, var4, var2.method1());, var0.method0(str0 + var1 + str1
            + var2.method1() + str2 + var3.method2()), var0.method0(var1.method1()), var0.method0(), Type0 var0 = new Type0(var1.method0(var2), var3.method1());, Type0 var0 = var1.method0();]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = this.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===Candidate===
-change-
insert
if (var0) {
        throw new Type0(var1.method0());
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[!var0.method0().method1(var1.method0()), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0), var0.method0()]
-rightRS-
[!var0.method0(var1, var2), new Type0(var0.method0()), Type0 var0 = new Type0(var1.method0());, new Type0(var0.method0(),
            str0)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == null) {
      throw new Type1(str0 + var1 + 
                                       str1 +
                                       str2);
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), Type0 var0 = var1.method0().method1();, var0.method0() < var1, Type0 var0 = new Type0(
        var1.method0(var2.method1(), var3 + var4), var5);, int var0;, Type0 var0 = method0();]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1 + str1
          + str2 + var2.method1()), var0.method0(str0 + var1.method1() 
          + str1 
          + var1.method2() + str2), var0.method0(var1 + str0), var0.method0() == null || !var0.method0().method1().method2(var1), !var0.method0(var1, var2.method1()), !var0.method0(var1) && !var0.method0(var2), Type0 var0 = var1.method0().method1();, var0.method0().method1(), int var0;, Type0 var0 = method0();, var0.method0(), var0.method0() == null]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===Candidate===
-change-
insert
final Type0 var0 =
          var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(str0);, var0.method0(str0)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===Candidate===
-change-
insert
final Type0 var0;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0 var0 = var1;, method0(var0, null, var1)]
-rightRS-
[var0.method0(var1, var2, var3), this.var0 = var0, var0 = var1.method0(var2), Type0 var0 = var1.method0(var2);, var0 = var1.method0(), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3()), var0.method0()
          .method1(var1)
          .method2(var2), var0.method0(var1.method1()), var0.method0(var1), var0.method0() != var1, var0.method0() == var1, var0.method0(var1, var2, var3,
            var4, null, var5), var0.method0(null, null, null, null, 
          var1, null), Type0 var0 = var1;, Type0 var0 = null;, new Type0(var0).method0(var1, var2,
              var3, var4, var5, var6, var7,
              var8, var9, var10, var11,
              var12), Type0 var0 =
                var1.method0(
                    var2, var3,
                    var4
                        .method1(var5.method2()));, Type0 var0 =
            var1.method0(
                var2, var3,
                var4
                    .method1(var5.method2()));, var0.method0(var1.method1(
            str0 +
            str1,
            var2.method2(), var3.method3(), (var4 != null)
          )), var0.method0(str0 + var1 + str1 + var2 + str2
        + var3), var0.method0(str0 + var1 +
                       str1 +
                       str2 +
                       var2), var0.method0(var1 + str0 +
                     var2 + str1 + var3 +
                     str2, var4), var0.method0(str0 + var1 +
                   str1 +
                   var2), var0.method0(str0 + var1 + str1 + var2 + str2
            + var3 + str3 + var1.method1()), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2.method1()), Type0 var0 = (var1 == null) ? null : var2;, Type0 var0 = var1.method0(var2
            .method1());, Type0 var0 = 
      var1.method0(var2.method1());, var0 = var1, this.var0 = var1.method0(), Type0 var0 = var1.method0(var2,
              var3);, this.var0 = var1.method0().var0, var0.method0(), var0.method0() || var1 != var2, var0 = var1[0].method0(var2), final Type0 var0 = var1.method0(var2);, Type0 var0 = var1.method0(
              var2.method1(var3));, Type0 var0 =
              var1.method0(var2.method1(var3));, Type0 var0 = var1.method0(
          var2.method1(var3));, final Type0 var0 = new Type0(var1);, int var0 = var1 + 
                      (var2 * var3);, var0.method0(var1 + str0 +
                      var2 + str1 + var3 + str2 + var4), var0.method0(var1 + str0 + var2 + str1 +
            var3, var4), var0.method0(str0), var0.method0(str0 + var1.method1() +
                str1 +
                str2), var0 = new Type0(var1, var2, 
            var3.method0(),
            var3.method1(),
            var4, var5, var6, var7,
            var8, var9, var10, var11,
            var12), Type0 var0 = str0 + var1.method0() + str1 +
          str2 + var2.method1() + str3 +
          str4;, Type0 var0 = str0 + var1.method0() +
          str1 + var2.method1() + str2 +
          str3;, var0.method0(str0 + var1.method1()), int var0 = var1
              + (var2 * var3);, Type0 var0 = str0;, var0.method0().method1(var1), var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4()
              .method5(var3), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3()
          .method4(var3), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11()
        .method12(var9), final Type0 var0 = new Type0(
        new Type1(
            method0(),
            var1));, var0.method0(str0
          + var1.method1()), var0.method0(str0, var1), var0.method0(str0 + var1 + str1 + var2 
      		+ str2 + var3 + str3 + var4
      		+ str4 + var5 + str5 + var6 + str6
          + str7 + var7.method1(var8)
          + str8 + var9 + str9 + var10
          ), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3), var0.method0(str0 + var1.method1() +
                str1 + var1.method2()), var0.method0(str0 + var1), var0.method0(str0 + var1 + str1 + var2
            + str2 + var3 + str3 + var4), var0.method0(str0 + var1.method1()
            + str1 + var2 + str2), method0(var0, null, var1), try {
      if (var0.method0() == null) {
        throw new Type0(str0 +
            str1);
      }
      var1 = var2.method1(var3, var4, var5);
      var6.method2(var7);
      var6.method3(var8);
    } catch (Type1 var9) {
      var6.method2(var10);
      var6.method3(var8);
      var6.method4(var9.method5());
    } catch (Type2 var9) {
      var6.method2(var10);
      var6.method4(var9.method5());
    } catch (Type3 var9) {
      var6.method2(var11);
      var6.method4(var9.method5());
    } catch (Type0 var9) {
      var6.method2(var12);
      var6.method4(var9.method5());
    }, try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }, try {
          int var0 = var1
              + (var2 * var3);
          int var4 = var5 + 
                      (var6 * var3);
          var7.method0(var8, var9, var0);
          var8.method1(var0);
          var8.method2(var10);
          
          Type0 var11 = var7.method3(var8,
              var4);
          Type1 var12 = var7.method4(var8);
          if (var13) {
            Type2 var14 =
                var15.method5(
                    var11, var12,
                    var16
                        .method6(var17.method7()));
            
            var11 = var18;
            var12 = var19;
          }
          var20 = new Type3(new Type4(var11,
              var21));
          var22 = new Type5(var12);

          new Type6(var20).method8(var23, var24,
              var25, var26, var27, var28, var29,
              var30, var31, var32, var33,
              var34);

          var20.method9();

          // read connect ack (only for clients, not for replication req)
          if (var35) {
            Type7 var36 =
              var37.method10(var38.method11(var22));
            var39 = var36.method12();
            var40 = var36.method13();
            if (var41.method14() || var39 != var42) {
              var41.method15(str0 + var3 +
                       str1 +
                       str2 +
                       var40);
            }
          }

        } catch (Type8 var43) {
          if (var35) {
            var37.method16()
              .method17(var44)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method18(var26[0].method19())
              .method20()
              .method21(var45);
            var45.method9();
          }
          var46.method22(var20);
          var20 = null;
          var46.method22(var22);
          var22 = null;
          var46.method23(var8);
          var8 = null;
          if (var35) {
            var41.method24(var47 + str3 +
                      var17 + str4 + var48 + str5 + var43);
            throw var43;
          } else {
            var41.method15(var47 + str6 +
                     var17 + str4 + var48 +
                     str7, var43);
          }
        }, try {
        var0.method0(var1, null, var2,
            var3);
      } catch (Type0 var4) {
        var5.method1(str0 + var6
            + str1 + var2 + str2
            + var4.method2());
        method3(var7, str3);
        return;
      }, try {
        var0.method0(var1, null, var2, var3);
      } catch(Type0 var4) {
        try {
          if (var5) {
            Type1 var6 = var7.method1()
              .method2(var8);
            if (var3 == var9) {
              Type2 var10 = 
                var11.method3(var2.method4());
              // NB: Unconditionally using the xfer addr w/o hostname
              var6.method5(var10.method6());
            }
            var6.method7().method8(var12);
            var12.method9();
          }
          var13.method10(str0 + var14
              + str1 + var15
              + str2 + var4.method11());
          throw var4;
        } finally {
          var16.method12(var12);
        }
      }, Type0 var0 = var1.method0()
      .method1(var2)
      .method2(var3)
      .method3();, method0(var0, var1, method1()), Type0 var0 = var1.method0();, var0.method0()
              .method1(var1), var0.method0()
          .method1(var1), var0.method0()
        .method1(var1), Type0 var0 = var1.method0()
      .method1(var2);, Type0 var0 = var1.method0()
              .method1(var2);, var0.method0()
              .method1(var1)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method2(var2[0].method3())
              .method4(), var0.method0()
          .method1(var1)
          .method2(var2)
          .method3(), var0.method0()
        .method1(var1)
        .method2(var2.method0()             
          .method3(var3)
          .method4(var4)
          .method5(var5.method6(var6.method7()))
          .method8(var7.method9(var8.method10()))
          )
        .method11(), Type0 var0 = var1.method0()
      .method1(var2.method2(var3.method3()))
      .method4(var3.method5())
      .method6();, var0.method0(var1, var2), Type0 var0 = method0();, method0(var0, new Type0(method1())), final Type0 var0 = new Type0(
        method0());, Type0 var0 = var1.method0(var2,
          var3);, try {
          Type0 var0 = var1.method0(
              var2.method1(var3));
          if (!var0.method2()) {
            var4.method3(str0 + var5.method4() +
                str1 +
                str2);
            var6.method5(var7);
          }
        } catch (Type1 var8) {
          var4.method6(str3, var8);
          var6.method5(var7);
        }, try {
      try {
        var0 = new Type0(var1, var2, var3,
            true, false, var4, var5, var6,
            var7);
      } catch(Type1 var8) {
        Type2 var9 = str0 + var1 + str1 + var8; 
        var10.method0(var9);
        method1(var11, var9);
        throw var8;
      }
      
      // send op status
      method2(var0, new Type3(method3()));

      long var12 = var0.method4(var13, var14, null); // send data

      if (var0.method5()) {
        // If we sent the entire range, then we should expect the client
        // to respond with a Status enum.
        try {
          Type4 var15 = var16.method6(
              var17.method7(var18));
          if (!var15.method8()) {
            var10.method9(str2 + var19.method10() +
                str3 +
                str4);
            var20.method11(var13);
          }
        } catch (Type1 var21) {
          var10.method12(str5, var21);
          var20.method11(var13);
        }
      } else {
        var20.method11(var13);
      }
      var22.method13((int) var12);
      var22.method14();
    } catch ( Type5 var23 ) {
      if (var10.method15()) {
        var10.method16(var24 + str6 + var1 + str7 +
            var25, var23);
      }
      // Its ok for remote side to close the connection anytime.
      var22.method14();
      var20.method11(var13);
    } catch ( Type1 var21 ) {
      /* What exactly should we do here?
       * Earlier version shutdown() datanode if there is disk error.
       */
      var10.method9(var24 + str8 + var1 + str7
          + var25, var21);
      throw var21;
    } finally {
      var20.method11(var0);
    }, try {
      if (var0 || 
          var1 != var2) {
        // open a block receiver
        var3 = new Type0(var4, var5, 
            var6.method0(),
            var6.method1(),
            var1, var7, var8, var9,
            var10, var11, var12, var13,
            var14);
      } else {
        var15.method2(var4, var7, var8);
      }

      //
      // Connect to downstream machine, if appropriate
      //
      if (var16 > 0) {
        Type1 var17 = null;
        // Connect to backup machine
        var18 = var19[0].method3(var20);
        if (var21.method4()) {
          var21.method5(str0 + var18);
        }
        var17 = var22.method6(var18);
        var23 = var12.method7();
        try {
          int var24 = var25
              + (var26 * var16);
          int var27 = var28 + 
                      (var29 * var16);
          var22.method8(var23, var17, var24);
          var23.method9(var24);
          var23.method10(var30);
          
          Type2 var31 = var22.method11(var23,
              var27);
          Type3 var32 = var22.method12(var23);
          if (var33) {
            Type4 var34 =
                var35.method13(
                    var31, var32,
                    var36
                        .method14(var4.method15()));
            
            var31 = var37;
            var32 = var38;
          }
          var39 = new Type5(new Type6(var31,
              var40));
          var41 = new Type7(var32);

          new Type8(var39).method16(var42, var43,
              var10, var19, var11, var1, var44,
              var8, var9, var7, var13,
              var14);

          var39.method17();

          // read connect ack (only for clients, not for replication req)
          if (var45) {
            Type9 var46 =
              var47.method18(var48.method19(var41));
            var49 = var46.method20();
            var50 = var46.method21();
            if (var21.method4() || var49 != var51) {
              var21.method22(str1 + var16 +
                       str2 +
                       str3 +
                       var50);
            }
          }

        } catch (Type10 var52) {
          if (var45) {
            var47.method23()
              .method24(var53)
               // NB: Unconditionally using the xfer addr w/o hostname
              .method25(var19[0].method3())
              .method26()
              .method27(var54);
            var54.method17();
          }
          var55.method28(var39);
          var39 = null;
          var55.method28(var41);
          var41 = null;
          var55.method29(var23);
          var23 = null;
          if (var45) {
            var21.method30(var12 + str4 +
                      var4 + str5 + var18 + str6 + var52);
            throw var52;
          } else {
            var21.method22(var12 + str7 +
                     var4 + str5 + var18 +
                     str8, var52);
          }
        }
      }

      // send connect-ack to source for clients and not transfer-RBW/Finalized
      if (var45 && !var56) {
        if (var21.method4() || var49 != var51) {
          var21.method22(str1 + var16 +
                   str9 +
                   var50);
        }
        var47.method23()
          .method24(var49)
          .method25(var50)
          .method26()
          .method27(var54);
        var54.method17();
      }

      // receive the block and mirror to the next target
      if (var3 != null) {
        Type11 var57 = (var23 == null) ? null : var18;
        var3.method31(var39, var41, var54,
            var57, null, var19);

        // send close-ack for transfer-RBW/Finalized 
        if (var56) {
          if (var21.method32()) {
            var21.method33(str10);
          }
          method34(var51, null, var54);
        }
      }

      // update its generation stamp
      if (var45 && 
          var1 == var2) {
        var4.method35(var7);
        var4.method36(var8);
      }
      
      // if this write is for a replication request or recovering
      // a failed close for client, then confirm block. For other client-writes,
      // the block is finalized in the PacketResponder.
      if (var0 ||
          var1 == var2) {
        var12.method37(var4, var58);
        var21.method22(str11 + var4 + str12 + var59 + str13
            + var60 + str14 + var4.method38());
      }

      
    } catch (Type10 var61) {
      var21.method22(str15 + var4 + str16 + var61);
      throw var61;
    } finally {
      // close all opened streams
      var55.method28(var39);
      var55.method28(var41);
      var55.method28(var54);
      var55.method29(var23);
      var55.method28(var3);
    }, try {
      // check if the block exists or not
      var0 = new Type0(var1, 0, -1, false, false, true, var2, 
          null, var3.method0());

      // set up response stream
      Type1 var4 = method1();
      var5 = new Type2(new Type3(
          var4, var6));

      // send status first
      method2(var0, var5);
      // send block content to the target
      long var7 = var0.method3(var5, var4, 
                                        var8);

      var9.method4((int) var7);
      var9.method5();
      
      var10.method6(str0 + var1 + str1 + var11.method7());
    } catch (Type4 var12) {
      var13 = false;
      var10.method6(str2 + var1 + str3 + var12);
      throw var12;
    } finally {
      var8.method8();
      if (var13) {
        try {
          // send one last byte to indicate that the resource is cleaned.
          var5.method9('d');
        } catch (Type4 var14) {
        }
      }
      var15.method10(var5);
      var15.method10(var0);
    }, try {
      // get the output stream to the proxy
      final Type0 var0 = var1.method0(var2);
      if (var3.method1()) {
        var3.method2(str0 + var0);
      }
      Type1 var4 = var5.method3(var0);
      var6 = var7.method4();
      var5.method5(var6, var4, var8);
      var6.method6(var8);

      Type2 var9 = var5.method7(var6,
          var10);
      Type3 var11 = var5.method8(var6);
      if (var12) {
        Type4 var13 =
            var14.method9(
                var9, var11,
                var15
                    .method10(var16.method11()));
        var9 = var17;
        var11 = var18;
      }
      
      var19 = new Type5(new Type6(var9, 
          var20));
      var21 = new Type7(new Type8(var11,
          var22));

      /* send request to the proxy */
      new Type9(var19).method12(var16, var23);

      // receive the response from the proxy
      
      Type10 var24 = var25.method13(
          var26.method14(var21));

      if (var24.method15() != var27) {
        if (var24.method15() == var28) {
          throw new Type11(str1 + var16 + str2
              + var6.method16()
              + str3);
        }
        throw new Type11(str1 + var16 + str2
            + var6.method16() + str4);
      }
      
      // get checksum info about the block we're copying
      Type12 var29 = var24.method17();
      Type13 var30 = var31.method18(
          var29.method19());
      // open a block receiver and check if the block does not exist
      var32 = new Type14(
          var16, var21, var6.method16().method20(),
          var6.method21().method20(),
          null, 0, 0, 0, str5, null, var7, var30,
          var33.method22());

      // receive a block
      var32.method23(null, null, null, null, 
          var34, null);
                    
      // notify name node
      var7.method24(var16, var35);

      var3.method25(str6 + var16 + str2 + var36.method26());
      
    } catch (Type11 var37) {
      var38 = var39;
      var40 = str7 + var16 + str8 + var37; 
      var3.method25(var40);
      throw var37;
    } finally {
      // receive the last byte that indicates the proxy released its thread resource
      if (var38 == var27) {
        try {
          var21.method27();
        } catch (Type11 var41) {
        }
      }
      
      // now release the thread resource
      var34.method28();
      
      // send response back
      try {
        method29(var38, var40);
      } catch (Type11 var37) {
        var3.method30(str9 + var36.method26());
      }
      var42.method31(var19);
      var42.method31(var32);
      var42.method31(var21);
    }, try {
        method0(var0, var1);
      } catch (Type0 var2) {
        var3.method1(str0 + var4.method2());
      }]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(str0
          + var1 + str1
          + var2 + str2
          + var3.method1())
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(-2);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[Type0<Type1> var0 = new Type2<Type1>();, final Type0 var0 = var1.method0();, this.var0 = var0, method0(var0, null), method0(var0.method1(), var1), method0(var0, var1)]
-rightRS-
[var0.method0(str0
          + var1), var0.method0(str0
          + str1 + var1
          + str2), var0.method0(str0
            + str1), var0.method0(str0, var1), this.var0 = var0, Type0 var0;, var0.method0(str0
            + var1.method1())]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===Candidate===
-change-
insert
boolean var0 =
              var1.method0(var2, false);
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1, this.var0, Type0 var0 = new Type0(new Type1());, var0 > 0 && 
        var1.method0(str0, false), var0 == 0 && 
           var1.method0(str0, false), boolean var0 = var1.method0(
        var2, true);, var0.method0(var1, false)
        || var0.method0(var2, false), this.var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), new Type1(var2
              .method3(), var2.method4(), var2.method5(),
              var2.method6(), var2.method7(), var2
                  .method8()))), var0.method0(var1), var0.method0().method1(
          new Type0(var1.method2(), var2.method3())), var0.method0().method1(var1), ((Type0<Type1>)var0.method0(var1.method1())).method2(var1), ((Type0<Type1>)var0).method0(var1), ((Type0<Type1>) var0).method0(var1)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===Candidate===
-change-
insert
Type0 var0 = method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3), var0.method0()]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0[var1 - 2].method0(var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() == var1) {
      method1(var0, str0);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[method0(var0, str0)]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != null) {
      var1.method1(method2(var0.method0()));
    }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(Type0.method1(var1.method2())), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5())), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)), Type0 var0 = method0(var1.method1(), var2);, new Type0(var0.method0(), var0.method1(),
        var1, method2(var0.method3())), var0[var1] = method0(var2[var1]), var0.method0()
        .method1(method2(var1.method3())), new Type0(method0(var0.method1()),
        var1.method2(new Type1[var1.method3()]),
        var2.method2(new Type1[var2.method3()]),
        method4(var3, var2.method3())), var0.method0(method1(var1)), var0[var1++] = method0(var2), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(method7(var1.method8())), new Type0(var0.method0(),
        var0.method1(), var0.method2(),
        method3(var0.method4()), method5(var0.method6())), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)), Type0 var0 = Type1.method0(var1.method1(), var2);, var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)), new Type0(Type1.method0(var0.method1()),
          var0.method2()), Type0 var0 = method0(var1.method1().method2());, Type0[] var0 = method0(var1.method1().method2());, new Type0(
        Type1.method0(var0.method1()),
        var0.method2() ? var0.method3() : null , 
        var0.method4(),  var0.method5(),  var0.method6(),
        var0.method7(), var0.method8(), var0.method9(),
        var0.method10(), var0.method11(),
        Type1.method0(var0.method12())), method0(var0), method0(var0, 0), var0.method0(method1(var1[var2])), var0[var1] = method0(var2.method1(var1)), var0
        .method0(Type0.method1((Type1)var1)), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19())), new Type0(
        method0(var0.method1()),
        method2(var0.method3())), var0.method0(var1, Type0.method1(var2)), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4())), var0[var1] = Type0.method0(var2.method1(var1)), var0.method0(Type0.method1((Type1) var1)), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3())), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5())), new Type0(Type1.method0(var0.method1()),
        var1, Type1.method0(var0.method2()), var0.method3()), Type0.method0(var0.method1()), var0.method0()
        .method1(Type0.method2(var1.method3())), var0.method0(Type0.method1(var1)), var0.method0(Type0.method1(var1[var2])), var0.method0(method1(var1.method2())), var0.method0(method1(var1.method2()))
           .method3(method1(var1.method4())), var0.method0()
          .method1(Type0.method2(var1[var2])), var0.method0(var1)
          .method1(
              Type0.method2((Type1) var2)), var0
          .method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1)
          .method1(Type0.method2((Type1) var2)), var0.method0(var1).
        method1(Type0.method2((Type1) var2)), new Type0(Type1.method0(var0.method1())), new Type0(
        Type1.method0(var0.method1()),
        var1,
        var0.method2() ? var0.method3() : null), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1)), var0.method0(Type0.method1(var1.method2(var2))), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), new Type0(
        var0.method0(), var0.method1(), 
        var0.method2(), (short) var0.method3(),
        var0.method4(),
        var0.method5(),
        var0.method6(),
        Type1.method7(var0.method8())), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17())), new Type0(
        var0.method0(), var0.method1().method2(var1), 
        var0.method3(), var0.method4(),
        var0.method5(), var0.method6(),
        Type1.method7(var0.method8()), var0.method9(), var0.method10(), 
        var0.method1().method2(var2) ? 
            var0.method11().method12() : null,
        var0.method13().method12(),
        var0.method14()? var0.method15(): var3,
        var0.method16() ? Type1.method7(var0.method17()) : null,
        var0.method18() ? var0.method19() : -1), new Type0(
        var0.method0(),
        var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4(),
        var0.method5(),
        var0.method6().method7(),
        var0.method8(),
        var0.method9(),
        var1.method10(),
        var1.method11(),
        var1.method12().method7()), var0.method0().
      method1(var1.method2()).
      method3(var2).
      method4(var1.method5()).
      method6(var1.method7()).
      method8(var1.method9()).
      method10(var1.method11()).
      method12(Type0.method13(var1.method14())), Type0 var0 = method0(var1.method1());, var0[var1] = Type0.method0(var2[var1]), new Type0( 
        var0.method0() ? new Type1[0] 
          : Type2.method1(
              var0.method2(new Type3[var0.method3()])),
        var1.method4()), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))), new Type0(
        var0.method0() ?
            method1(var0.method2()) :
            new Type1(var0.method3()),
        var0.method4(), var0.method5(), var0.method6(), var0.method7(),
        var0.method8()), Type0 var0 = method0(var1);, Type0 var0 = Type1.method0(var1.method1());, var0.method0().
        method1(method2(var1.method3())), new Type0(Type1.method0(var0.method1()),
        var0.method2()), var0.method0() != null]
-rightRS-
[var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6())), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()), new Type0(
        var0.method0(), var0.method1(),
        Type1.method2(var0.method3()),
        var0.method4() ? Type1.method5(var0.method6()) : null,
        var0.method7()), var0.method0(var1.method1()), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(var1.method8()).method9(), var0.method0()
        .method1(var1.method2()).method3(method4(var1.method5()))
        .method6(var1.method7())
        .method8(method4((Type0) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8() != null ? var1.method8() : str0)
        .method9(var1.method10())
        .method11(var1.method12())
        .method13(var1.method14()).method15(), var0.method0().method1(var1.method2())
        .method3(var1.method4()).method5(var1.method6())
        .method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var2.method5(var1.method6()))
        .method7(var2.method5(var1.method8()))
        .method9(method10(var1.method11()))
        .method12(), var0.method0(), var0.method0().method1(var1.method2())
        .method3(var2).method4(var1.method5()).method6(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(Type0.method8((Type1) var1)).method9(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(var1.method5()).method6(), var0.method0().method1(var1.method2())
          .method3(var2)
          .method4(method5((Type0) var1)).method6(), var0.method0()
        .method1(var1)
        .method2(var2.method3()).method4(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6()).
      method7(var1.method8()).
      method9(), var0.method0().method1(var1)
        .method2(var2.method3()).method4(), var0
        .method0(Type0.method1((Type1)var1))
        .method2(var1.method3())
        .method4(var1.method5())
        .method6(var1.method7())
        .method8(var1.method9())
        .method10(var1.method11())
        .method12(var1.method13())
        .method14(var1.method15())
        .method16(var1.method17())
        .method18(Type0.method1(var1.method19()))
        .method20(), var0.method0()
        .method1(method2(var1.method3()))
        .method4(method5(var1.method6()))
        .method7(), var0.method0(Type0.method1(var1.method2()))
        .method3(Type0.method1(var1.method4()))
        .method5(var1.method6()).method7(var1.method8()).method9(), var0.method0().
              method1(var1.method2(var2.method3())).
              method4(var1.method2(var2.method5())).
              method6(var2.method7().method8()).
              method9(var2.method10().method8()).method11(), var0.method0(Type0.method1((Type1) var1))
        .method2(Type0.method1(var1.method3()))
        .method4(Type0.method1(var1.method5()))
        .method6(var1.method7()).method8(), var0.method0()
        .method1(var1.method2()).method3(), var0.method0()
        .method1(Type0.method2(var1.method3())).method4(), var0[var1] = var2.method0()
          .method1(Type0.method2(var3[var1])).method3(), var0[var1] = var2.method0()
          .method1(var3.method2(var4[var1])).method3(), var0.method0(var1)
          .method1(), var0.method0(Type0.method1(var1.method2()))
        .method3(), var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(0)
        .method6(Type0.method7((Type1)var1))
        .method8(var1.method9()).method10(), var0.method0(var1.method1())
        .method2(var1.method3())
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().
      method1(var1.method2()).
      method3(var1.method4()).
      method5(var1.method6())
      .method7(var1.method8())
      .method9(var1.method10())
      .method11(var1.method12())
      .method13(var1.method14())
      .method15(Type0.method16(var1.method17()))
      .method18(), var0.method0().method1(var1.method2()).method3(), var0.method0().
        method1(var1.method2(
            Type0.method3(var2.method4()))).
        method5(var2.method6()).
        method7(), var0.method0()
        .method1(var1.method2())
        .method3(), var0.method0()
        .method1(method2(var1))
        .method3(var1.method4())
        .method5(var1.method6())
        .method7(var1.method8())
        .method9(), var0.method0().
        method1(var1.method2(var2.method3())).
        method4(var2.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(var1.method6()).
        method7(var1.method8()).
        method9(var1.method10()).
        method11(var1.method12()).
        method13(), var0.method0()
        .method1(Type0.method2(var1.method3()))
        .method4(Type0.method5(var1.method6()))
        .method7(var1.method8()).method9(), var0.method0().method1(var1.method2())
        .method3(var1.method4())
        .method5(var1.method6()).method7(), var0.method0()
        .method1(var1).method2(), Type0 var0 = var1.method0()
        .method1(var2.method2())
        .method3(var2.method4())
        .method5(var2.method6())
        .method7(var3).method8();, var0.method0()
        .method1(var1.method2())
        .method3(var1.method4())
        .method5(), new Type0().method0(var0.method1()).method2(var0.method3())
        .method4(var0.method5())
        .method6(method7(var0.method8())).method9(), Type0 var0 = var1.method0().method1(var2.method2())
        .method3(var2.method4()).method5(var2.method6())
        .method7(method8(var2.method9())).method10();, var0.method0().method1(var1).method2(), var0.method0().
        method1(method2(var1.method3())).
        method4(var1.method5()).
        method6(), var0.method0().
        method1(var1.method2()).
        method3(var1.method4()).
        method5(), Type0 var0 = Type1.method0((Type2)var1);, Type0 var0 = new Type0(Type1.method0(var1.method1()), var2,
        var3, var4, var1.method2(), var1.method3(),
        var5.method4(new Type2[0]));, method0(var0.method1(var1)), Type0 var0 = var1
        .method0();, Type0 var0 = var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2());, Type0 var0 = 
        var1.method0();, Type0 var0 = 
     var1.method0().
      method1(var2.method2()).
      method3(var3).
      method4(var2.method5()).
      method6(var2.method7()).
      method8(var2.method9()).
      method10(var2.method11()).
      method12(Type1.method13(var2.method14())).
      method15(var2.method16()).
      method17(var2.method18()).
      method19(var2.method20()).
      method21(var2.method22()).
      method23(var4.method24(var2.method25()));, Type0 var0 = 
        var1
        .method0().method1(var2)
        .method2(var3).method3(var4)
        .method4(var5);, Type0 var0 =
      var1.method0();, Type0 var0 = var1.method0()
        .method1(var2.method2()).method3(var2.method4())
        .method5(var2.method6()).method7(var2.method8())
        .method9(var2.method10().method11())
        .method12(method13(var2.method10()));, Type0 var0 = var1
        .method0().method1(var2)
        .method2(var3);, Type0 var0 =
        new Type0();, Type0 var0 = new Type0();, var0.method0(var1.method1())
        .method2(var1.method3())]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
if (var0 != null && !var0.method0(var1)) {
        if (var0.method0(str0)) { 
          var2.method1(str1);
        } else {
          var2.method1(str0 + var0);
          var2.method1(str0 + var0 + str1);
        }
      }
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[var0.method0(str0), var0.method0(var1), var0.method0(var1 + str0), Type0 var0 = str0 + var1;, var0.method0().method1(var1)]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
super.var0(var1, var2)
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:IfStatement{statements},R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[final double var0 = var1.method0();, Type0 var0 = (Type0)var1;]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
        throw new Type0(str0);
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0();, var0.method0(str0, method1(var1)), var0.method0(str0, method1(var1), var2.method2()), var0 = new Type0(var0) {

          @Override
          public Type1 method0() {
            return var1.method1();
          }

          @Override
          public Type1 method2() {
            return var1.method3();
          }

          @Override
          public Type2 method4() {
            return (var1 != var2) ? var1 : null;
          }
        }, for (Type0 var0 : var1) {
        if (var0.method0().method1(var2)) {
          var3 = var0.method2();
          try {
            var3 = var4.method3(var3);
          } catch (Type1 var5) {
            throw new Type2(var5);
          }
          break;
        }
      }, Type0 var0 = method0(var1);, Type0 var0 = method0(str0);, Type0 var0 = new Type0(var1, var2);, final Type0 var0 = var1;, Type0 var0 = var1.method0(var2.method1());, Type0 var0 = null;, var0.method0(var1), var0.method0(), !var0.method0().method1(var1.method0()), var0.method0(var1, var2), Type0 var0 = (Type0) var1;, var0 = var1.method0(var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return var0;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = super.var1();, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      // Get the namenodes for all the configured nameServiceIds
      for (Type0 var0 : var1) {
        Type0 var2 = method0(null, var0, var3, var4);
        if (var2 == null) {
          return null;
        }
        var5.method1(var6.method2(var2));
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(null)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
        method0(var1, (Type0)var0);
      } else if (var0 instanceof Type1) {
        var2 = (Type1)var0;
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var0, for (Type0 var0 : var1) {
        method0(var2, new Type1(var0), var3);
      }, for (Type0 var0 : var1) {
      method0(var2, var0, var3);
    }, Type0 var0 = var1.method0();, Type0 var0 = var1;, Type0 var0 = null;, Type0 var0 = method0();, Type0 var0;, var0 = var1.method0(var2.method1()), var0 = var1.method0(var2), var0 = var1.method0((Type0)var2), var0.method0(), ((Type0)var0).method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0 = true;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[final Type0[] var0 = var1.method0(
            var2.method1());, Type0 var0 = null;, final int var0 = method0(var1[var2],
              var3, var4, var5, var6, var7,
              var8, var9);, for (int var0 = 0; var0 < var1.method0(var2.method1(), var3); var0++) {
        Type0 var4 = var2.method2(var0);
        // Choose a single node which is local to favoredNode.
        // 'results' is updated within chooseLocalNode
        final Type1 var5 = method3(var4,
            var6, var7, 
            method4(var8.method1(), var3)[1],
            var8, var9, var10);
        if (var5 == null) {
          var11.method5(str0 + var12
              + str1 + var4); 
          continue;
        }
        var6.method6(var5.method7());
      }, for (int var0 = 0; var0 < var1; var0++) {
          var2.method0(var3[var0]);
        }, int var0;, for(int var0 = var1 + 1; var0 < var2; var0++) {
          int var3 = var4.method0(var5,
              var6[var0].method1());
          if (var7>var3) {
            var7 = var3;
            var8 = var6[var0];
            var9 = var0;
          }
        }, int var0 = var1.method0(
        var2, var3);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
          var0.method0(str0 + var1 + 
              str1);
          var2 = false;
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[boolean var0 = true;, !var0.method0(), var0 < var1
              || var2.method0(), var0.method0(str0 + var1 
                + str1
                + str2 + var2
                + str3 
                + var3.method1()), scheduledRequests.reduces, assignedRequests.reduces, Type0<Type1, Type2> var0 = var1 == 0 ? var2
            : var3;, var0.method0(str0 + var1), var0.method0(str0+var1), var0.method0(var1), var0.method0(str0 + var1.method1()), var0.method0(str0 +
              str1 + 
            var1), var0.method0(str0), var0.method0(str0 +
          str1 + var1), var0.method0(str0 + var1 +
        str1 + var2 +
        str2 + var3 +
        str3 + var4 + 
        str4 + var5 +
        str5 + var6), var0.method0(str0 + var1
                + str1
                + var2), var0.method0(str0+var1.method1()+str1), var0.method0(str0
                + str1+var1
                +str2 + var2), var0.method0(str0 
                  + var1), var0.method0(str0
                  + str1 + var1), var0.method0(str0 + var1 + str1
                    + str2 + var2 + str3
                    + var1.method1().method2()), var0.method0(str0 
                  + var1 + str1
                  + str2), var0.method0(str0 + var1 + str1), var0.method0(str0 + var1.method1().method2() + str1 + var2), var0.method0(var1 + str0 + var2 +
        str1 + var3 +
        str2 + var4 +
        str3 + var5 +
        str4 + var6 +
        str5 + var7 +
        str6 + var8 +
        str7 + var9 +
        str8 + var10 +
        str9 + var11 +
        str10 + var12), Type0 var0 = var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
        // no src checksum, so remove dst checksum
        var2 = var0.method1(var1, true); 
      }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0(var1, var2), boolean var0 = var1.method0(var2, var3);, var0 = var1.method0(var2, var3), var0 = var1.method0(var2, method1(var3)), this.var0 = var0, Type0 var0;, Type0 var0 = method0(var1);]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1)) {
          // ignore - we set home dir from config
          continue;
        } else {
          throw new Type0(
          str0+ 
          var0);
        }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[Type0 var0 = var1.method0(var2.method1());, var0 < var1, var0 < var1-1, Type0[] var0 = new Type0[var1];, var0 = var0.method0(var1.method1()), var0 <= 1, var0 < var1 - (var2 ? 0 : 1), var0 >= var1-1, var0< var1, final Type0 var0 = var1 + str0;, boolean var0 = false;]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[long var0 = var1.method0();, !method0(var0)]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0.method0()) {
                var0.method1().method2();
              }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[var0.method0().method1(), Type0 var0 = var1.method0();, var0.method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (method0(var0)) {
      // This isn't fatal - the client Watcher will re-join the election
      var1.method1(str0);
      return;
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[method0(), Type0 var0 = str0
        + var1.method0() + str1 + var2;, Type0 var0 = str0
        + var1.method0();]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
{ // check already performed on this class name
      var0 = var1.method0(var2);
      if (var0 == null) { // found the negative
        return null;
      }
    }
-context-
P:IfStatement{elseStatement},L:Block{thenStatement},R:
-leftRS-
[this.var0 = var1, this.var0 = var0, var0 = var1.method0(var2, true, var3), Type0 var0 = (Type0)var1.method0();, Type0<Type1, Type2<?>> var0;, var0 = var1.method0(
          new Type0<Type1, Type2<?>>()), Type0<?> var0 = var1.method0(var2);, Type0<?>[] var0 = new Type0<?>[var1];, Type0<?> var0 = method0(var1, var2);, Type0<?>[] var0 = method0(var1);, for (Type0<?> var0: var1) {
      if (!var2.method0(var0)) {
        throw new Type1(var0 + str0 + var2);
      }
      var3.method1((Type2)var4.method2(var0, this));
    }, var0.method0(var1, var2), var0.method0(this, null), var0.method0((Type0) var1.method1(), var2), var0.method0((Type0) var1.method1(), (Type0) var1.method2()), var0.method0(var1, var2.method1())]
-rightRS-
[]
result:fail
===buggy===
-statement-
{
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (!var0) {
      // Do not check quota if edits log is still being processed
      return;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===Candidate===
-change-
insert
if (var0==null) return;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1);, for(Type0 var0:var1) {
        if ((var2.method0(var0)+var3).
            method1(var4+var3)) {
          var5++;
        }
      }, method0(this), method0(this).method1(var0) ||
        (var1.method2()+var0).
        method3(method0(this)+var0), var0.method0().method1(method2(this)), new Type0(var0.method0()+str0
                +var0.method1()+str1
                +method2(this)), var0 = new Type0(var1, method0(this),
                                     this, this.method1()+1), Type0 var0 = method0(this);, new Type0(
        str0+var0.method0(var1)), var0.method0(str0+var1.method1(var2)), var0.method0(var1)+var2, var0.method0(var1.method1(var2.method2(var3, null)))]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===Candidate===
-change-
insert
final boolean var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[Type0 var0 =
            var1.method0(var2, var3,
              var4.method1(var5), 
              var4.method1(var6));, Type0 var0 =
              var1.method0(var2, var3,
                var4.method1(var5) &&
                var3.method2(), var4.method1(
                    var6) && var3.method2());, Type0 var0 =
          var1.method0(var2, var3,
            var4.method1(var5) && var3.method2(), 
            var4.method1(var6) && var3.method2());]
-rightRS-
[for (Type0 var0: var1.method0()) {
      Type1 var2 = var0.method1(method2());
      if (!var2.method3(var0)) {
        throw new Type2(var0 + str0);
      }
    }, for (Type0 var0: var1.method0()) {
        Type1 var2 = var0.method1(method2());
        var0 = method3(var0);

        Type2 var3 = var2.method4(var0);
        Type0 var4 = method5(var3, var1);

        Type2[] var5 = var2.method6(var0);
        boolean var6 = (var5 != null && var7 > 0);
        if (!var6 || var3.method7()) {
          Type3 var8 =
            var9.method8(var2, var3,
              var1.method9(var10), 
              var1.method9(var11));
          method10(var12, var8,
              var4, var1);
        }
        if (var6) {
          for (Type2 var13: var5) {
            if (var14.method11()) {
              var14.method12(str0 + var13.method13() + str1);
            }
            Type3 var15 =
              var9.method8(var2, var13,
                var1.method9(var10) &&
                var13.method7(), var1.method9(
                    var11) && var13.method7());
            method14(var12, var15,
                var4, var1);

            if (method15(var2, var13)) {
              if (var14.method11()) {
                var14.method12(str2 + var13.method13());
              }
              method16(var12, var13, var4,
                  var1);
            }
          }
        }
      }, var0 = method0(var0), var0.method0(var1.method1(), var1.method2())]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0().method1(var2)
        .method2(var3);
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0();, var0.method0(var1.method1(
        var2, var3, var4)), var0.method0() ? 
        var1.method1(var0.method2()) : null, var0
          .method0(var1.method1(null, var2).method1()), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0.method0(var1.method1(null, var2).method2()), var0.method0()
        .method1(var1.method2(var2)), var0.method0(var1)
        .method1(var2)
        .method2(var3.method3(var4.method4(var5))), var0.method0(var1.method1(var2)), var0.method0(var1.method1(null, var2.method2()).method3()), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3)), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5))), var0
        .method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var4.method5(var2.method3(var5)))
        .method6(var4.method5(var2.method3(var6))), var0.method0(var1.method1(null, var2)
          .method2()), var0.method0()
        .method1(var1)
        .method2(var2)
        .method3(var3.method4(var4)), var0.method0(var1.method1(null, var2)), var0
        .method0()
        .method1(var1.method2(var2)), var0.method0(
          var1.method1(null, var2).method2()), var0.method0().
        method1(var1.method2(var2)), var0.method0() ? var1.method1(var0.method2()) : null, var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4)), var0.method0()
        .method1(var1)
        .method2(var2.method3(var3))
        .method4(var2.method3(var4))
        .method5(var5.method6(var2.method3(var6)))]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===Candidate===
-change-
insert
var0.method0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0();, Type0 var0 = var1.method0();, var0.method0(str0
                         +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2+str2+var3), var0.method0(str0
          +var1+str1+var2), var0.method0(str0 + var1
          + str1 + var2
          + str2 + var3.method1(var4)
          + str3 + var3.method1(var5)
          + str4 + var6
          + str5 + var7), var0.method0(str0
          + var1 + str1 + var2), var0.method0(str0 + var1 + str1 + var2), var0.method0(str0 + var1
          + str1 + var2), var0.method0(str0 + var1), var0.method0(str0
           + str1 + var1.method1() + str2 + var2.method2()
           + str3), var0.method0(str0
          +str1+var1.method1()+str2+var2
          +str3)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===Candidate===
-change-
insert
method0(var0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = var1.method0(), var0.method0(var1, var2)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
assert method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
result:fail
===Candidate===
-change-
insert
assert method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[final Type0 var0 = var1.method0(var2, true);, final Type0 var0 = var1.method0(var2, false);, final Type0[] var0 = var1.method0();, Type0[] var0 = new Type0[var1];, Type0[] var0 = method0(var1);, Type0[] var0 = method0(var1, var2);, Type0[] var0 = var1.method0();, var0.method0()]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===Candidate===
-change-
insert
int var0 = var1.method0();
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[int var0 = var1.method0();, var0.method0(var1.method1()), var0.method0(str0 + var1), var0.method0(str0 + var1 +
                 str1 + var2), var0.method0(str0 + var1.method1() + str1 
          + (method2() - var2)/1000 + str2)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===Candidate===
-change-
insert
if (var0.method0() != var1) {
      method1(var0,
          str0
              + var1);
      return false;
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() || var0.method1(), for (Type0 var0:var1) {
      // add localMachine and related nodes to excludedNodes
      method0(var0, var2);
    }, for (Type0 var0 : var1) {
          var2.method0(var0);
        }, for(Type0 var0 : method0(var1, var2)) {
      long var3 = var0.method1();
      long var4 = var0.method2();
      if(var4 < var5) {
        var5 = var4;
        var6 = var0;
      }
      if (var7 > var3) {
        var7 = var3;
        var8 = var0;
      }
    }, method0(var0, str0)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
super.var0()
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[var0.method0(str0 + var1.method1()), var0.method0(str0 + var1
              + str1), var0.method0(str0 + var1), var0.method0(str0 + var1.method1(),
                  var2.method2()), var0.method0(str0), var0.method0(str0 + var1, var2.method1()), var0.method0(str0
              + var1.method1() + str1), var0.method0(str0, var1)]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0 = null
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===Candidate===
-change-
insert
if (var0.method0(var1.method1()) == null) {
        throw new Type0(
            str0
                + var1.method1());
      }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[var0.method0() == null, var0.method0(var1.method1(), var1), var0.method0(var1.method1()), Type0 var0 = var1.method0(var2.method1());, var0.method0(str0
          + var1.method1()), new Type0(str0+
          var0.method0()), Type0 var0 = var1.method0();, Type0 var0 = method0(var1.method1());, new Type0(var0.method0(), var1), final Type0 var0 = var1.method0(var2.method1(), var2.method2());, var0.method0(var1.method1(),
          var1.method2()), var0.method0(var1.method1().method2(), var1.method3()), Type0 var0 = new Type0(var1, Type1.this);, for (Type0 var0 : var1) {
        if (var0.method0(var2)) {
          return var0;
        }
      }, for (Type0 var0 : var1) {
        var0.method0(); //interrupts the threads
      }, for (Type0 var0 : var1) {
        var0.method0();
      }, for (Type0 var0 : var1) {
                  var0.method0();
                }, for (Type0 var0: this.method0()) {
        var0.method1();
      }, Type0 var0 = method0(var1);, Type0 var0 = var1.method0(var2);, for (Type0 var0 : var1) {
      if(var2.method0().method1(var3))
        return var2;
    }, for(Type0 var0: var1.method0()) {
      var0.method1(var2, var3);
    }, for(Type0 var0 : var1.method0()) {
      var0.method1(var2);
    }, for (Type0 var0 : var1.method0()) {
      if (var0 != null) {
        var2.method1(var0.method2().method3(), var0.method4());
      }
    }]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0 + var1
        + str1 + var2 + 
        str2 + var3)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = method0(var1, var2, var2);, Type0 var0 = method0(var1, var2, 
                                          var3);, var0.method0(str0 + var1 + str1 + var2), var0.method0(var1), method0(var0, var1, var2), method0(var0, var1, var2.method1()), Type0[] var0 = var1.method0(var2);, var0.method0(var1, true), !var0.method0(var1, true), for (Type0 var0 : var1) {
          method0(var2, var3, var0.method1());
        }, for (Type0 var0 : var1) {
          method0(var2, var3, var4, var0.method1());
        }, !var0.method0(var1, var2), !var0.method0(var1), method0(var0, var1, var2, var3.method1()), var0.method0(), new Type0(var0, var1.method0()), var0.method0(var1).method1()]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
boolean var0 = false;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int var0 = 0;
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
if (var0 instanceof Type0) {
      var0 = ((Type0) var0).method0();
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0()]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
var0.method0(var1)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===Candidate===
-change-
insert
var0.method0(str0)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[method0(var0, var1)]
-rightRS-
[try {
      var0.method0();
    } catch (Type0 var1) {
      throw new Type1(var1.method1());
    }, new Type0(var0.method0()), Type0 var0 = var1.method0().method1(var2);, var0.method0()]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===Candidate===
-change-
insert
if (!var0.method0().method1(var1)) {
      var2.method2(var3, var1);
    }
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[Type0 var0 = (var1.method0(str0)) ? var2 : new Type0(var2, var1);, var0 = method0(var0)]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===Candidate===
-change-
insert
method0(Type0.class)
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[method0(Type0.class), method0(Type0.class).method1(var0), method0(Type0.class).method1(var0.method2()), method0(Type0.class).method1(
          var0.method2()), this.var0 = var0]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===Candidate===
-change-
insert
Type0 var0 = var1.method0(var2.method1());
-context-
P:MethodDeclaration{statements},L:,R:IfStatement{statements}
-leftRS-
[]
-rightRS-
[this.var0 = new Type0(var1, var2, method0()), new Type0(var0.method0(method1(var1),
        var2, var3, var4, var5, var6,
        var7, var8, var9), method2())]
result:fail
===buggy===
-statement-
if (this == other) {
  return true;
}

-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
isNaN
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
isNaN
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
method0
to
method0
-context-
P:MethodInvocation{name},L:SimpleName{expression},R:SimpleName{arguments}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double.isNaN(imaginary)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double.isNaN(imaginary)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===Candidate===
-change-
insert
method0()
-context-
P:InfixExpression{extendedOperands},L:MethodInvocation{rightOperand},R:
-leftRS-
[!var0.method0()]
-rightRS-
[var0.method0(str0), var0.method0(str0 + var1, var2)]
result:fail
===buggy===
-statement-
Double.isNaN(real)
-leftRS-
[]
-rightRS-
[]
===buggy===
-statement-
Double.isNaN(real)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
var0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double.isNaN(real)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
-1
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Double.isNaN(real)
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
str0
-context-
P:InfixExpression{leftOperand},L:,R:MethodInvocation{leftOperand}
-leftRS-
[for (Type0 var0 : var1) {
        var2 += var0.method0() ? 1 : 0;
      }, var0.method0(str0
          + ((var1 - var2) / 1000)
          + str1
          + var3
          + str2
          + method1(var4, var5)
          + str3
          + method1(var6, var5)
          + str4
          + method1(var7, var5)
          + str5
          + method1(var8, var5)
          + str6
          + var9
          + str7
          + var10.method2((int)var11, 100) 
          + str8
          + var12 
          + str9 + str10
          + var13.method3() + str11 + var13.method4()+str12
          + str13
          + method1(var14, var5)
          + str14
          + var15
          + str15
          + var13.method5() + str12)]
-rightRS-
[]
result:fail
===buggy===
-statement-
real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
imaginary
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:MethodInvocation{arguments},L:SimpleName{name},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:MethodDeclaration{modifiers},L:Modifier{modifiers},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
update
public
to
protected
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:SimpleName{name}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
byte[][] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Context final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SimpleName{name},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
final boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===Candidate===
-change-
insert
float var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(
            (int)((var1.method1() / (float)var2) * 
                   var3 * var4), 
            1), var0.method0() / (float)var1]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[Type0 var0 = var1.method0();, Type0 var0 = var1.method0(var2);, this.var0 = var0]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[]
-rightRS-
[var0.method0(var1) || var0.method0(var2), method0(), var0.method0() && !method0(), var0.method0(var1), !method0(), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3), var0 || var1.method0(var2), this.var0 = var0, var0 == var1, method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1), var0 = var1.method0(var2) || var1.method0(var3), var0 || var1, c.isNaN, var0.method0(var1) ||
            var0.method0(var2)]
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===Candidate===
-change-
insert
Type0[][] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:Block{body}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1), var0.method0(str0 + var1 + str1, var2), var0.method0(str0 +
            str1 +
            var1), var0.method0(str0, var1), var0.method0(str0 + var1, var1), var0.method0(str0 + var1
          + str1 + var2 
          + str2 + var1.method1()), var0.method0(str0 + var1[var2], var3), var0.method0(var1 + str0 + var2 + str1 +
            var3[0] + str2, var4), var0.method0(str0
          + var1.method1()), var0.method0(str0 + var1 + str1
            + var2.method1() + str2, var3), var0.method0(str0), var0.method0(str0 + var1, var2), var0.method0(
            str0 + var1 + str1 + var2
            + str2
            + var3.method1() + str3, var4), var0.method0(
            str0 + var1 
            + str1 + var2 + str2, var3), var0.method0(str0+var1+
          str1), DataTransferProtocol.LOG, InterDatanodeProtocol.LOG, for (int var0 = 0; var0 < var1; var0++) {
      method0(new Type0(var2, var3[var0]),
          var4.method1(var0), var5);
    }, for (int var0 = 0; var0 < var1; var0++) {
        var2.method0(var3[var0]);
        var2.method0(str0);
      }, for (int var0 = 0; var0 < var1; var0++) {
      try {
        method0(new Type0(var2, var3[var0]), var4[var0]);
      } catch (Type1 var5) {
        var6.method1(str0 + var3[var0], var5);
      }
    }, int var0 = 0;, method0(new Type0(var0, var1[var2]), var3[var2]), try {
      var0 = method0(var1);
      var2.method1(str0 + var0);
      method2(var1, var3, var4);
    } catch (Type0 var5) {
      method3();
      throw var5;
    }, try {
      return var0
          .method0(new Type0<Type1>() {
            @Override
            public Type1 method1() throws Type2 {
              return new Type3(var1, var0,
                  var2, var3.method2(var2), var4);
            }
          });
    } catch (Type4 var5) {
      throw new Type2(var5.method3());
    }, try {
        this.var0.method0();
      } catch (Type0 var1) {
      }, try {
        this.var0.method0(var1);
      } catch (Type0 var2) {
        var3.method1(str0, var2);
      }, try {
        this.var0.method0();
      } catch (Type0 var1) {
        var2.method1(str0 + var1, var1);
      }, try {
        method0(new Type0(var0, var1[var2]), var3[var2]);
      } catch (Type1 var4) {
        var5.method1(str0 + var1[var2], var4);
      }, try {
        final Type0 var0 = var1[0].method0(var2);
        Type1 var3 = var4.method1(var0);
        if (var5.method2()) {
          var5.method3(str0 + var0);
        }
        var6 = method4();
        var4.method5(var6, var3, var7);
        var6.method6(var8 * var7);

        //
        // Header info
        //
        Type2<Type3> var9 = var10;
        if (var11) {
          var9 = var12.method7(var13, 
              var14.method8(var15));
        }

        long var16 = var17 + 
                            var18 * (var8-1);
        Type4 var19 = var4.method9(var6, var16);
        Type5 var20 = var4.method10(var6);
        Type6 var21 =
          method11(var13);
        Type7 var22 = var23.method12(var6, var19,
          var20, var21, var9, var24);
        var19 = var25;
        var20 = var26;
        
        var27 = new Type8(new Type9(var19,
            var28));
        var29 = new Type10(var20);
        var30 = new Type11(var13, 0, var13.method13(), 
            false, false, true, Type12.this, null, var31);
        Type13 var32 = new Type13(var24);

        new Type14(var27).method14(var13, var9, var33, var1, var32,
            var34, 0, 0, 0, 0, var30.method15(), var31);

        // send data & checksum
        var30.method16(var27, var19, null);

        // no response necessary
        var5.method17(method18().method19() + str1 + var13
            + str2 + var13.method13() + str3 + var3);

        // read ack
        if (var35) {
          Type15 var36 = var37.method20(
              var38.method21(var29));
          if (var5.method2()) {
            var5.method3(method18().method19() + str4 + var36);
          }
          if (var36.method22() != var39) {
            if (var36.method22() == var40) {
              throw new Type16(
                  str5
                   + var41.method23(var1));
            } else {
              throw new Type17(str6
                  + var41.method23(var1));
            }
          }
        }
      } catch (Type17 var42) {
        var5.method24(var24 + str7 + var13 + str8 +
            var1[0] + str9, var42);
        // check if there are any disk problem
        method25();
      } finally {
        var43.method26();
        var44.method27(var30);
        var44.method27(var27);
        var44.method27(var29);
        var44.method28(var6);
      }, try {
            var0.method0(1000);
          } catch (Type0 var1) { }]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@SuppressWarnings(str0)
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Deprecated
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Public
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Override
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@VisibleForTesting
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@Private
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@InterfaceAudience.Private()
-context-
P:MethodDeclaration{modifiers},L:Javadoc{javadoc},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double real
-leftRS-
[]
-rightRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===Candidate===
-change-
insert
boolean var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
-rightRS-
[this.var0 = var0, this.var0.var1 = true, this.var0 != var0, this.var0 = var1.method0(), var0.method0(this.var1)]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PermissionParam.NAME) @DefaultValue(PermissionParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===Candidate===
-change-
insert
int var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[var0.method0(str0 + var1 + str1 +
      str2, var2), var0 == null || var0.method0() == null, Type0 var0 = null;, try {
      var0 = new Type0(var1);
    } catch (Type1 var2){
      var3.method0(str0 + var1 + str1 +
      str2, var2);
    }, try {
        var0.method0(method1(var1));
      } catch (Type0 var2) {
        var3.method2(str0 + var1, var2);
      }, var0 = method0(new Type0(var1))]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===Candidate===
-change-
insert
Type0 [] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[Type0[] var0 = new Type0[super.var1()];, Type0 var0 = (Type0) method0(var1);, Type0 var0 = super.var1();, Type0<Type1> var0 = super.var1();, var0.method0(), method0(var0), int var0 = -1;, Type0 var0 = (Type0) var1.method0();]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===Candidate===
-change-
insert
byte[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[this.var0 = var0]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OwnerParam.NAME) @DefaultValue(OwnerParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PutOpParam.NAME) @DefaultValue(PutOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DelegationParam.NAME) @DefaultValue(DelegationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
short var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2[]> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(PostOpParam.NAME) @DefaultValue(PostOpParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(NamenodeRpcAddressParam.NAME) 
      @DefaultValue(NamenodeRpcAddressParam.DEFAULT) 
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1, Type2<Type3>> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(GroupParam.NAME) @DefaultValue(GroupParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===Candidate===
-change-
insert
long var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[boolean var0 = true && (this.var1 != null);, boolean var0 = true;, boolean var0 = true && (var1 != null);, this.var0 = var0, this.var0.var1 = true, this.var0 != null, var0 != null, this.var0, !this.var0.method0(var1), this.var0 = new Type0<Type1>(var1), var0.method0(this.var1), this.method0((Type0)var0)]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(DestinationParam.NAME) @DefaultValue(DestinationParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0<Type1> var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final Type0[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
int[] var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
double imaginary
-leftRS-
[this.var0 = var0, var0 == var1, var0.method0(var1) ||
            var0.method0(var2) ||
            var0.method0(var3) ||
            var0.method0(var4), method0(var0 * var1 - var2 * var3,
                             var0 * var3 + var2 * var1)]
-rightRS-
[]
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
@QueryParam(OverwriteParam.NAME) @DefaultValue(OverwriteParam.DEFAULT)
          final Type0 var0
-context-
P:MethodDeclaration{parameters},L:SingleVariableDeclaration{parameters},R:SingleVariableDeclaration{parameters}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
imaginary
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
imaginary
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===Candidate===
-change-
update
var0
to
var0
-context-
P:FieldAccess{name},L:ThisExpression{expression},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
real
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
var0
to
var0
-context-
P:Assignment{rightHandSide},L:FieldAccess{leftHandSide},R:
-leftRS-
[]
-rightRS-
[final long var0 = var1 - var2.method0();, var0 = var1 + var2.method0()]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[Double.NaN]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
-statement-
public
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
static
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
static
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:Modifier{modifiers}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
final
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===Candidate===
-change-
insert
final
-context-
P:FieldDeclaration{modifiers},L:Modifier{modifiers},R:SimpleType{type}
-leftRS-
[]
-rightRS-
[]
result:fail
===buggy===
-statement-
Complex
-leftRS-
[]
-rightRS-
[]
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===Candidate===
-change-
update
Type0
to
Type0
-context-
P:FieldDeclaration{type},L:Modifier{modifiers},R:VariableDeclarationFragment{fragments}
-leftRS-
[]
-rightRS-
[Type0 var0 = var1.method0(var2);, this(var0.method0(var1), var1);, Type0 var0 = new Type0(var1.method0(var2.method1(), var3), var3);]
result:fail
===buggy===
